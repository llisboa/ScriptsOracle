-------------------------------------------------------------------------------------
-- CRIAÇÃO DE SCRIPT PARA GERAR ESTRUTURA BÁSICA TSRJ
-------------------------------------------------------------------------------------
ALTER TABLESPACE T_TSRJ_DAT OFFLINE;
DROP TABLESPACE T_TSRJ_DAT INCLUDING CONTENTS;

CREATE TABLESPACE T_TSRJ_DAT DATAFILE 'D:\ORACLE\ORADATA\TSRJ\TESOURO.DBF' SIZE 100M REUSE
AUTOEXTEND ON NEXT 50M MAXSIZE UNLIMITED EXTENT MANAGEMENT LOCAL;

CREATE TABLE TSRJ.AGENDA (
             EMPRESA VARCHAR2(50),
             SEQ NUMBER(10),
             DATA DATE,
             DATA_OP DATE,
             BENEFICIÁRIO VARCHAR2(50),
             OBS VARCHAR2(1000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.AGENDA ADD CONSTRAINT ID_AGEN
PRIMARY KEY (EMPRESA, SEQ);

CREATE TABLE TSRJ.AGENDA_ITEM (
             EMPRESA VARCHAR2(50),
             AGENDA NUMBER(10),
             TIPO VARCHAR2(10),
             SEQ NUMBER(10),
             BANCO VARCHAR2(3),
             CONTA_CORRENTE VARCHAR2(30),
             CHEQUE VARCHAR2(15),
             CHEQUE_LOCAL VARCHAR2(30),
             CHEQUE_DATA DATE,
             CHEQUE_CRUZADO NUMBER(1),
             CHEQUE_DESTINO_AGÊNCIA VARCHAR2(30),
             CHEQUE_DESTINO_CONTA VARCHAR2(30),
             CHEQUE_TIPO VARCHAR2(10),
             NOMINAL VARCHAR2(50),
             ENDOSSO VARCHAR2(60),
             CHANCELA VARCHAR2(15),
             EMISSÃO_USUÁRIO VARCHAR2(30),
             EMISSÃO_MOMENTO DATE,
             CÓPIA_MOMENTO DATE,
             DÉBITO NUMBER(10),
             CRÉDITO NUMBER(10),
             PLANO_CONTAS_EMPRESA VARCHAR2(50),
             PLANO_CONTAS VARCHAR2(10),
             CENTRO_CUSTO_EMPRESA VARCHAR2(50),
             CENTRO_CUSTO VARCHAR2(30),
             REQUERENTE VARCHAR2(50),
             TIPO_DOC VARCHAR2(30),
             TIPO_DESPESA_EMPRESA VARCHAR2(50),
             TIPO_DESPESA VARCHAR2(30),
             HISTÓRICO_PADRÃO_EMPRESA VARCHAR2(50),
             HISTÓRICO_PADRÃO VARCHAR2(50),
             COMPLEMENTO VARCHAR2(50),
             NF VARCHAR2(15),
             NF_DATA DATE,
             NF_EMISSOR VARCHAR2(50),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.AGENDA_ITEM ADD CONSTRAINT ID_AGEN_ITEM
PRIMARY KEY (EMPRESA, AGENDA, SEQ);

CREATE TABLE TSRJ.BANCO (
             COD VARCHAR2(3),
             NOME VARCHAR2(50),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.BANCO ADD CONSTRAINT ID_BCO
PRIMARY KEY (COD);

CREATE TABLE TSRJ.BANCO_CHEQUE (
             BANCO VARCHAR2(3),
             CONTA_CORRENTE VARCHAR2(30),
             TIPO VARCHAR2(10),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.BANCO_CHEQUE ADD CONSTRAINT ID_BCO_CHQ
PRIMARY KEY (BANCO, CONTA_CORRENTE, TIPO);

CREATE TABLE TSRJ.BANCO_CONTA (
             BANCO VARCHAR2(3),
             CONTA_CORRENTE VARCHAR2(30),
             TIPO VARCHAR2(10),
             BORDA DIR NUMBER(10),
             AGÊNCIA VARCHAR2(30),
             EMPRESA VARCHAR2(50),
             SALDO NUMBER(10),
             CONCILIADO NUMBER(10),
             PLANO_CONTA VARCHAR2(10),
             VALOR_LRG NUMBER(10),
             CHANCELA VARCHAR2(15),
             CHEQUE_PRÓXIMO VARCHAR2(15),
             TRADE_FILIAL VARCHAR2(2),
             EXTENSO1_TOP NUMBER(10),
             EXTENSO1_ESQ NUMBER(10),
             EXTENSO1_ALT NUMBER(10),
             EXTENSO1_LRG NUMBER(10),
             EXTENSO2_TOP NUMBER(10),
             EXTENSO2_ESQ NUMBER(10),
             EXTENSO2_ALT NUMBER(10),
             EXTENSO2_LRG NUMBER(10),
             NOMINAL_TOP NUMBER(10),
             ESPAÇO_LINHA NUMBER(10),
             VALOR_TOP NUMBER(10),
             VALOR_ESQ NUMBER(10),
             VALOR_ALT NUMBER(10),
             CHEQUE_TOP NUMBER(10),
             CHEQUE_ESQ NUMBER(10),
             CHEQUE_ALT NUMBER(10),
             CHEQUE_LRG NUMBER(10),
             ALTURA NUMBER(10),
             LARGURA NUMBER(10),
             BORDA_ESQ NUMBER(10),
             NOMINAL_ESQ NUMBER(10),
             NOMINAL_ALT NUMBER(10),
             NOMINAL_LRG NUMBER(10),
             LOCAL_TOP NUMBER(10),
             LOCAL_ESQ NUMBER(10),
             LOCAL_ALT NUMBER(10),
             LOCAL_LRG NUMBER(10),
             DIA_TOP NUMBER(10),
             DIA_ESQ NUMBER(10),
             DIA_ALT NUMBER(10),
             DIA_LRG NUMBER(10),
             MÊS_TOP NUMBER(10),
             MÊS_ESQ NUMBER(10),
             MÊS_ALT NUMBER(10),
             MÊS_LRG NUMBER(10),
             ANO_TOP NUMBER(10),
             ANO_ESQ NUMBER(10),
             ANO_ALT NUMBER(10),
             ANO_LRG NUMBER(10),
             ASSINATURA_TOP NUMBER(10),
             ASSINATURA_ESQ NUMBER(10),
             ASSINATURA_ALT NUMBER(10),
             ASSINATURA_LRG NUMBER(10),
             ENDOSSO_TOP NUMBER(10),
             ENDOSSO_ESQ NUMBER(10),
             ENDOSSO_ALT NUMBER(10),
             ENDOSSO_LRG NUMBER(10),
             CHANCELA_TOP NUMBER(10),
             CHANCELA_ESQ NUMBER(10),
             CHANCELA_ALT NUMBER(10),
             CHANCELA_LRG NUMBER(10),
             FUNDO BLOB,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.BANCO_CONTA ADD CONSTRAINT ID_BCO_CTA
PRIMARY KEY (BANCO, CONTA_CORRENTE, TIPO);

CREATE TABLE TSRJ.CÂMBIO (
             DATA DATE,
             DÓLAR_COMPRA NUMBER(10),
             DÓLAR_VENDA NUMBER(10),
             UFIR NUMBER(10),
             URV NUMBER(10),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.CÂMBIO ADD CONSTRAINT ID_CAMB
PRIMARY KEY (DATA);

CREATE TABLE TSRJ.CENTRO_CUSTO (
             EMPRESA VARCHAR2(50),
             COD VARCHAR2(30),
             TRADE VARCHAR2(2),
             ESCRITÓRIO VARCHAR2(10),
             EMPRESA_DESPESA VARCHAR2(50),
             DEPTO VARCHAR2(15),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.CENTRO_CUSTO ADD CONSTRAINT ID_CEN_CUST
PRIMARY KEY (EMPRESA, COD);

CREATE TABLE TSRJ.CHANCELA (
             COD VARCHAR2(15),
             FIGURA BLOB,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.CHANCELA ADD CONSTRAINT ID_CHANC
PRIMARY KEY (COD);

CREATE TABLE TSRJ.CHEQUE (
             EMPRESA VARCHAR2(50),
             TRANSAÇÃO NUMBER(10),
             SEQ NUMBER(10),
             BANCO VARCHAR2(3),
             CHEQUE VARCHAR2(3),
             IMPRESSÃO NUMBER(1),
             CÓPIA NUMBER(1),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.CHEQUE ADD CONSTRAINT ID_CHQ
PRIMARY KEY (EMPRESA, TRANSAÇÃO, SEQ);

CREATE TABLE TSRJ.CHEQUES_CANCELADOS (
             BANCO VARCHAR2(3),
             CONTA VARCHAR2(30),
             TIPO VARCHAR2(10),
             CHEQUE VARCHAR2(15),
             DATA DATE,
             MOTIVO VARCHAR2(50),
             MOMENTO DATE,
             USUÁRIO VARCHAR2(50),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.CHEQUES_CANCELADOS ADD CONSTRAINT ID_CHQ_CANC
PRIMARY KEY (BANCO, CONTA, TIPO, CHEQUE);

CREATE TABLE TSRJ.CONTA_IMPOSTO (
             EMPRESA VARCHAR2(50),
             CONTA VARCHAR2(10),
             CONTA_TIPO VARCHAR2(7),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.CONTA_IMPOSTO ADD CONSTRAINT ID_CTA_IMP
PRIMARY KEY (EMPRESA, CONTA);

CREATE TABLE TSRJ.D2_COMPENS_COM_DARF (
             EMPRESA VARCHAR2(50),
             DARF_SEQ NUMBER(10),
             SEQ NUMBER(10),
             APURAÇÃO DATE,
             VL NUMBER(10),
             PR_TIPO VARCHAR2(1),
             PR_NUM VARCHAR2(1),
             PR_MEDIDA_JUDICIAL VARCHAR2(1),
             PR_VARA VARCHAR2(2),
             PR_MUN VARCHAR2(50),
             PR_UF VARCHAR2(2),
             ANO NUMBER(4),
             TRIM NUMBER(5),
             QUOTA NUMBER(5),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.D2_COMPENS_COM_DARF ADD CONSTRAINT ID_D2_COMP_C_DARF
PRIMARY KEY (EMPRESA, DARF_SEQ, SEQ);

CREATE TABLE TSRJ.D2_COMPENS_SEM_DARF (
             EMPRESA VARCHAR2(50),
             SEQ NUMBER(10),
             APURAÇÃO DATE,
             ANO NUMBER(4),
             TRIM NUMBER(5),
             QUOTA NUMBER(5),
             CRED_ORIG VARCHAR2(2),
             PR_TIPO VARCHAR2(1),
             PR_NUM VARCHAR2(20),
             PR_MEDIDA_JUDICIAL VARCHAR2(1),
             PR_VARA VARCHAR2(2),
             PR_MUN VARCHAR2(50),
             PR_UF VARCHAR2(2),
             VL NUMBER(10),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.D2_COMPENS_SEM_DARF ADD CONSTRAINT ID_D2_COMP_S_DARF
PRIMARY KEY (EMPRESA, SEQ);

CREATE TABLE TSRJ.D2_DARF (
             EMPRESA VARCHAR2(50),
             SEQ NUMBER(10),
             APURAÇÃO DATE,
             VENCIMENTO DATE,
             REF VARCHAR2(20),
             MULTA NUMBER(10),
             JUROS NUMBER(10),
             ANO NUMBER(4),
             TRIM NUMBER(5),
             QUOTA NUMBER(5),
             PRINCIPAL NUMBER(10),
             COD_REC VARCHAR2(5),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.D2_DARF ADD CONSTRAINT ID_D2_DARF
PRIMARY KEY (EMPRESA, SEQ);

CREATE TABLE TSRJ.D2_PARCELAMENTO (
             EMPRESA VARCHAR2(50),
             SEQ NUMBER(10),
             APURAÇÃO DATE,
             ANO NUMBER(4),
             TRIM NUMBER(5),
             QUOTA NUMBER(5),
             PR_NUM VARCHAR2(20),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.D2_PARCELAMENTO ADD CONSTRAINT ID_D2_PARC
PRIMARY KEY (EMPRESA, SEQ);

CREATE TABLE TSRJ.D2_SUSPENSÃO (
             EMPRESA VARCHAR2(50),
             SEQ NUMBER(10),
             APURAÇÃO DATE,
             VL NUMBER(10),
             MOTIVO VARCHAR2(1),
             COD_REC VARCHAR2(5),
             PR_NUM VARCHAR2(20),
             PR_SEÇÃO VARCHAR2(2),
             PR_VARA VARCHAR2(2),
             PR_MUN VARCHAR2(50),
             PR_UF VARCHAR2(2),
             PR_COM_DEPÓSITO NUMBER(1),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.D2_SUSPENSÃO ADD CONSTRAINT ID_D2_SUSP
PRIMARY KEY (EMPRESA, SEQ);

CREATE TABLE TSRJ.DCTF_CONTAS (
             EMPRESA VARCHAR2(50),
             CONTA VARCHAR2(10),
             COD_RECEITA VARCHAR2(5),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.DCTF_CONTAS ADD CONSTRAINT ID_DCTF_CTAS
PRIMARY KEY (EMPRESA, CONTA);

CREATE TABLE TSRJ.DCTF_EXP (
             REGISTRO NUMBER(5),
             CAMPO VARCHAR2(30),
             POSFIM NUMBER(5),
             ALINHAMENTO VARCHAR2(1),
             PREENCHIMENTO VARCHAR2(1),
             EXTRASQL VARCHAR2(2000),
             FORMATO VARCHAR2(12),
             DECIMAIS NUMBER(5),
             DECIMAIS_SEPARADOR VARCHAR2(1),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.DCTF_EXP ADD CONSTRAINT ID_DCTF_EXP
PRIMARY KEY (REGISTRO, CAMPO);

CREATE TABLE TSRJ.DCTF_GRUPO_TRIBUTO (
             COD_RECEITA VARCHAR2(5),
             GRUPO_TRIBUTO VARCHAR2(2),
             QTD_QUOTAS VARCHAR2(1),
             PERIODICIDADE VARCHAR2(1),
             BALANÇO_REDUÇÃO VARCHAR2(1),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.DCTF_GRUPO_TRIBUTO ADD CONSTRAINT ID_DCTR_GR_TRIB
PRIMARY KEY (COD_RECEITA);

CREATE TABLE TSRJ.DCTF_HEADER (
             EMPRESA VARCHAR2(50),
             CALEND_ANO VARCHAR2(4),
             ORC VARCHAR2(1),
             DECL_SIT VARCHAR2(2),
             DECL_TIPO VARCHAR2(1),
             DECL_EMPRES_NM VARCHAR2(60),
             COMPLEM_DECL VARCHAR2(1),
             EVENT_OCORR_DT DATE,
             TOFG VARCHAR2(5),
             JUR_NATUR_COD VARCHAR2(4),
             CNAE VARCHAR2(7),
             LOGRAD VARCHAR2(40),
             NUM VARCHAR2(6),
             COMPL VARCHAR2(20),
             BAIRRO VARCHAR2(20),
             MUNIC VARCHAR2(50),
             UF VARCHAR2(2),
             CEP VARCHAR2(8),
             DDD_TEL VARCHAR2(4),
             TEL VARCHAR2(8),
             DDD_FAX VARCHAR2(4),
             FAX VARCHAR2(8),
             CX_POSTAL VARCHAR2(6),
             UF_CX_POSTAL VARCHAR2(2),
             CEP_CX_POSTAL VARCHAR2(8),
             EMAIL VARCHAR2(40),
             TRIM_ENDER_ALTER VARCHAR2(1),
             PER_INI VARCHAR2(4),
             PE_FIN VARCHAR2(4),
             RETIF_DECL VARCHAR2(1),
             JUR_PESS_QUALIF VARCHAR2(1),
             LUCRO_FM_TRIBUT VARCHAR2(1),
             PJ_DEB_SCP VARCHAR2(1),
             PR_REG_ESPECIAL VARCHAR2(1),
             TERC_PROD_EXP VARCHAR2(1),
             IPI_PRES_CRED VARCHAR2(1),
             IPI_PRES_APUR_FM VARCHAR2(1),
             PJ_INATIVA_TRI VARCHAR2(1),
             PJ_BALANCETE_TRI VARCHAR2(1),
             REPR_NM VARCHAR2(60),
             REPR_CPF VARCHAR2(11),
             REPR_LOGR VARCHAR2(40),
             REPR_NUM VARCHAR2(10),
             REPR_COMPL VARCHAR2(30),
             REPR_BAIRRO VARCHAR2(20),
             REPR_MUNIC VARCHAR2(50),
             REPR_UF VARCHAR2(2),
             REPR_CEP VARCHAR2(8),
             REPR_DDD_TEL VARCHAR2(5),
             REPR_TEL VARCHAR2(8),
             REPR_RML VARCHAR2(5),
             REPR_DDD_FAX VARCHAR2(5),
             REPR_FAX VARCHAR2(8),
             REPR_EMAIL VARCHAR2(100),
             RESP_NM VARCHAR2(60),
             RESP_CPF VARCHAR2(11),
             RESP_CRC VARCHAR2(15),
             RESP_UF VARCHAR2(2),
             RESP_DDD_TEL VARCHAR2(5),
             RESP_TEL VARCHAR2(8),
             RESP_RML VARCHAR2(5),
             RESP_DDD_FAX VARCHAR2(5),
             RESP_FAX VARCHAR2(8),
             RESP_EMAIL VARCHAR2(100),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.DCTF_HEADER ADD CONSTRAINT ID_DCTF_HEAD
PRIMARY KEY (EMPRESA);

CREATE TABLE TSRJ.DIRF_TIPO_01 (
             CNPJ VARCHAR2(14),
             CALEND_ANO VARCHAR2(4),
             O_R VARCHAR2(1),
             DECL_SIT VARCHAR2(1),
             DECL_TIPO VARCHAR2(1),
             DECL_NAT VARCHAR2(1),
             REND_IMP_TIPO_ID VARCHAR2(1),
             REF_ANO VARCHAR2(4),
             DECL_EMPRES_NM VARCHAR2(60),
             RESP_CPF_CNPJ VARCHAR2(11),
             DECL_CNPJ VARCHAR2(14),
             RESP_CPF VARCHAR2(11),
             RESP_NM VARCHAR2(60),
             RESP_DDD VARCHAR2(4),
             RESP_TEL VARCHAR2(8),
             RESP_RAMAL VARCHAR2(6),
             RESP_FAX VARCHAR2(8),
             RESP_EMAIL VARCHAR2(100),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.DIRF_TIPO_01 ADD CONSTRAINT ID_DIRF_TIP_1
PRIMARY KEY (CNPJ);

CREATE TABLE TSRJ.DIRF_TIPO_02 (
             DECL_CNPJ VARCHAR2(18),
             EMPRESA VARCHAR2(50),
             RET_COD VARCHAR2(4),
             BENEF_ESP_COD VARCHAR2(1),
             BENEF VARCHAR2(18),
             BENEF_NM VARCHAR2(60),
             JAN_RT NUMBER(10),
             JAN_IR NUMBER(10),
             FEV_RT NUMBER(10),
             FEV_IR NUMBER(10),
             MAR_RT NUMBER(10),
             MAR_IR NUMBER(10),
             ABR_RT NUMBER(10),
             ABR_IR NUMBER(10),
             MAI_RT NUMBER(10),
             MAI_IR NUMBER(10),
             JUN_RT NUMBER(10),
             JUN_IR NUMBER(10),
             JUL_RT NUMBER(10),
             JUL_IR NUMBER(10),
             AGO_RJ NUMBER(10),
             AGO_IR NUMBER(10),
             SET_RT NUMBER(10),
             SET_IR NUMBER(10),
             OUT_RT NUMBER(10),
             OUT_IR NUMBER(10),
             NOV_RT NUMBER(10),
             NOV_IR NUMBER(10),
             DEZ_RT NUMBER(10),
             DEZ_IR NUMBER(10),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.DIRF_TIPO_02 ADD CONSTRAINT ID_DIRF_TIP_1
PRIMARY KEY (DECL_CNPJ);

CREATE TABLE TSRJ.EMPRESA (
             NOME_EMPRESA VARCHAR2(50),
             TRADE_EMPRESA VARCHAR2(2),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.EMPRESA ADD CONSTRAINT ID_EMPR
PRIMARY KEY (NOME_EMPRESA);

CREATE TABLE TSRJ.GRUPO (
             COD VARCHAR2(30),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.GRUPO ADD CONSTRAINT ID_GRUP
PRIMARY KEY (COD);

CREATE TABLE TSRJ.HISTÓRICO_PADRÃO (
             EMPRESA VARCHAR2(50),
             COD VARCHAR2(50),
             TRADE VARCHAR2(3),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.HISTÓRICO_PADRÃO ADD CONSTRAINT ID_HIST_PADR
PRIMARY KEY (EMPRESA, COD,);

CREATE TABLE TSRJ.MATERIAL (
             COD VARCHAR2(50),
             GRUPO VARCHAR2(30),
             DETALHES VARCHAR2(50),
             MÍNIMO NUMBER(10),
             IDEAL NUMBER(10),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.MATERIAL ADD CONSTRAINT ID_MAT
PRIMARY KEY (COD);

CREATE TABLE TSRJ.MATERIAL_ENTRADA (
             EMPRESA VARCHAR2(50),
             DATA DATE,
             MATERIAL VARCHAR2(50),
             FORNECEDOR VARCHAR2(50),
             QUANTIDADE NUMBER(10),
             VALOR NUMBER(10),
             REF VARCHAR2(20),
             OBS VARCHAR2(50),
             CRIAÇÃO_USUÁRIO VARCHAR2(30),
             CRIAÇÃO_MOMENTO DATE,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.MATERIAL_ENTRADA ADD CONSTRAINT ID_MAT_ENT
PRIMARY KEY (EMPRESA, DATA, MATERIAL, FORNECEDOR);

CREATE TABLE TSRJ.MATERIAL_SAÍDA (
             EMPRESA VARCHAR2(50),
             DATA DATE,
             MATERIAL VARCHAR2(50),
             REQUERENTE VARCHAR2(50),
             QUANTIDADE NUMBER(10),
             CENTRO_CUSTO VARCHAR2(30),
             DATA_REQUISIÇÃO DATE,
             DATA_RECEBIMENTO DATE,
             REF VARCHAR2(20),
             OBS VARCHAR2(50),
             CRIAÇÃO_USUÁRIO VARCHAR2(30),
             CRIAÇÃO_MOMENTO DATE,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.MATERIAL_SAÍDA ADD CONSTRAINT ID_MAT_SAIDA
PRIMARY KEY (EMPRESA, DATA, MATERIAL, REQUERENTE);

CREATE TABLE TSRJ.PESSOA (
             NOME VARCHAR2(150),
             É_FORN_MATERIAL NUMBER(1),
             É_REQUERENTE NUMBER(1),
             É_EMPRESA NUMBER(1),
             É_BANCO NUMBER(1),
             CGC_CPF VARCHAR2(18),
             INCR_INSS VARCHAR2(18),
             ENDEREÇO VARCHAR2(255),
             BAIRRO VARCHAR2(50),
             CIDADE VARCHAR2(50),
             CEP VARCHAR2(8),
             TEL VARCHAR2(8),
             FAX VARCHAR2(8),
             CONTATO VARCHAR2(255),
             PRÁPAGA NUMBER(1),
             COD VARCHAR2(50),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.PESSOA ADD CONSTRAINT ID_PESS
PRIMARY KEY (COD);

CREATE TABLE TSRJ.PESSOA_REF_PADRÃO (
             EMPRESA VARCHAR2(50),
             PESSOA VARCHAR2(50),
             BANCO VARCHAR2(3),
             CONTA_CORRENTE VARCHAR2(30),
             PLANO_CONTAS VARCHAR2(10),
             CENTRO_CUSTO VARCHAR2(30),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.PESSOA_REF_PADRÃO ADD CONSTRAINT ID_PESS_REF_PADR
PRIMARY KEY (EMPRESA, PESSOA);

CREATE TABLE TSRJ.PLANO_CONTAS (
             EMPRESA VARCHAR2(50),
             CONTA VARCHAR2(10),
             DESCRIÇÃO VARCHAR2(30),
             TRADE VARCHAR2(10),
             FILIAL VARCHAR2(2),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.PLANO_CONTAS ADD CONSTRAINT ID_PLAN_CONT
PRIMARY KEY (EMPRESA, CONTA);

CREATE TABLE TSRJ.SYS_CONFIG_GLOBAL (
             PARAM VARCHAR2(30),
             CONFIG VARCHAR2(2000)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.SYS_CONFIG_GLOBAL ADD CONSTRAINT ID_SYS_CFG_GLB
PRIMARY KEY (PARAM);

CREATE TABLE TSRJ.SYS_GRUPO_REL (
             SEQ NUMBER(10),
             GRUPO VARCHAR2(30),
             PAPEL_TIPO NUMBER(5),
             MARGEM_ESQUERDA FLOAT,
             MARGEM_DIREITA FLOAT,
             MARGEM_SUPERIOR FLOAT,
             MARGEM_INFERIOR FLOAT
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.SYS_GRUPO_REL ADD CONSTRAINT ID_SYS_GRUP_REL
PRIMARY KEY (SEQ);

CREATE TABLE TSRJ.SYS_OCORRÊNCIA (
             SEQ NUMBER(10),
             APLICAÇÃO VARCHAR2(30),
             OCORRÊNCIA VARCHAR2(1000),
             USUÁRIO VARCHAR2(20),
             MOMENTO DATE,
             LOCAL VARCHAR2(20)
             ) TABLESPACE T_TSRJ_DAT;

CREATE TABLE TSRJ.SYS_TABELA (
             NOME VARCHAR2(50),
             CHAVE VARCHAR2(1000),
             EXPR_PRIMÁRIA VARCHAR2(1000),
             EXPR_APRESENTA VARCHAR2(1000),
             CAMPOS VARCHAR2(1000),
             RELAÇÕES_1_N VARCHAR2(1000),
             NÍVEL NUMBER(10)
             ) TABLESPACE T_TSRJ_DAT;

CREATE TABLE TSRJ.SYS_USUÁRIO (
             USUÁRIO VARCHAR2(20),
             NOME VARCHAR2(50),
             SUPERVISOR VARCHAR2(20),
             DEPTO VARCHAR2(10),
             MSG VARCHAR2(1000),
             ASSINATURA BLOB,
             TEMPO_ATUALIZA NUMBER(10),
             EMPRESA VARCHAR2(50),
             COD VARCHAR2(30)
             ) TABLESPACE T_TSRJ_DAT;

CREATE TABLE TSRJ.TIPO_DESPESA (
             EMPRESA VARCHAR2(50),
             COD VARCHAR2(30),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.TIPO_DESPESA ADD CONSTRAINT ID_TIP_DESP
PRIMARY KEY (EMPRESA, COD);

CREATE TABLE TSRJ.TIPO_DOC (
             COD VARCHAR2(30),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.TIPO_DOC ADD CONSTRAINT ID_TIP_DOC
PRIMARY KEY (COD);

CREATE TABLE TSRJ.TRANSAÇÃO (
             EMPRESA VARCHAR2(50),
             SEQ NUBMER(10),
             DATA DATE,
             DATA_OP DATE,
             BENEFICIÁRIO VARCHAR2(50),
             OBS VARCHAR2(1000),
             INCORRETA NUMBER(1),
             EXPORTADO NUMBER(1),
             CANCEL_USUÁRIO VARCHAR2(30),
             CANCEL_MOMENTO DATE,
             FILIAL VARCHAR2(2),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.TRANSAÇÃO ADD CONSTRAINT ID_TRAN
PRIMARY KEY (EMPRESA, SEQ);

CREATE TABLE TSRJ.TRANSAÇÃO_ITEM (
             EMPRESA VARCHAR2(50),
             TRANSAÇÃO NUMBER(10),
             TIPO VARCHAR2(10),
             SEQ NUMBER(10),
             BANCO VARCHAR2(3),
             CONTA_CORRENTE VARCHAR2(30),
             CHEQUE_LOCAL VARCHAR2(30),
             CHEQUE_DATA DATE,
             CHEQUE_CRUZADO NUMBER(1),
             CHEQUE_DESTINO_AGÊNCIA VARCHAR2(30),
             CHEQUE_DESTINO_CONTA VARCHAR2(30),
             CHEQUE_TIPO VARCHAR2(10),
             NOMINAL VARCHAR2(50),
             ENDOSSO VARCHAR2(60),
             CHANCELA VARCHAR2(15),
             CHEQUE VARCHAR2(15),
             EMISSÃO_USUÁRIO VARCHAR2(30),
             EMISSÃO_MOMENTO DATE,
             CÓPIA_MOMENTO DATE,
             DÉBITO NUMBER(10),
             CRÉDITO NUMBER(10),
             PLANO_CONTAS_EMPRESA VARCHAR2(50),
             PLANO_CONTAS VARCHAR2(10),
             CENTRO_CUSTO_EMPRESA VARCHAR2(50),
             CENTRO_CUSTO VARCHAR2(30),
             REQUERENTE VARCHAR2(50),
             TIPO_DOC VARCHAR2(30),
             TIPO_DESPESA_EMPRESA VARCHAR2(50),
             TIPO_DESPESA VARCHAR2(30),
             HISTÓRICO_PADRÃO_EMPRESA VARCHAR2(50),
             HISTÓRICO_PADRÃO VARCHAR2(50),
             COMPLEMENTO VARCHAR2(50),
             NF VARCHAR2(15),
             NF_DATA DATE,
             CRIAÇÃO_USUÁRIO VARCHAR2(30),
             CRIAÇÃO_MOMENTO DATE,
             NF_EMISSOR VARCHAR2(50),
             DARF_SEQ NUMBER(10),
             CCD_SEQ NUMBER(10),
             CSD_SEQ NUMBER(10),
             PCTO_SEQ NUMBER(10),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TSRJ_DAT;

ALTER TABLE TSRJ.TRANSAÇÃO_ITEM ADD CONSTRAINT ID_TRAN_IT
PRIMARY KEY (EMPRESA, TRANSAÇÃO, SEQ);

ALTER TABLE TSRJ.AGENDA_ITEM ADD CONSTRAINT AGEN$AGEN_ITEM
FOREIGN KEY (EMPRESA) REFERENCES TSRJ.AGENDA (EMPRESA) ON DELETE CASCADE;

ALTER TABLE TSRJ.AGENDA_ITEM ADD CONSTRAINT AGEN$AGEN_ITEM
FOREIGN KEY (AGENDA) REFERENCES TSRJ.AGENDA (SEQ) ON DELETE CASCADE;

ALTER TABLE TSRJ.BANCO_CONTA ADD CONSTRAINT BCO$BCO_CTA
FOREIGN KEY (BANCO) REFERENCES TSRJ.BANCO (COD) ON DELETE CASCADE;

ALTER TABLE TSRJ.CHEQUES_CANCELADOS ADD CONSTRAINT BCO_CHQ$CHQ_CANC
FOREIGN KEY (BANCO) REFERENCES TSRJ.BANCO_CHEQUE (BANCO);

ALTER TABLE TSRJ.CHEQUES_CANCELADOS ADD CONSTRAINT BCO_CHQ$CHQ_CANC
FOREIGN KEY (CONTA) REFERENCES TSRJ.BANCO_CHEQUE (CONTA_CORRENTE);

ALTER TABLE TSRJ.CHEQUES_CANCELADOS ADD CONSTRAINT BCO_CHQ$CHQ_CANC
FOREIGN KEY (TIPO) REFERENCES TSRJ.BANCO_CHEQUE (TIPO);

ALTER TABLE TSRJ.AGENDA_ITEM ADD CONSTRAINT BCO_CTA$AGEN_ITEM
FOREIGN KEY (BANCO) REFERENCES TSRJ.BANCO_CONTA (BANCO);

ALTER TABLE TSRJ.AGENDA_ITEM ADD CONSTRAINT BCO_CTA$AGEN_ITEM
FOREIGN KEY (CONTA_CORRENTE) REFERENCES TSRJ.BANCO_CONTA (CONTA_CORRENTE);

ALTER TABLE TSRJ.AGENDA_ITEM ADD CONSTRAINT BCO_CTA$AGEN_ITEM
FOREIGN KEY (TIPO) REFERENCES TSRJ.BANCO_CONTA (TIPO);

ALTER TABLE TSRJ.TRANSAÇÃO_ITEM ADD CONSTRAINT BCO_CTA$TRAN_IT
FOREIGN KEY (BANCO) REFERENCES TSRJ.BANCO_CONTA (BANCO);

ALTER TABLE TSRJ.TRANSAÇÃO_ITEM ADD CONSTRAINT BCO_CTA$TRAN_IT
FOREIGN KEY (CONTA_CORRENTE) REFERENCES TSRJ.BANCO_CONTA (CONTA_CORRENTE);

ALTER TABLE TSRJ.TRANSAÇÃO_ITEM ADD CONSTRAINT BCO_CTA$TRAN_IT
FOREIGN KEY (TIPO) REFERENCES TSRJ.BANCO_CONTA (TIPO);

ALTER TABLE TSRJ.AGENDA_ITEM ADD CONSTRAINT CEN_CUST$AGEN_ITEM
FOREIGN KEY (CENTRO_CUSTO_EMPRESA) REFERENCES TSRJ.CENTRO_CUSTO (EMPRESA);

ALTER TABLE TSRJ.AGENDA_ITEM ADD CONSTRAINT CEN_CUST$AGEN_ITEM
FOREIGN KEY (CENTRO_CUSTO) REFERENCES TSRJ.CENTRO_CUSTO (COD);

ALTER TABLE TSRJ.TRANSAÇÃO_ITEM ADD CONSTRAINT CEN_CUST$TRAN_IT
FOREIGN KEY (CENTRO_CUSTO_EMPRESA) REFERENCES TSRJ.CENTRO_CUSTO (EMPRESA);

ALTER TABLE TSRJ.TRANSAÇÃO_ITEM ADD CONSTRAINT CEN_CUST$TRAN_IT
FOREIGN KEY (CENTRO_CUSTO) REFERENCES TSRJ.CENTRO_CUSTO (COD);

ALTER TABLE TSRJ.AGENDA_ITEM ADD CONSTRAINT CHANC$AGEN_ITEM
FOREIGN KEY (CHANCELA) REFERENCES TSRJ.CHANCELA (COD);

ALTER TABLE TSRJ.BANCO_CONTA ADD CONSTRAINT CHANC$BCO_CTA
FOREIGN KEY (CHANCELA) REFERENCES TSRJ.CHANCELA (COD) ON DELETE CASCADE;

ALTER TABLE TSRJ.TRANSAÇÃO_ITEM ADD CONSTRAINT CHANC$TRAN_IT
FOREIGN KEY (CHANCELA) REFERENCES TSRJ.CHANCELA (COD);

ALTER TABLE TSRJ.PLANO_CONTAS ADD CONSTRAINT CTA_IMP$PLAN_CONT
FOREIGN KEY (EMPRESA) REFERENCES TSRJ.CONTA_IMPOSTO (EMPRESA) ON DELETE CASCADE;

ALTER TABLE TSRJ.PLANO_CONTAS ADD CONSTRAINT CTA_IMP$PLAN_CONT
FOREIGN KEY (CONTA) REFERENCES TSRJ.CONTA_IMPOSTO (CONTA) ON DELETE CASCADE;

ALTER TABLE TSRJ.D2_COMPENS_COM_DARF ADD CONSTRAINT D2_DARF$D2_COMP_C_DARF
FOREIGN KEY (EMPRESA) REFERENCES TSRJ.D2_DARF (EMPRESA) ON DELETE CASCADE;

ALTER TABLE TSRJ.D2_COMPENS_COM_DARF ADD CONSTRAINT D2_DARF$D2_COMP_C_DARF
FOREIGN KEY (DARF_SEQ) REFERENCES TSRJ.D2_DARF (SEQ) ON DELETE CASCADE;

ALTER TABLE TSRJ.D2_DARF ADD CONSTRAINT DCTR_GR_TRIB$D2_DARF
FOREIGN KEY (COD_REC) REFERENCES TSRJ.DCTF_GRUPO_TRIBUTO (COD_RECEITA) ON DELETE CASCADE;

ALTER TABLE TSRJ.D2_SUSPENSÃO ADD CONSTRAINT DCTR_GR_TRIB$D2_SUSP
FOREIGN KEY (COD_REC) REFERENCES TSRJ.DCTF_GRUPO_TRIBUTO (COD_RECEITA) ON DELETE CASCADE;

ALTER TABLE TSRJ.DCTF_CONTAS ADD CONSTRAINT DCTR_GR_TRIB$DCTF_CTAS
FOREIGN KEY (COD_RECEITA) REFERENCES TSRJ.DCTF_GRUPO_TRIBUTO (COD_RECEITA) ON DELETE CASCADE;

ALTER TABLE TSRJ.BANCO_CONTA ADD CONSTRAINT EMPR$BCO_CTA
FOREIGN KEY (EMPRESA) REFERENCES TSRJ.EMPRESA (NOME_EMPRESA) ON DELETE CASCADE;

ALTER TABLE TSRJ.CENTRO_CUSTO ADD CONSTRAINT EMPR$CEN_CUST
FOREIGN KEY (EMPRESA) REFERENCES TSRJ.EMPRESA (NOME_EMPRESA) ON DELETE CASCADE;

ALTER TABLE TSRJ.D2_COMPENS_SEM_DARF ADD CONSTRAINT EMPR$D2_COMP_S_DARF
FOREIGN KEY (EMPRESA) REFERENCES TSRJ.EMPRESA (NOME_EMPRESA) ON DELETE CASCADE;

ALTER TABLE TSRJ.D2_DARF ADD CONSTRAINT EMPR$D2_DARF
FOREIGN KEY (EMPRESA) REFERENCES TSRJ.EMPRESA (NOME_EMPRESA) ON DELETE CASCADE;

ALTER TABLE TSRJ.D2_PARCELAMENTO ADD CONSTRAINT EMPR$D2_PARC
FOREIGN KEY (EMPRESA) REFERENCES TSRJ.EMPRESA (NOME_EMPRESA) ON DELETE CASCADE;

ALTER TABLE TSRJ.D2_SUSPENSÃO ADD CONSTRAINT EMPR$D2_SUSP
FOREIGN KEY (EMPRESA) REFERENCES TSRJ.EMPRESA (NOME_EMPRESA) ON DELETE CASCADE;

ALTER TABLE TSRJ.DCTF_CONTAS ADD CONSTRAINT EMPR$DCTF_CTAS
FOREIGN KEY (EMPRESA) REFERENCES TSRJ.EMPRESA (NOME_EMPRESA) ON DELETE CASCADE;

ALTER TABLE TSRJ.DCTF_HEADER ADD CONSTRAINT EMPR$DCTF_HEAD
FOREIGN KEY (EMPRESA) REFERENCES TSRJ.EMPRESA (NOME_EMPRESA) ON DELETE CASCADE;

ALTER TABLE TSRJ.MATERIAL_ENTRADA ADD CONSTRAINT EMPR$MAT_ENT
FOREIGN KEY (EMPRESA) REFERENCES TSRJ.EMPRESA (NOME_EMPRESA) ON DELETE CASCADE;

ALTER TABLE TSRJ.MATERIAL_SAÍDA ADD CONSTRAINT EMPR$MAT_SAIDA
FOREIGN KEY (EMPRESA) REFERENCES TSRJ.EMPRESA (NOME_EMPRESA) ON DELETE CASCADE;

ALTER TABLE TSRJ.PESSOA_REF_PADRÃO ADD CONSTRAINT EMPR$PESS_REF_PADR
FOREIGN KEY (EMPRESA) REFERENCES TSRJ.EMPRESA (NOME_EMPRESA) ON DELETE CASCADE;

ALTER TABLE TSRJ.PLANO_CONTAS ADD CONSTRAINT EMPR$PLAN_CONT
FOREIGN KEY (EMPRESA) REFERENCES TSRJ.EMPRESA (NOME_EMPRESA) ON DELETE CASCADE;

ALTER TABLE TSRJ.TIPO_DESPESA ADD CONSTRAINT EMPR$TIP_DESP
FOREIGN KEY (EMPRESA) REFERENCES TSRJ.EMPRESA (NOME_EMPRESA) ON DELETE CASCADE;

ALTER TABLE TSRJ.TRANSAÇÃO ADD CONSTRAINT EMPR$TRAN
FOREIGN KEY (EMPRESA) REFERENCES TSRJ.EMPRESA (NOME_EMPRESA) ON DELETE CASCADE;

ALTER TABLE TSRJ.MATERIAL ADD CONSTRAINT GRUP$MAT
FOREIGN KEY (GRUPO) REFERENCES TSRJ.GRUPO (COD) ON DELETE CASCADE;

ALTER TABLE TSRJ.AGENDA_ITEM ADD CONSTRAINT HIST_PADR$AGEN_ITEM
FOREIGN KEY (HISTÓRICO_PADRÃO_EMPRESA) REFERENCES TSRJ.HISTÓRICO_PADRÃO (EMPRESA);

ALTER TABLE TSRJ.AGENDA_ITEM ADD CONSTRAINT HIST_PADR$AGEN_ITEM
FOREIGN KEY (HISTÓRICO_PADRÃO) REFERENCES TSRJ.HISTÓRICO_PADRÃO (COD);

ALTER TABLE TSRJ.TRANSAÇÃO_ITEM ADD CONSTRAINT HIST_PADR$TRAN_IT
FOREIGN KEY (HISTÓRICO_PADRÃO_EMPRESA) REFERENCES TSRJ.HISTÓRICO_PADRÃO (EMPRESA);

ALTER TABLE TSRJ.TRANSAÇÃO_ITEM ADD CONSTRAINT HIST_PADR$TRAN_IT
FOREIGN KEY (HISTÓRICO_PADRÃO) REFERENCES TSRJ.HISTÓRICO_PADRÃO (COD);

ALTER TABLE TSRJ.MATERIAL_ENTRADA ADD CONSTRAINT MAT$MAT_ENT
FOREIGN KEY (MATERIAL) REFERENCES TSRJ.MATERIAL (COD) ON DELETE CASCADE;

ALTER TABLE TSRJ.MATERIAL_SAÍDA ADD CONSTRAINT MAT$MAT_SAIDA
FOREIGN KEY (MATERIAL) REFERENCES TSRJ.MATERIAL (COD) ON DELETE CASCADE;

ALTER TABLE TSRJ.AGENDA ADD CONSTRAINT PESS$AGEN
FOREIGN KEY (BENEFICIÁRIO) REFERENCES TSRJ.PESSOA (COD);

ALTER TABLE TSRJ.AGENDA_ITEM ADD CONSTRAINT PESS$AGEN_ITEM
FOREIGN KEY (REQUERENTE) REFERENCES TSRJ.PESSOA (COD);

ALTER TABLE TSRJ.BANCO ADD CONSTRAINT PESS$BCO
FOREIGN KEY (NOME) REFERENCES TSRJ.PESSOA (COD);

ALTER TABLE TSRJ.MATERIAL_ENTRADA ADD CONSTRAINT PESS$MAT_ENT
FOREIGN KEY (FORNECEDOR) REFERENCES TSRJ.PESSOA (COD);

ALTER TABLE TSRJ.MATERIAL_SAÍDA ADD CONSTRAINT PESS$MAT_SAIDA
FOREIGN KEY (REQUERENTE) REFERENCES TSRJ.PESSOA (COD);

ALTER TABLE TSRJ.TRANSAÇÃO ADD CONSTRAINT PESS$TRAN
FOREIGN KEY (BENEFICIÁRIO) REFERENCES TSRJ.PESSOA (COD);

ALTER TABLE TSRJ.TRANSAÇÃO_ITEM ADD CONSTRAINT PESS$TRAN_IT
FOREIGN KEY (REQUERENTE) REFERENCES TSRJ.PESSOA (COD);

ALTER TABLE TSRJ.TRANSAÇÃO_ITEM ADD CONSTRAINT PESS$TRAN_IT
FOREIGN KEY (NF_EMISSOR) REFERENCES TSRJ.PESSOA (COD);

ALTER TABLE TSRJ.AGENDA_ITEM ADD CONSTRAINT PLAN_CONT$AGEN_ITEM
FOREIGN KEY (PLANO_CONTAS_EMPRESA) REFERENCES TSRJ.PLANO_CONTAS (EMPRESA);

ALTER TABLE TSRJ.AGENDA_ITEM ADD CONSTRAINT PLAN_CONT$AGEN_ITEM
FOREIGN KEY (PLANO_CONTAS) REFERENCES TSRJ.PLANO_CONTAS (CONTA);

ALTER TABLE TSRJ.BANCO_CONTA ADD CONSTRAINT PLAN_CONT$BCO_CTA
FOREIGN KEY (EMPRESA) REFERENCES TSRJ.PLANO_CONTAS (EMPRESA) ON DELETE CASCADE;

ALTER TABLE TSRJ.BANCO_CONTA ADD CONSTRAINT PLAN_CONT$BCO_CTA
FOREIGN KEY (PLANO_CONTA) REFERENCES TSRJ.PLANO_CONTAS (CONTA) ON DELETE CASCADE;

ALTER TABLE TSRJ.TRANSAÇÃO_ITEM ADD CONSTRAINT PLAN_CONT$TRAN_IT
FOREIGN KEY (PLANO_CONTAS_EMPRESA) REFERENCES TSRJ.PLANO_CONTAS (EMPRESA);

ALTER TABLE TSRJ.TRANSAÇÃO_ITEM ADD CONSTRAINT PLAN_CONT$TRAN_IT
FOREIGN KEY (PLANO_CONTAS) REFERENCES TSRJ.PLANO_CONTAS (CONTA);

ALTER TABLE TSRJ.AGENDA_ITEM ADD CONSTRAINT TIP_DESP$AGEN_ITEM
FOREIGN KEY (TIPO_DESPESA_EMPRESA) REFERENCES TSRJ.TIPO_DESPESA (EMPRESA);

ALTER TABLE TSRJ.AGENDA_ITEM ADD CONSTRAINT TIP_DESP$AGEN_ITEM
FOREIGN KEY (TIPO_DESPESA) REFERENCES TSRJ.TIPO_DESPESA (COD);

ALTER TABLE TSRJ.TRANSAÇÃO_ITEM ADD CONSTRAINT TIP_DESP$TRAN_IT
FOREIGN KEY (TIPO_DESPESA_EMPRESA) REFERENCES TSRJ.TIPO_DESPESA (EMPRESA);

ALTER TABLE TSRJ.TRANSAÇÃO_ITEM ADD CONSTRAINT TIP_DESP$TRAN_IT
FOREIGN KEY (TIPO_DESPESA) REFERENCES TSRJ.TIPO_DESPESA (COD);

ALTER TABLE TSRJ.AGENDA_ITEM ADD CONSTRAINT TIP_DOC$AGEN_ITEM
FOREIGN KEY (TIPO_DOC) REFERENCES TSRJ.TIPO_DOC (COD);

ALTER TABLE TSRJ.TRANSAÇÃO_ITEM ADD CONSTRAINT TIP_DOC$TRAN_IT
FOREIGN KEY (TIPO_DOC) REFERENCES TSRJ.TIPO_DOC (COD);

ALTER TABLE TSRJ.CHEQUE ADD CONSTRAINT TRAN$CHQ
FOREIGN KEY (EMPRESA) REFERENCES TSRJ.TRANSAÇÃO (EMPRESA) ON DELETE CASCADE;

ALTER TABLE TSRJ.CHEQUE ADD CONSTRAINT TRAN$CHQ
FOREIGN KEY (TRANSAÇÃO) REFERENCES TSRJ.TRANSAÇÃO (SEQ) ON DELETE CASCADE;

ALTER TABLE TSRJ.TRANSAÇÃO_ITEM ADD CONSTRAINT TRAN$TRAN_IT
FOREIGN KEY (EMPRESA) REFERENCES TSRJ.TRANSAÇÃO (EMPRESA) ON DELETE CASCADE;

ALTER TABLE TSRJ.TRANSAÇÃO_ITEM ADD CONSTRAINT TRAN$TRAN_IT
FOREIGN KEY (TRANSAÇÃO) REFERENCES TSRJ.TRANSAÇÃO (SEQ) ON DELETE CASCADE;

CREATE OR REPLACE TRIGGER BEF_AGEN BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.AGENDA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'AGENDA' AND CHAVE = :OLD.EMPRESA || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('AGENDA', :OLD.EMPRESA || :OLD.SEQ, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'AGENDA' AND CHAVE = :OLD.EMPRESA || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_AGEN_ITEM BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.AGENDA_ITEM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'AGENDA_ITEM' AND CHAVE = :OLD.EMPRESA || :OLD.AGENDA || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('AGENDA_ITEM', :OLD.EMPRESA || :OLD.AGENDA || :OLD.SEQ, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'AGENDA_ITEM' AND CHAVE = :OLD.EMPRESA || :OLD.AGENDA || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_BCO BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.BANCO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'BANCO' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('BANCO', :OLD.COD, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'BANCO' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_BCO_CHQ BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.BANCO_CHEQUE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'BANCO_CHEQUE' AND CHAVE = :OLD.BANCO || :OLD.CONTA_CORRENTE || :OLD.TIPO;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('BANCO_CHEQUE', :OLD.BANCO || :OLD.CONTA_CORRENTE || :OLD.TIPO, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'BANCO_CHEQUE' AND CHAVE = :OLD.BANCO || :OLD.CONTA_CORRENTE || :OLD.TIPO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_BCO_CTA BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.BANCO_CONTA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'BANCO_CONTA' AND CHAVE = :OLD.BANCO || :OLD.CONTA_CORRENTE || :OLD.TIPO;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('BANCO_CONTA', :OLD.BANCO || :OLD.CONTA_CORRENTE || :OLD.TIPO, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'BANCO_CONTA' AND CHAVE = :OLD.BANCO || :OLD.CONTA_CORRENTE || :OLD.TIPO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CAMB BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.CÂMBIO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CÂMBIO' AND CHAVE = :OLD.DATA;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('CÂMBIO', :OLD.DATA, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'CÂMBIO' AND CHAVE = :OLD.DATA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CEN_CUST BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.CENTRO_CUSTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CENTRO_CUSTO' AND CHAVE = :OLD.EMPRESA || :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('CENTRO_CUSTO', :OLD.EMPRESA || :OLD.COD, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'CENTRO_CUSTO' AND CHAVE = :OLD.EMPRESA || :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CHANC BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.CHANCELA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CHANCELA' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('CHANCELA', :OLD.COD, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'CHANCELA' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CHQ BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.CHEQUE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CHEQUE' AND CHAVE = :OLD.EMPRESA || :OLD.TRANSAÇÃO || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('CHEQUE', :OLD.EMPRESA || :OLD.TRANSAÇÃO || :OLD.SEQ, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'CHEQUE' AND CHAVE = :OLD.EMPRESA || :OLD.TRANSAÇÃO || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CHQ_CANC BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.CHEQUES_CANCELADOS FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CHEQUES_CANCELADOS' AND CHAVE = :OLD.BANCO || :OLD.CONTA || :OLD.TIPO || :OLD.CHEQUE;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('CHEQUES_CANCELADOS', :OLD.BANCO || :OLD.CONTA || :OLD.TIPO || :OLD.CHEQUE, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'CHEQUES_CANCELADOS' AND CHAVE = :OLD.BANCO || :OLD.CONTA || :OLD.TIPO || :OLD.CHEQUE;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CTA_IMP BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.CONTA_IMPOSTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CONTA_IMPOSTO' AND CHAVE = :OLD.EMPRESA || :OLD.CONTA;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('CONTA_IMPOSTO', :OLD.EMPRESA || :OLD.CONTA, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'CONTA_IMPOSTO' AND CHAVE = :OLD.EMPRESA || :OLD.CONTA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_D2_COMP_C_DARF BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.D2_COMPENS_COM_DARF FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'D2_COMPENS_COM_DARF' AND CHAVE = :OLD.EMPRESA || :OLD.DARF_SEQ || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('D2_COMPENS_COM_DARF', :OLD.EMPRESA || :OLD.DARF_SEQ || :OLD.SEQ, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'D2_COMPENS_COM_DARF' AND CHAVE = :OLD.EMPRESA || :OLD.DARF_SEQ || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_D2_COMP_S_DARF BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.D2_COMPENS_SEM_DARF FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'D2_COMPENS_SEM_DARF' AND CHAVE = :OLD.EMPRESA || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('D2_COMPENS_SEM_DARF', :OLD.EMPRESA || :OLD.SEQ, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'D2_COMPENS_SEM_DARF' AND CHAVE = :OLD.EMPRESA || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_D2_DARF BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.D2_DARF FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'D2_DARF' AND CHAVE = :OLD.EMPRESA || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('D2_DARF', :OLD.EMPRESA || :OLD.SEQ, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'D2_DARF' AND CHAVE = :OLD.EMPRESA || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_D2_PARC BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.D2_PARCELAMENTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'D2_PARCELAMENTO' AND CHAVE = :OLD.EMPRESA || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('D2_PARCELAMENTO', :OLD.EMPRESA || :OLD.SEQ, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'D2_PARCELAMENTO' AND CHAVE = :OLD.EMPRESA || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_D2_SUSP BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.D2_SUSPENSÃO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'D2_SUSPENSÃO' AND CHAVE = :OLD.EMPRESA || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('D2_SUSPENSÃO', :OLD.EMPRESA || :OLD.SEQ, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'D2_SUSPENSÃO' AND CHAVE = :OLD.EMPRESA || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DCTF_CTAS BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.DCTF_CONTAS FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DCTF_CONTAS' AND CHAVE = :OLD.EMPRESA || :OLD.CONTA;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('DCTF_CONTAS', :OLD.EMPRESA || :OLD.CONTA, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'DCTF_CONTAS' AND CHAVE = :OLD.EMPRESA || :OLD.CONTA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DCTF_EXP BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.DCTF_EXP FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DCTF_EXP' AND CHAVE = :OLD.REGISTRO || :OLD.CAMPO;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('DCTF_EXP', :OLD.REGISTRO || :OLD.CAMPO, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'DCTF_EXP' AND CHAVE = :OLD.REGISTRO || :OLD.CAMPO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DCTR_GR_TRIB BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.DCTF_GRUPO_TRIBUTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DCTF_GRUPO_TRIBUTO' AND CHAVE = :OLD.COD_RECEITA;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('DCTF_GRUPO_TRIBUTO', :OLD.COD_RECEITA, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'DCTF_GRUPO_TRIBUTO' AND CHAVE = :OLD.COD_RECEITA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DCTF_HEAD BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.DCTF_HEADER FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DCTF_HEADER' AND CHAVE = :OLD.EMPRESA;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('DCTF_HEADER', :OLD.EMPRESA, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'DCTF_HEADER' AND CHAVE = :OLD.EMPRESA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DIRF_TIP_1 BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.DIRF_TIPO_01 FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DIRF_TIPO_01' AND CHAVE = :OLD.CNPJ;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('DIRF_TIPO_01', :OLD.CNPJ, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'DIRF_TIPO_01' AND CHAVE = :OLD.CNPJ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DIRF_TIP_1 BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.DIRF_TIPO_02 FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DIRF_TIPO_02' AND CHAVE = :OLD.DECL_CNPJ;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('DIRF_TIPO_02', :OLD.DECL_CNPJ, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'DIRF_TIPO_02' AND CHAVE = :OLD.DECL_CNPJ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMPR BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.EMPRESA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMPRESA' AND CHAVE = :OLD.NOME_EMPRESA;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('EMPRESA', :OLD.NOME_EMPRESA, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'EMPRESA' AND CHAVE = :OLD.NOME_EMPRESA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_GRUP BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.GRUPO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'GRUPO' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('GRUPO', :OLD.COD, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'GRUPO' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_HIST_PADR BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.HISTÓRICO_PADRÃO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'HISTÓRICO_PADRÃO' AND CHAVE = :OLD.EMPRESA || :OLD.COD || :OLD.;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('HISTÓRICO_PADRÃO', :OLD.EMPRESA || :OLD.COD || :OLD., SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'HISTÓRICO_PADRÃO' AND CHAVE = :OLD.EMPRESA || :OLD.COD || :OLD.;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_MAT BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.MATERIAL FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'MATERIAL' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('MATERIAL', :OLD.COD, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'MATERIAL' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_MAT_ENT BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.MATERIAL_ENTRADA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'MATERIAL_ENTRADA' AND CHAVE = :OLD.EMPRESA || :OLD.DATA || :OLD.MATERIAL || :OLD.FORNECEDOR;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('MATERIAL_ENTRADA', :OLD.EMPRESA || :OLD.DATA || :OLD.MATERIAL || :OLD.FORNECEDOR, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'MATERIAL_ENTRADA' AND CHAVE = :OLD.EMPRESA || :OLD.DATA || :OLD.MATERIAL || :OLD.FORNECEDOR;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_MAT_SAIDA BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.MATERIAL_SAÍDA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'MATERIAL_SAÍDA' AND CHAVE = :OLD.EMPRESA || :OLD.DATA || :OLD.MATERIAL || :OLD.REQUERENTE;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('MATERIAL_SAÍDA', :OLD.EMPRESA || :OLD.DATA || :OLD.MATERIAL || :OLD.REQUERENTE, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'MATERIAL_SAÍDA' AND CHAVE = :OLD.EMPRESA || :OLD.DATA || :OLD.MATERIAL || :OLD.REQUERENTE;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PESS BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.PESSOA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PESSOA' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('PESSOA', :OLD.COD, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'PESSOA' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PESS_REF_PADR BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.PESSOA_REF_PADRÃO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PESSOA_REF_PADRÃO' AND CHAVE = :OLD.EMPRESA || :OLD.PESSOA;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('PESSOA_REF_PADRÃO', :OLD.EMPRESA || :OLD.PESSOA, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'PESSOA_REF_PADRÃO' AND CHAVE = :OLD.EMPRESA || :OLD.PESSOA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PLAN_CONT BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.PLANO_CONTAS FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PLANO_CONTAS' AND CHAVE = :OLD.EMPRESA || :OLD.CONTA;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('PLANO_CONTAS', :OLD.EMPRESA || :OLD.CONTA, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'PLANO_CONTAS' AND CHAVE = :OLD.EMPRESA || :OLD.CONTA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_TIP_DESP BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.TIPO_DESPESA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'TIPO_DESPESA' AND CHAVE = :OLD.EMPRESA || :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('TIPO_DESPESA', :OLD.EMPRESA || :OLD.COD, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'TIPO_DESPESA' AND CHAVE = :OLD.EMPRESA || :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_TIP_DOC BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.TIPO_DOC FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'TIPO_DOC' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('TIPO_DOC', :OLD.COD, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'TIPO_DOC' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_TRAN BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.TRANSAÇÃO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'TRANSAÇÃO' AND CHAVE = :OLD.EMPRESA || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('TRANSAÇÃO', :OLD.EMPRESA || :OLD.SEQ, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'TRANSAÇÃO' AND CHAVE = :OLD.EMPRESA || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_TRAN_IT BEFORE UPDATE OR INSERT OR DELETE ON TSRJ.TRANSAÇÃO_ITEM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'TRANSAÇÃO_ITEM' AND CHAVE = :OLD.EMPRESA || :OLD.TRANSAÇÃO || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO TSRJ.SYS_DELETE VALUES ('TRANSAÇÃO_ITEM', :OLD.EMPRESA || :OLD.TRANSAÇÃO || :OLD.SEQ, SYSDATE, USER, 'TSRJ');
      ELSE
         UPDATE TSRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TSRJ' WHERE NOME_TABELA = 'TRANSAÇÃO_ITEM' AND CHAVE = :OLD.EMPRESA || :OLD.TRANSAÇÃO || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TSRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TSRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE USER ADMIN IDENTIFIED BY XXXXXX
DEFAULT TABLESPACE T_TSRJ_DAT
TEMPORARY TABLESPACE TEMP
PROFILE DEFAULT
ACCOUNT UNLOCK;
GRANT CREATE SESSION, EXECUTE ANY LIBRARY, EXECUTE ANY PROCEDURE TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.AGENDA TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.AGENDA_ITEM TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.BANCO TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.BANCO_CHEQUE TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.BANCO_CONTA TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.CÂMBIO TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.CENTRO_CUSTO TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.CHANCELA TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.CHEQUE TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.CHEQUES_CANCELADOS TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.CONTA_IMPOSTO TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.D2_COMPENS_COM_DARF TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.D2_COMPENS_SEM_DARF TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.D2_DARF TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.D2_PARCELAMENTO TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.D2_SUSPENSÃO TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.DCTF_CONTAS TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.DCTF_EXP TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.DCTF_GRUPO_TRIBUTO TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.DCTF_HEADER TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.DIRF_TIPO_01 TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.DIRF_TIPO_02 TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.EMPRESA TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.GRUPO TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.HISTÓRICO_PADRÃO TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.MATERIAL TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.MATERIAL_ENTRADA TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.MATERIAL_SAÍDA TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.PESSOA TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.PESSOA_REF_PADRÃO TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.PLANO_CONTAS TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.SYS_CONFIG_GLOBAL TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.SYS_GRUPO_REL TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.SYS_OCORRÊNCIA TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.SYS_TABELA TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.SYS_USUÁRIO TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.TIPO_DESPESA TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.TIPO_DOC TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.TRANSAÇÃO TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TSRJ.TRANSAÇÃO_ITEM TO ADMIN;
