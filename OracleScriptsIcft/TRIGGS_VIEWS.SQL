-- CRIA ÍNDICE TÉCNICO INI...
DROP INDEX ID_REAL_2;
CREATE INDEX ID_REAL_2 ON REALIZADO (TÉCNICO, INI);



-- NOVA
CREATE OR REPLACE VIEW REALIZADO_COM_DURAÇÃO AS
SELECT REAL.*, DECODE(REAL.TIPO, 'DESCONSIDERAR',0,
(REAL.ATENDIM_FIM-REAL.ATENDIM_INÍCIO)*24*60*60) ATENDIM_DUR
FROM (
SELECT R.TÉCNICO, R.INI,R.SEQ, R.TAREFA, R.TIPO, R.CLIENTE, R.DEPTO, R.USUÁRIO, 
R.OBS, R.PROJETO, R.CHAMADO_DATA,
NVL(PR.GRUPO,R.CLIENTE) GRUPO, HR.LISTA LISTA,
/* CASO ATENDIM_INÍCIO SEJA VAZIO, PEGAR INI COMO PADRÃO */
NVL(R.ATENDIM_INÍCIO, R.INI) ATENDIM_INÍCIO,
/* CASO ATENDIM_FIM SEJA VAZIO, PEGAR INI POSTERIOR */ NVL(NVL(R.ATENDIM_FIM,
DECODE(R.TÉCNICO,
LAST_VALUE(R.TÉCNICO) OVER (ORDER BY R.TÉCNICO, R.INI ROWS BETWEEN 
CURRENT ROW AND 1 FOLLOWING),
LAST_VALUE(R.INI) OVER (ORDER BY R.TÉCNICO, R.INI ROWS BETWEEN 
CURRENT ROW AND 1 FOLLOWING),
/* SE INI POSTERIOR FOR DOUTRO TÉCNICO, CONSIDERA NULL */
NULL)),R.INI) ATENDIM_FIM,
/* PEGA PRÓXIMO INI CASO O TÉCNICO SEJA O MESMO */
DECODE(R.TÉCNICO, LAST_VALUE(R.TÉCNICO) OVER (ORDER BY R.TÉCNICO, 
R.INI ROWS BETWEEN CURRENT ROW
AND 1 FOLLOWING), LAST_VALUE(R.INI) OVER (ORDER BY R.TÉCNICO, 
R.INI ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING),
  NULL) PROX_INI FROM REALIZADO R, PROJETO PR, HIERARQUIA HR WHERE
R.CLIENTE = PR.CLIENTE (+) AND R.PROJETO = PR.PROJETO (+) AND 
R.CLIENTE = HR.CLIENTE (+) AND R.PROJETO = HR.CLASSE (+)
) REAL
/



-- ATUALIZA HIERARQUIA
DELETE FROM HIERARQUIA;

INSERT INTO HIERARQUIA (CLIENTE, CLASSIF, CLASSE, SUPER, LISTA)
SELECT NOME, TO_CHAR(NVL(ORDEM, ROWNUM+5000), 'FM0000'),
NOME, NULL, NOME FROM CLIENTE;

INSERT INTO HIERARQUIA (CLIENTE, CLASSIF, CLASSE, SUPER, LISTA)
SELECT GR.CLIENTE, HR.CLASSIF || TO_CHAR(NVL(GR.ORDEM, ROWNUM+5000)+1000, 'FM0000'),
GR.GRUPO, GR.CLIENTE, HR.LISTA || ';' || GR.GRUPO
FROM HIERARQUIA HR, GRUPO GR WHERE HR.CLIENTE = GR.CLIENTE AND LENGTH(HR.CLASSIF) = 4 AND
GR.SUPERGRUPO IS NULL;

INSERT INTO HIERARQUIA (CLIENTE, CLASSIF, CLASSE, SUPER, LISTA)
SELECT PR.CLIENTE, HR.CLASSIF || TO_CHAR(NVL(PR.ORDEM, ROWNUM+5000)+2000, 'FM0000'),
PR.PROJETO, PR.CLIENTE, HR.LISTA || ';' || PR.PROJETO
FROM HIERARQUIA HR, PROJETO PR WHERE HR.CLIENTE = PR.CLIENTE AND LENGTH(HR.CLASSIF) = 4 AND
PR.GRUPO IS NULL;


DECLARE
	TAM_ANT NUMBER(5,0);
	CABO BOOLEAN;
BEGIN

TAM_ANT := 8;
LOOP

	CABO := TRUE;

	INSERT INTO HIERARQUIA (CLIENTE, CLASSIF, CLASSE, SUPER, LISTA)
	SELECT GR.CLIENTE, HR.CLASSIF || TO_CHAR(NVL(GR.ORDEM, ROWNUM+5000)+1000, 'FM0000'),
	GR.GRUPO, GR.CLIENTE, HR.LISTA || ';' || GR.GRUPO
	FROM HIERARQUIA HR, GRUPO GR WHERE LENGTH(HR.CLASSIF)=TAM_ANT AND HR.CLIENTE = GR.CLIENTE AND
	GR.SUPERGRUPO = HR.CLASSE;
	IF NOT SQL%NOTFOUND THEN
		CABO := FALSE;
	END IF;

	INSERT INTO HIERARQUIA (CLIENTE, CLASSIF, CLASSE, SUPER, LISTA)
	SELECT PR.CLIENTE, HR.CLASSIF || TO_CHAR(NVL(PR.ORDEM, ROWNUM+5000)+2000, 'FM0000'),
	PR.PROJETO, PR.CLIENTE, HR.LISTA || ';' || PR.PROJETO
	FROM HIERARQUIA HR, PROJETO PR WHERE LENGTH(HR.CLASSIF)=TAM_ANT AND HR.CLIENTE = PR.CLIENTE AND
	PR.GRUPO = HR.CLASSE;
	IF NOT SQL%NOTFOUND THEN
		CABO := FALSE;
	END IF;

        IF CABO THEN
		EXIT;
	END IF;
	
	TAM_ANT := TAM_ANT + 4;	
	
END LOOP;

END;
/



-- PACOTE COM FUNÇÕES ELEMENTARES DO APLICATIVO TAREFA

CREATE OR REPLACE PACKAGE DBMS_ICFT IS
 PROCEDURE ALTERA_USUÁRIO(INICIAL VARCHAR2, FINAL VARCHAR2, CLIENTE_DEF VARCHAR2);
END;
/


CREATE OR REPLACE PACKAGE BODY DBMS_ICFT IS

PROCEDURE ALTERA_USUÁRIO(INICIAL VARCHAR2, FINAL VARCHAR2, CLIENTE_DEF VARCHAR2) IS
BEGIN

INSERT INTO USUÁRIO (CLIENTE, USUÁRIO, DEPTO, SITUAÇÃO, NOTIFIC_EMAIL, CANCEL) 
SELECT CLIENTE, FINAL, DEPTO, SITUAÇÃO, NOTIFIC_EMAIL, CANCEL FROM USUÁRIO 
WHERE USUÁRIO = INICIAL AND CLIENTE = CLIENTE_DEF;

UPDATE IDENTIF SET USUÁRIO = FINAL WHERE USUÁRIO = INICIAL AND CLIENTE = CLIENTE_DEF;

UPDATE MÁQUINA SET USUÁRIO = FINAL WHERE USUÁRIO = INICIAL AND CLIENTE = CLIENTE_DEF;

UPDATE REALIZADO SET USUÁRIO = FINAL WHERE USUÁRIO = INICIAL AND CLIENTE = CLIENTE_DEF;

DELETE FROM USUÁRIO WHERE CLIENTE = CLIENTE_DEF AND USUÁRIO = INICIAL;

END;

END;
/

-- CRIAÇÃO DE VISÕES DE SEGURANÇA
CREATE OR REPLACE VIEW ICFT.MOVIMENTO_CHECK AS 
SELECT CONTA,SEQ,DATA,REF,SAÍDA,ENTRADA,CASE WHEN CLASSE IN ('+SÓCIOS','-FÉRIAS','-FOLHA','-SÓCIOS',
'-SÓCIOS 13','+INTERMESA','-EMPRÉSTIMO') THEN 'RESTRITO' ELSE 
HISTÓRICO END HISTÓRICO,CASE WHEN CLASSE IN ('+SÓCIOS','-FÉRIAS','-FOLHA','-SÓCIOS',
'-SÓCIOS 13','+INTERMESA','-EMPRÉSTIMO') THEN 'RESTRITO' ELSE CLASSE 
END CLASSE,CASE WHEN CLASSE IN ('+SÓCIOS','-FÉRIAS','-FOLHA','-SÓCIOS','-SÓCIOS 13',
'+INTERMESA','-EMPRÉSTIMO') THEN 'RESTRITO' ELSE EVENTO END EVENTO,
PENDÊNCIA,OPERADOR,VINC_CONTA,VINC_SEQ,CONTROLE,CASE WHEN CLASSE IN 
('+SÓCIOS','-FÉRIAS','-FOLHA','-SÓCIOS','-SÓCIOS 13','+INTERMESA','-EMPRÉSTIMO') THEN 
'RETRITO' ELSE OBS END OBS,PREV,CASE WHEN CLASSE IN ('+SÓCIOS','-FÉRIAS','-FOLHA','-SÓCIOS',
'-SÓCIOS 13','+INTERMESA','-EMPRÉSTIMO') THEN 'RESTRITO' 
ELSE SÓCIO END SÓCIO,CASE WHEN CLASSE IN ('+SÓCIOS','-FÉRIAS','-FOLHA','-SÓCIOS',
'-SÓCIOS 13','+INTERMESA','-EMPRÉSTIMO') THEN 'RESTRITO' 
ELSE MARCA END MARCA,DOC,BAIXA,SYS_MOMENTO_CRIA,
SYS_USUÁRIO_CRIA,SYS_LOCAL_CRIA,SYS_MOMENTO_ATUALIZA,
SYS_USUÁRIO_ATUALIZA,SYS_LOCAL_ATUALIZA,SYS_STATUS,TRANSAÇÃO FROM ICFT.MOVIMENTO;

CREATE OR REPLACE VIEW ICFT.MOVIMENTO_SEC AS 
SELECT CONTA,SEQ,DATA,REF,SAÍDA,ENTRADA,HISTÓRICO,CLASSE,EVENTO,PENDÊNCIA,
OPERADOR,VINC_CONTA,VINC_SEQ,CONTROLE,OBS,PREV,SÓCIO,MARCA,DOC,BAIXA,
SYS_MOMENTO_CRIA,SYS_USUÁRIO_CRIA,SYS_LOCAL_CRIA,SYS_MOMENTO_ATUALIZA,
SYS_USUÁRIO_ATUALIZA,SYS_LOCAL_ATUALIZA,SYS_STATUS,TRANSAÇÃO FROM ICFT.MOVIMENTO 
WHERE NOT CLASSE IN ('+SÓCIOS','-FÉRIAS','-FOLHA','-SÓCIOS',
'-SÓCIOS 13','+INTERMESA','-EMPRÉSTIMO') WITH CHECK OPTION;

CREATE OR REPLACE VIEW ICFT.CONTRATO_FIN_SEC AS SELECT * FROM ICFT.CONTRATO_FIN
WHERE NOT REF IN ('200227','200228','200229') WITH CHECK OPTION;

CREATE OR REPLACE VIEW ICFT.MOVIMENTO_CTL AS SELECT DOC FROM ICFT.MOVIMENTO GROUP BY DOC;


-- NECESSÁRIO CRIAR USUÁRIOS E DAR GRANTS

-- CRIAÇÃO DE VISÕES CUSTOMIZADAS
CREATE OR REPLACE VIEW EDILENE.MOVIMENTO AS SELECT * FROM ICFT.MOVIMENTO_SEC WITH CHECK OPTION;
CREATE OR REPLACE VIEW MARILZA.MOVIMENTO AS SELECT * FROM ICFT.MOVIMENTO_SEC WITH CHECK OPTION;

CREATE OR REPLACE VIEW EDILENE.CONTRATO_FIN AS SELECT * FROM ICFT.CONTRATO_FIN_SEC WITH CHECK OPTION;
CREATE OR REPLACE VIEW MARILZA.CONTRATO_FIN AS SELECT * FROM ICFT.CONTRATO_FIN_SEC WITH CHECK OPTION;

-- CRIA TRIGGERS DE RESTRIÇÕES
CREATE OR REPLACE TRIGGER BEF_PROJETO_RESTR BEFORE INSERT OR UPDATE ON ICFT.PROJETO FOR EACH ROW
DECLARE
	TOT_REGS INTEGER;
	PED_ADMINS VARCHAR2(100);
BEGIN
	SELECT COUNT(*) INTO TOT_REGS FROM GRUPO WHERE GRUPO = :NEW.PROJETO AND CLIENTE = :NEW.CLIENTE;
	IF TOT_REGS > 0 THEN
		raise_application_error(-20000, 'Tentativa de definição de projeto igual a algum grupo '
			|| :NEW.CLIENTE || '+' || :NEW.PROJETO || ' não autorizada para ' || USER);
	END IF;

	IF :NEW.PROJETO = :NEW.CLIENTE THEN
		raise_application_error(-20000, 'Tentativa de definição de projeto igual ao cliente '
			|| :NEW.PROJETO || ' não autorizada para ' || USER);
	END IF;		

END;
/


CREATE OR REPLACE TRIGGER BEF_TÉCNICO_UPD_CASCATE BEFORE UPDATE ON ICFT.TÉCNICO FOR EACH ROW
BEGIN
	UPDATE REALIZADO SET TÉCNICO = :NEW.TÉCNICO WHERE TÉCNICO = :OLD.TÉCNICO;
	UPDATE ESCALA SET TÉCNICO = :NEW.TÉCNICO WHERE TÉCNICO = :OLD.TÉCNICO;	
END;
/

CREATE OR REPLACE TRIGGER BEF_REALIZADO_RESTR BEFORE INSERT OR UPDATE ON ICFT.REALIZADO FOR EACH ROW
BEGIN
	IF NVL(:NEW.ATENDIM_INÍCIO, TO_DATE('0001-01-01', 'YYYY-MM-DD')) > NVL(:NEW.ATENDIM_FIM, TO_DATE('9999-12-31','YYYY-MM-DD')) THEN
		raise_application_error(-20000, 'Data início maior que a final.');
	END IF;
END;
/


CREATE OR REPLACE TRIGGER BEF_GRUPO_RESTR BEFORE INSERT OR UPDATE ON ICFT.GRUPO FOR EACH ROW
BEGIN
	IF :NEW.GRUPO = :NEW.CLIENTE THEN
		raise_application_error(-20000, 'Tentativa de definição de grupo igual ao cliente '
			|| :NEW.GRUPO || ' não autorizada para ' || USER);
	END IF;
END;
/



-- PROVISÓRIO: RESTRIÇÃO PARA ALTERAÇÃO DE CAMPOS: FAX E TELEFONE.
CREATE OR REPLACE TRIGGER BEF_CONTATO2 BEFORE INSERT OR UPDATE OR DELETE ON ICFT.CONTATO FOR EACH ROW
BEGIN
 IF (NVL(:NEW.TELEFONE,'[][]') <> NVL(:OLD.TELEFONE,'[][]')) OR (NVL(:NEW.FAX,'[][]') <> NVL(:OLD.FAX,'[][]')) THEN
  RAISE_APPLICATION_ERROR(-20000,'Campos   TELEFONE E FAX   indisponíveis no momento. Encaminhar qq manutenção para secretárias. Grato LUCIANO!');
 END IF;
END;
/



-- TRIGGER PARA RESTRINGIR ENTRADA DE MOVIMENTO
CREATE OR REPLACE TRIGGER BEF_MOVIMENTO_RESTR BEFORE INSERT OR UPDATE OR DELETE ON ICFT.MOVIMENTO FOR EACH ROW
DECLARE
	DATA_RESTR VARCHAR2(100);
	DT DATE;
	NREG INTEGER;
BEGIN

	-- TIRAR DE CONTA CONTROLADA
	BEGIN
	SELECT CONFIG INTO DATA_RESTR FROM SYS_CONFIG_GLOBAL WHERE PARAM = 'RESTR_MOV ' || :OLD.CONTA || ' ' || :OLD.CONTROLE;
	EXCEPTION
		WHEN OTHERS THEN
			DATA_RESTR := '';
	END;

	IF NOT SQL%NOTFOUND THEN
		DT := TO_DATE(DATA_RESTR, 'YYYY-MM-DD');
		IF DT >= :OLD.DATA THEN

raise_application_error(-20000, 
'Tentativa de alterar registro de movimento anterior a data de controle definida ' || 
TO_CHAR(DT,'DD/MM/YYYY') || 
'. Encaminhe solicitação a diretoria:' || CHR(13) ||
:OLD.CONTA || ', ' || :OLD.CONTROLE || ', ' || 
TO_CHAR(:OLD.DATA,'YYYY-MM-DD') || ', ' || 
TRIM(TO_CHAR(NVL(:OLD.ENTRADA,0)-NVL(:OLD.SAÍDA,0),'9,999,999,999.00')) || ', ' || 
:OLD.CLASSE || ', ' || :OLD.HISTÓRICO || '. ' || USER || CHR(13));

		END IF;
	END IF;


	-- COLOCAR EM CONTA CONTROLADA
	IF :OLD.CONTA <> :NEW.CONTA OR :OLD.CONTROLE <> :NEW.CONTROLE THEN

		BEGIN
		SELECT CONFIG INTO DATA_RESTR FROM SYS_CONFIG_GLOBAL WHERE PARAM = 'RESTR_MOV ' || :NEW.CONTA || ' ' || :NEW.CONTROLE;
		EXCEPTION
			WHEN OTHERS THEN
				DATA_RESTR := '';
		END;
	
		IF NOT SQL%NOTFOUND THEN
			DT := TO_DATE(DATA_RESTR, 'YYYY-MM-DD');
			IF DT >= :NEW.DATA THEN

raise_application_error(-20000, 
'Tentativa de incluir registro de movimento anterior a data de controle definida ' || 
TO_CHAR(DT,'DD/MM/YYYY') || 
'. Encaminhe solicitação a diretoria:' || CHR(13) ||
:NEW.CONTA || ', ' || :NEW.CONTROLE || ', ' || 
TO_CHAR(:NEW.DATA,'YYYY-MM-DD') || ', ' || 
TRIM(TO_CHAR(NVL(:NEW.ENTRADA,0)-NVL(:NEW.SAÍDA,0),'9,999,999,999.00')) || ', ' || 
:NEW.CLASSE || ', ' || :NEW.HISTÓRICO || '. ' || USER || CHR(13));

			END IF;
		END IF;
	END IF;

	IF NOT DELETING THEN
		-- CONTROLE VAZIO
		IF :NEW.CONTROLE IS NULL THEN
			raise_application_error(-20000,'Necessária definição de controle.');
		END IF;
	
		-- REF VAZIA
		IF :NEW.REF IS NULL THEN
			raise_application_error(-20000,'Necessária definição de referência.');
		END IF;
	
		-- DIA DE REF DIF DE 01
		IF TO_CHAR(:NEW.REF,'DD') <> '01' THEN
			:NEW.REF := TO_DATE(TO_CHAR(:NEW.REF,'YYYY-MM') || '-01', ' YYYY-MM-DD' );
		END IF;


		-- VINC_SEQ SEM VINC_CONTA
		IF NOT :NEW.VINC_SEQ IS NULL AND :NEW.VINC_CONTA IS NULL THEN
			raise_application_error(-20000,'Necessária definição também de conta vinculada.');
		END IF;

		-- VINC_SEQ SEM VINC_CONTA
		IF NOT :NEW.VINC_CONTA IS NULL AND :NEW.VINC_SEQ IS NULL THEN
			raise_application_error(-20000,'Necessária definição também de sequencial vinculado.');
		END IF;


	END IF;
END;
/






-- CRIA VISÃO REALIZADO_COM_DURAÇÃO_STAT
DROP TABLE ICFT.REALIZADO_COM_DURAÇÃO_STAT;
CREATE TABLE ICFT.REALIZADO_COM_DURAÇÃO_STAT AS
  SELECT * FROM REALIZADO_COM_DURAÇÃO WHERE 
  ATENDIM_INÍCIO >= TO_DATE('01/01/2005','DD/MM/YYYY');
GRANT ALL ON ICFT.REALIZADO_COM_DURAÇÃO_STAT TO PUBLIC;
