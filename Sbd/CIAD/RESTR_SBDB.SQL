-------------------------------------------------------------------------------------
-- CRIAÇÃO DE SCRIPT PARA REGERAR RESTRIÇÕES DE CHAVE PRIMÁRIA, RELACIONAMENTOS E TRIGGERS DE SBDB
-------------------------------------------------------------------------------------
DECLARE
        CURSOR RESTR IS SELECT TABLE_NAME, CONSTRAINT_NAME FROM USER_CONSTRAINTS WHERE OWNER = 'SBDB' ORDER BY DECODE(CONSTRAINT_TYPE,'P', 3, 'R', 2, 1);
        SQLCURSOR PLS_INTEGER;
BEGIN
        SQLCURSOR := DBMS_SQL.OPEN_CURSOR;
        FOR CUR IN RESTR LOOP
                BEGIN
                        DBMS_SQL.PARSE(SQLCURSOR, 'ALTER TABLE SBDB.' || CUR.TABLE_NAME || ' DROP CONSTRAINT ' || CUR.CONSTRAINT_NAME, DBMS_SQL.V7);
                EXCEPTION
                        WHEN OTHERS THEN
                                NULL;
                END;
        END LOOP;
        DBMS_SQL.CLOSE_CURSOR(SQLCURSOR);
END;
/

ALTER TABLE SBDB.ACOMPANHAMENTO ADD CONSTRAINT ID_ACOMPANHA
PRIMARY KEY (SEQ, ARTIGO_COD);

ALTER TABLE SBDB.ACOMPANHAMENTO_STATUS ADD CONSTRAINT ID_STATUS
PRIMARY KEY (STATUS);

ALTER TABLE SBDB.ANUIDADE ADD CONSTRAINT ID_ANUIDADE
PRIMARY KEY (REF);

ALTER TABLE SBDB.ANUIDADE_CATEGORIA ADD CONSTRAINT ID_ANUID_CATEG
PRIMARY KEY (ANUIDADE_REF, CATEGORIA_COD);

ALTER TABLE SBDB.ANUIDADE_DESCONTO ADD CONSTRAINT ID_ANUID_DESCONTO
PRIMARY KEY (ANUIDADE_REF, CATEGORIA_COD, SEQ);

ALTER TABLE SBDB.ARQ_PAGAMENTO ADD CONSTRAINT ID_ARQ_PAGAMENTO
PRIMARY KEY (ARQ_SEQ, SEQ);

ALTER TABLE SBDB.ARQ_REMESSA ADD CONSTRAINT ID_ARQ_REM
PRIMARY KEY (SEQ);

ALTER TABLE SBDB.ARQ_RETORNO ADD CONSTRAINT ID_ARQ_RET
PRIMARY KEY (SEQ);

ALTER TABLE SBDB.ARTIGO ADD CONSTRAINT ID_ARTIGO
PRIMARY KEY (CÓDIGO);

ALTER TABLE SBDB.ARTIGO_MATERIAL ADD CONSTRAINT ID_ART_MATERIAL
PRIMARY KEY (ARTIGO_COD, MATERIAL_NOME);

ALTER TABLE SBDB.ARTIGO_RESPONSAVEL ADD CONSTRAINT ID_ART_RESPONSAVEL
PRIMARY KEY (REPONSÁVEL_NOME, ARTIGO_COD, RESPONSAVEL_PRINCIPAL);

ALTER TABLE SBDB.CARGO ADD CONSTRAINT ID_CARGO
PRIMARY KEY (CARGO);

ALTER TABLE SBDB.CATEGORIA ADD CONSTRAINT ID_CATEG
PRIMARY KEY (COD);

ALTER TABLE SBDB.CONVÊNIO ADD CONSTRAINT ID_CONVÊNIO
PRIMARY KEY (COD);

ALTER TABLE SBDB.EMCD_APURAÇÃO ADD CONSTRAINT ID_EMCD_APURAÇÃO
PRIMARY KEY (SÓCIO_MAT, SEQ);

ALTER TABLE SBDB.EMCD_ATIV_NÓ ADD CONSTRAINT ID_ATIV_NÓ
PRIMARY KEY (INFERIOR);

ALTER TABLE SBDB.EMCD_ATIV_PONTO ADD CONSTRAINT ID_EMCD_ATIV_PT
PRIMARY KEY (ATIV_COD, PONTO_COD);

ALTER TABLE SBDB.EMCD_ATIVIDADE ADD CONSTRAINT ID_EMCD_ATIV
PRIMARY KEY (COD);

ALTER TABLE SBDB.EMCD_PONTO_SÓCIO ADD CONSTRAINT ID_EMCD_PT_SÓCIO
PRIMARY KEY (SÓCIO_MAT, ATIV_COD);

ALTER TABLE SBDB.EMCD_TIPO_PONTO ADD CONSTRAINT ID_EMCD_TIPO_PT
PRIMARY KEY (COD);

ALTER TABLE SBDB.LISTA_MALA_DIRETA ADD CONSTRAINT ID_LISTA
PRIMARY KEY (SEQ);

ALTER TABLE SBDB.LISTA_MALA_SÓCIO ADD CONSTRAINT ID_LISTA_SÓCIO
PRIMARY KEY (LISTA_COD, SÓCIO_MAT);

ALTER TABLE SBDB.MATERIAL ADD CONSTRAINT ID_NOME
PRIMARY KEY (NOME);

ALTER TABLE SBDB.NEGOCIAÇÃO ADD CONSTRAINT ID_NEGOCIAÇÃO
PRIMARY KEY (SÓCIO_MAT, SEQ);

ALTER TABLE SBDB.OBRIGAÇÃO ADD CONSTRAINT ID_OBRIG
PRIMARY KEY (SÓCIO_MAT, SEQ);

ALTER TABLE SBDB.OBRIGAÇÃO_STATUS ADD CONSTRAINT ID_OBRIG_STATUS
PRIMARY KEY (COD);

ALTER TABLE SBDB.OBRIGAÇÃO_TIPO ADD CONSTRAINT ID_OBRIG_TIPO
PRIMARY KEY (TIPO);

ALTER TABLE SBDB.ÓRGÃO ADD CONSTRAINT ID_ÓRGÃO
PRIMARY KEY (NOME);

ALTER TABLE SBDB.ÓRGÃO_GESTÃO ADD CONSTRAINT ID_ÓRGÃO_GESTÃO
PRIMARY KEY (ÓRGÃO_NOME, GESTÃO_INI, ÓRGÃO_CARGO);

ALTER TABLE SBDB.ÓRGÃO_MEMBRO ADD CONSTRAINT ID_ÓRGÃO_MEMBRO
PRIMARY KEY (ÓRGÃO_NOME, ÓRGÃO_CARGO, ÓRGÃO_GESTÃO_INI, SÓCIO_MAT);

ALTER TABLE SBDB.ÓRGÃO_TIPO ADD CONSTRAINT ID_ÓRGÃO_TIPO
PRIMARY KEY (TIPO);

ALTER TABLE SBDB.PAGAMENTO ADD CONSTRAINT ID_PAG
PRIMARY KEY (SÓCIO_MAT, OBRIG_SEQ, SEQ);

ALTER TABLE SBDB.PARAMETRO ADD CONSTRAINT ID_PARAM
PRIMARY KEY (PARAM, SBD, OUTRO);

ALTER TABLE SBDB.PARCELAMENTO ADD CONSTRAINT ID_PARCELA
PRIMARY KEY (SÓCIO_MAT, NEG_SEQ, SEQ);

ALTER TABLE SBDB.PROPOSTA ADD CONSTRAINT ID_PROPOSTA
PRIMARY KEY (SEQ);

ALTER TABLE SBDB.REGIÃO ADD CONSTRAINT ID_REGIÃO
PRIMARY KEY (NOME);

ALTER TABLE SBDB.REGIONAL ADD CONSTRAINT ID_REGIONAL
PRIMARY KEY (COD);

ALTER TABLE SBDB.REPASSE ADD CONSTRAINT ID_REPASSE
PRIMARY KEY (REGIONAL_COD, SEQ);

ALTER TABLE SBDB.RESPONSAVEL ADD CONSTRAINT ID_RESPONSAVEL
PRIMARY KEY (NOME);

ALTER TABLE SBDB.SEÇÃO ADD CONSTRAINT ID_SEÇÃO
PRIMARY KEY (NOME);

ALTER TABLE SBDB.SERV_CRED_RENOVAÇÃO ADD CONSTRAINT ID_SERV_CRED_RENOVA
PRIMARY KEY (SERV_CRED_COD, SEQ);

ALTER TABLE SBDB.SERVIÇO_CREDENCIADO ADD CONSTRAINT ID_SERV_CRED
PRIMARY KEY (COD);

ALTER TABLE SBDB.SÓCIO ADD CONSTRAINT ID_SÓCIO
PRIMARY KEY (MAT);

ALTER TABLE SBDB.SÓCIO_CATEGORIA ADD CONSTRAINT ID_SÓC_CATEG
PRIMARY KEY (SÓCIO_MAT, CATEGORIA_COD, SEQ);

ALTER TABLE SBDB.SÓCIO_CONVÊNIO ADD CONSTRAINT ID_SÓCIO_CONV
PRIMARY KEY (CONVÊNIO_COD, SÓCIO_MAT);

ALTER TABLE SBDB.SÓCIO_ISENÇÃO ADD CONSTRAINT ID_SÓCIO_ISENÇÃO
PRIMARY KEY (SÓCIO_MAT, SEQ);

ALTER TABLE SBDB.SÓCIO_SUB_ESPECIALIDADE ADD CONSTRAINT ID_SÓCIO_SUB_ESP
PRIMARY KEY (SUB_ESPECIAL_COD, SÓCIO_MAT);

ALTER TABLE SBDB.SUB_ESPECIALIDADE ADD CONSTRAINT ID_SUB_ESP
PRIMARY KEY (COD);

ALTER TABLE SBDB.SYS_CONFIG_GLOBAL ADD CONSTRAINT ID_SYS_CONFIG_GLOBAL
PRIMARY KEY (PARAM);

ALTER TABLE SBDB.SYS_DELETE ADD CONSTRAINT ID_SYS_DELETE
PRIMARY KEY (NOME_TABELA, CHAVE);

ALTER TABLE SBDB.SYS_GRUPO_REL ADD CONSTRAINT ID_SYS_GRUPO_REL
PRIMARY KEY (SEQ);

ALTER TABLE SBDB.SYS_OCORRÊNCIA ADD CONSTRAINT ID_SYS_OCORRÊNCIA
PRIMARY KEY (SEQ);

ALTER TABLE SBDB.SYS_TABELA ADD CONSTRAINT ID_SYS_TABELA
PRIMARY KEY (NOME);

ALTER TABLE SBDB.SYS_USUÁRIO ADD CONSTRAINT ID_SYS_USUÁRIO
PRIMARY KEY (USUÁRIO);

ALTER TABLE SBDB.TEMA ADD CONSTRAINT ID_TEMA
PRIMARY KEY (NOME);

ALTER TABLE SBDB.TEMA_RESPONSAVEL ADD CONSTRAINT ID_TEMA_RESPONSAVEL
PRIMARY KEY (TEMA_NOME, REPONSÁVEL_NOME);

ALTER TABLE SBDB.TEMP_EXTRATO_ATIV ADD CONSTRAINT ID_TEMP_EXTRATO
PRIMARY KEY (MAT, COD_ATIV);

ALTER TABLE SBDB.UF_REGIÃO ADD CONSTRAINT ID_UF
PRIMARY KEY (UF, NOME_REGIÃO);

ALTER TABLE SBDB.ANUIDADE_DESCONTO ADD CONSTRAINT ANUID_CATEG$ANUID_DESCONTO$01
FOREIGN KEY (ANUIDADE_REF, CATEGORIA_COD) REFERENCES SBDB.ANUIDADE_CATEGORIA (ANUIDADE_REF, CATEGORIA_COD);

ALTER TABLE SBDB.ANUIDADE_CATEGORIA ADD CONSTRAINT ANUIDADE$ANUID_CATEG$01
FOREIGN KEY (ANUIDADE_REF) REFERENCES SBDB.ANUIDADE (REF);

ALTER TABLE SBDB.PAGAMENTO ADD CONSTRAINT ARQ_PAGAMENTO$PAG$01
FOREIGN KEY (ARQ_SEQ, ARQ_PAG) REFERENCES SBDB.ARQ_PAGAMENTO (ARQ_SEQ, SEQ);

ALTER TABLE SBDB.ARQ_PAGAMENTO ADD CONSTRAINT ARQ_RET$ARQ_PAGAMENTO$01
FOREIGN KEY (ARQ_SEQ) REFERENCES SBDB.ARQ_RETORNO (SEQ) ON DELETE CASCADE;

ALTER TABLE SBDB.ARTIGO_MATERIAL ADD CONSTRAINT ARTIGO$MATERIAL$01
FOREIGN KEY (ARTIGO_COD) REFERENCES SBDB.ARTIGO (CÓDIGO);

ALTER TABLE SBDB.ARTIGO_RESPONSAVEL ADD CONSTRAINT ARTIGO$RESP$01
FOREIGN KEY (ARTIGO_COD) REFERENCES SBDB.ARTIGO (CÓDIGO);

ALTER TABLE SBDB.ÓRGÃO_GESTÃO ADD CONSTRAINT CARGO$ÓRGÃO_GESTÃO$01
FOREIGN KEY (ÓRGÃO_CARGO) REFERENCES SBDB.CARGO (CARGO);

ALTER TABLE SBDB.ANUIDADE_CATEGORIA ADD CONSTRAINT CATEG$ANUID_CATEG$02
FOREIGN KEY (CATEGORIA_COD) REFERENCES SBDB.CATEGORIA (COD);

ALTER TABLE SBDB.SÓCIO_CATEGORIA ADD CONSTRAINT CATEG$SÓC_CATEG$01
FOREIGN KEY (CATEGORIA_COD) REFERENCES SBDB.CATEGORIA (COD);

ALTER TABLE SBDB.SÓCIO ADD CONSTRAINT CATEG$SÓCIO$01
FOREIGN KEY (CATEGORIA_COD) REFERENCES SBDB.CATEGORIA (COD);

ALTER TABLE SBDB.SÓCIO_CONVÊNIO ADD CONSTRAINT CONVÊNIO$SÓCIO_CONV$01
FOREIGN KEY (CONVÊNIO_COD) REFERENCES SBDB.CONVÊNIO (COD);

ALTER TABLE SBDB.EMCD_ATIVIDADE ADD CONSTRAINT EMCD_ATIV$EMCD_ATIV$01
FOREIGN KEY (SUPERIOR) REFERENCES SBDB.EMCD_ATIVIDADE (COD);

ALTER TABLE SBDB.EMCD_ATIV_PONTO ADD CONSTRAINT EMCD_ATIV$EMCD_ATIV_PT$01
FOREIGN KEY (ATIV_COD) REFERENCES SBDB.EMCD_ATIVIDADE (COD);

ALTER TABLE SBDB.EMCD_PONTO_SÓCIO ADD CONSTRAINT EMCD_ATIV$EMCD_PT_SÓCIO$01
FOREIGN KEY (ATIV_COD) REFERENCES SBDB.EMCD_ATIVIDADE (COD);

ALTER TABLE SBDB.EMCD_ATIV_PONTO ADD CONSTRAINT EMCD_TIPO_PT$EMCD_ATIV_PT$01
FOREIGN KEY (PONTO_COD) REFERENCES SBDB.EMCD_TIPO_PONTO (COD);

ALTER TABLE SBDB.EMCD_PONTO_SÓCIO ADD CONSTRAINT EMCD_TIPO_PT$EMCD_PT_SÓCIO$01
FOREIGN KEY (PONTO_COD) REFERENCES SBDB.EMCD_TIPO_PONTO (COD);

ALTER TABLE SBDB.LISTA_MALA_SÓCIO ADD CONSTRAINT LISTA$LISTA_SÓCIO$01
FOREIGN KEY (LISTA_COD) REFERENCES SBDB.LISTA_MALA_DIRETA (SEQ);

ALTER TABLE SBDB.PARCELAMENTO ADD CONSTRAINT NEGOCIAÇÃO$PARCELA$01
FOREIGN KEY (SÓCIO_MAT, NEG_SEQ) REFERENCES SBDB.NEGOCIAÇÃO (SÓCIO_MAT, SEQ);

ALTER TABLE SBDB.PAGAMENTO ADD CONSTRAINT OBRIG$PAG$01
FOREIGN KEY (SÓCIO_MAT, OBRIG_SEQ) REFERENCES SBDB.OBRIGAÇÃO (SÓCIO_MAT, SEQ);

ALTER TABLE SBDB.PARCELAMENTO ADD CONSTRAINT OBRIG$PARCELA$01
FOREIGN KEY (SÓCIO_MAT, OBRIG_ANTERIOR) REFERENCES SBDB.OBRIGAÇÃO (SÓCIO_MAT, SEQ) ON DELETE CASCADE;;

ALTER TABLE SBDB.PARCELAMENTO ADD CONSTRAINT OBRIG$PARCELA$02
FOREIGN KEY (SÓCIO_MAT, OBRIG_NOVA) REFERENCES SBDB.OBRIGAÇÃO (SÓCIO_MAT, SEQ);

ALTER TABLE SBDB.OBRIGAÇÃO ADD CONSTRAINT OBRIG_STATUS$OBRIG$01
FOREIGN KEY (OBRIG_STATUS_COD) REFERENCES SBDB.OBRIGAÇÃO_STATUS (COD);

ALTER TABLE SBDB.SÓCIO ADD CONSTRAINT OBRIG_STATUS$SÓCIO$01
FOREIGN KEY (OBRIG_STATUS_COD) REFERENCES SBDB.OBRIGAÇÃO_STATUS (COD);

ALTER TABLE SBDB.OBRIGAÇÃO ADD CONSTRAINT OBRIG_TIPO$OBRIG$02
FOREIGN KEY (OBRIG_TIPO) REFERENCES SBDB.OBRIGAÇÃO_TIPO (TIPO);

ALTER TABLE SBDB.ÓRGÃO_GESTÃO ADD CONSTRAINT ÓRGÃO$ÓRGÃO_GESTÃO$01
FOREIGN KEY (ÓRGÃO_NOME) REFERENCES SBDB.ÓRGÃO (NOME);

ALTER TABLE SBDB.ÓRGÃO_MEMBRO ADD CONSTRAINT ÓRGÃO_GESTÃO$ÓRGÃO_MEMBRO$01
FOREIGN KEY (ÓRGÃO_NOME, ÓRGÃO_GESTÃO_INI, ÓRGÃO_CARGO) REFERENCES SBDB.ÓRGÃO_GESTÃO (ÓRGÃO_NOME, GESTÃO_INI, ÓRGÃO_CARGO);

ALTER TABLE SBDB.ÓRGÃO ADD CONSTRAINT ÓRGÃO_TIPO$ÓRGÃO$01
FOREIGN KEY (ÓRGÃO_TIPO) REFERENCES SBDB.ÓRGÃO_TIPO (TIPO);

ALTER TABLE SBDB.UF_REGIÃO ADD CONSTRAINT REGIÃO$UF$01
FOREIGN KEY (NOME_REGIÃO) REFERENCES SBDB.REGIÃO (NOME);

ALTER TABLE SBDB.EMCD_ATIVIDADE ADD CONSTRAINT REGIONAL$EMCD_ATIV$01
FOREIGN KEY (REGIONAL_COD) REFERENCES SBDB.REGIONAL (COD);

ALTER TABLE SBDB.ÓRGÃO ADD CONSTRAINT REGIONAL$ÓRGÃO$02
FOREIGN KEY (REGIONAL_COD) REFERENCES SBDB.REGIONAL (COD);

ALTER TABLE SBDB.PROPOSTA ADD CONSTRAINT REGIONAL$PROPOSTA$01
FOREIGN KEY (REGIONAL_COD) REFERENCES SBDB.REGIONAL (COD);

ALTER TABLE SBDB.REPASSE ADD CONSTRAINT REGIONAL$REPASSE$01
FOREIGN KEY (REGIONAL_COD) REFERENCES SBDB.REGIONAL (COD);

ALTER TABLE SBDB.SÓCIO ADD CONSTRAINT REGIONAL$SÓCIO$01
FOREIGN KEY (REGIONAL_COD) REFERENCES SBDB.REGIONAL (COD);

ALTER TABLE SBDB.SERV_CRED_RENOVAÇÃO ADD CONSTRAINT SERV_CRED$SERV_CRED_RENOVA$01
FOREIGN KEY (SERV_CRED_COD) REFERENCES SBDB.SERVIÇO_CREDENCIADO (COD);

ALTER TABLE SBDB.EMCD_APURAÇÃO ADD CONSTRAINT SÓCIO$EMCD_APURAÇÃO$01
FOREIGN KEY (SÓCIO_MAT) REFERENCES SBDB.SÓCIO (MAT);

ALTER TABLE SBDB.EMCD_PONTO_SÓCIO ADD CONSTRAINT SÓCIO$EMCD_PT_SÓCIO$01
FOREIGN KEY (SÓCIO_MAT) REFERENCES SBDB.SÓCIO (MAT);

ALTER TABLE SBDB.LISTA_MALA_SÓCIO ADD CONSTRAINT SÓCIO$LISTA_SÓCIO$01
FOREIGN KEY (SÓCIO_MAT) REFERENCES SBDB.SÓCIO (MAT);

ALTER TABLE SBDB.NEGOCIAÇÃO ADD CONSTRAINT SÓCIO$NEGOCIAÇÃO$01
FOREIGN KEY (SÓCIO_MAT) REFERENCES SBDB.SÓCIO (MAT);

ALTER TABLE SBDB.OBRIGAÇÃO ADD CONSTRAINT SÓCIO$OBRIG$01
FOREIGN KEY (SÓCIO_MAT) REFERENCES SBDB.SÓCIO (MAT);

ALTER TABLE SBDB.ÓRGÃO_MEMBRO ADD CONSTRAINT SÓCIO$ÓRGÃO_MEMBRO$01
FOREIGN KEY (SÓCIO_MAT) REFERENCES SBDB.SÓCIO (MAT);

ALTER TABLE SBDB.PARCELAMENTO ADD CONSTRAINT SÓCIO$PARCELA$01
FOREIGN KEY (SÓCIO_MAT) REFERENCES SBDB.SÓCIO (MAT);

ALTER TABLE SBDB.SERVIÇO_CREDENCIADO ADD CONSTRAINT SÓCIO$SERV_CRED$01
FOREIGN KEY (SÓCIO_MAT) REFERENCES SBDB.SÓCIO (MAT);

ALTER TABLE SBDB.SÓCIO_CATEGORIA ADD CONSTRAINT SÓCIO$SÓC_CATEG$01
FOREIGN KEY (SÓCIO_MAT) REFERENCES SBDB.SÓCIO (MAT);

ALTER TABLE SBDB.SÓCIO_CONVÊNIO ADD CONSTRAINT SÓCIO$SÓCIO_CONV$01
FOREIGN KEY (SÓCIO_MAT) REFERENCES SBDB.SÓCIO (MAT);

ALTER TABLE SBDB.SÓCIO_ISENÇÃO ADD CONSTRAINT SÓCIO$SÓCIO_ISENÇÃO$01
FOREIGN KEY (SÓCIO_MAT) REFERENCES SBDB.SÓCIO (MAT);

ALTER TABLE SBDB.SÓCIO_SUB_ESPECIALIDADE ADD CONSTRAINT SÓCIO$SÓCIO_SUB_ESP$01
FOREIGN KEY (SÓCIO_MAT) REFERENCES SBDB.SÓCIO (MAT);

ALTER TABLE SBDB.SÓCIO_SUB_ESPECIALIDADE ADD CONSTRAINT SUB_ESP$SÓCIO_SUB_ESP$01
FOREIGN KEY (SUB_ESPECIAL_COD) REFERENCES SBDB.SUB_ESPECIALIDADE (COD);

ALTER TABLE SBDB.ARTIGO ADD CONSTRAINT TEMA$ARTIGO$01
FOREIGN KEY (TEMA_NOME) REFERENCES SBDB.TEMA (NOME);

ALTER TABLE SBDB.TEMA_RESPONSAVEL ADD CONSTRAINT TEMA$RESP$01
FOREIGN KEY (TEMA_NOME) REFERENCES SBDB.TEMA (NOME);

CREATE OR REPLACE TRIGGER BEF_ACOMPANHA BEFORE UPDATE OR INSERT OR DELETE ON SBDB.ACOMPANHAMENTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'ACOMPANHAMENTO' AND CHAVE = :OLD.SEQ || :OLD.ARTIGO_COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('ACOMPANHAMENTO', :OLD.SEQ || :OLD.ARTIGO_COD, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'ACOMPANHAMENTO' AND CHAVE = :OLD.SEQ || :OLD.ARTIGO_COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_STATUS BEFORE UPDATE OR INSERT OR DELETE ON SBDB.ACOMPANHAMENTO_STATUS FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'ACOMPANHAMENTO_STATUS' AND CHAVE = :OLD.STATUS;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('ACOMPANHAMENTO_STATUS', :OLD.STATUS, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'ACOMPANHAMENTO_STATUS' AND CHAVE = :OLD.STATUS;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ANUIDADE BEFORE UPDATE OR INSERT OR DELETE ON SBDB.ANUIDADE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'ANUIDADE' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('ANUIDADE', :OLD.REF, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'ANUIDADE' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ANUID_CATEG BEFORE UPDATE OR INSERT OR DELETE ON SBDB.ANUIDADE_CATEGORIA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'ANUIDADE_CATEGORIA' AND CHAVE = :OLD.ANUIDADE_REF || :OLD.CATEGORIA_COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('ANUIDADE_CATEGORIA', :OLD.ANUIDADE_REF || :OLD.CATEGORIA_COD, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'ANUIDADE_CATEGORIA' AND CHAVE = :OLD.ANUIDADE_REF || :OLD.CATEGORIA_COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ANUID_DESCONTO BEFORE UPDATE OR INSERT OR DELETE ON SBDB.ANUIDADE_DESCONTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'ANUIDADE_DESCONTO' AND CHAVE = :OLD.ANUIDADE_REF || :OLD.CATEGORIA_COD || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('ANUIDADE_DESCONTO', :OLD.ANUIDADE_REF || :OLD.CATEGORIA_COD || :OLD.SEQ, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'ANUIDADE_DESCONTO' AND CHAVE = :OLD.ANUIDADE_REF || :OLD.CATEGORIA_COD || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ARQ_PAGAMENTO BEFORE UPDATE OR INSERT OR DELETE ON SBDB.ARQ_PAGAMENTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'ARQ_PAGAMENTO' AND CHAVE = :OLD.ARQ_SEQ || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('ARQ_PAGAMENTO', :OLD.ARQ_SEQ || :OLD.SEQ, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'ARQ_PAGAMENTO' AND CHAVE = :OLD.ARQ_SEQ || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ARQ_REM BEFORE UPDATE OR INSERT OR DELETE ON SBDB.ARQ_REMESSA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'ARQ_REMESSA' AND CHAVE = :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('ARQ_REMESSA', :OLD.SEQ, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'ARQ_REMESSA' AND CHAVE = :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ARQ_RET BEFORE UPDATE OR INSERT OR DELETE ON SBDB.ARQ_RETORNO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'ARQ_RETORNO' AND CHAVE = :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('ARQ_RETORNO', :OLD.SEQ, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'ARQ_RETORNO' AND CHAVE = :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ARTIGO BEFORE UPDATE OR INSERT OR DELETE ON SBDB.ARTIGO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'ARTIGO' AND CHAVE = :OLD.CÓDIGO;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('ARTIGO', :OLD.CÓDIGO, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'ARTIGO' AND CHAVE = :OLD.CÓDIGO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ART_MATERIAL BEFORE UPDATE OR INSERT OR DELETE ON SBDB.ARTIGO_MATERIAL FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'ARTIGO_MATERIAL' AND CHAVE = :OLD.ARTIGO_COD || :OLD.MATERIAL_NOME;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('ARTIGO_MATERIAL', :OLD.ARTIGO_COD || :OLD.MATERIAL_NOME, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'ARTIGO_MATERIAL' AND CHAVE = :OLD.ARTIGO_COD || :OLD.MATERIAL_NOME;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ART_RESPONSAVEL BEFORE UPDATE OR INSERT OR DELETE ON SBDB.ARTIGO_RESPONSAVEL FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'ARTIGO_RESPONSAVEL' AND CHAVE = :OLD.REPONSÁVEL_NOME || :OLD.ARTIGO_COD || :OLD.RESPONSAVEL_PRINCIPAL;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('ARTIGO_RESPONSAVEL', :OLD.REPONSÁVEL_NOME || :OLD.ARTIGO_COD || :OLD.RESPONSAVEL_PRINCIPAL, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'ARTIGO_RESPONSAVEL' AND CHAVE = :OLD.REPONSÁVEL_NOME || :OLD.ARTIGO_COD || :OLD.RESPONSAVEL_PRINCIPAL;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CARGO BEFORE UPDATE OR INSERT OR DELETE ON SBDB.CARGO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CARGO' AND CHAVE = :OLD.CARGO;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('CARGO', :OLD.CARGO, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'CARGO' AND CHAVE = :OLD.CARGO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CATEG BEFORE UPDATE OR INSERT OR DELETE ON SBDB.CATEGORIA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CATEGORIA' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('CATEGORIA', :OLD.COD, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'CATEGORIA' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CONVÊNIO BEFORE UPDATE OR INSERT OR DELETE ON SBDB.CONVÊNIO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CONVÊNIO' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('CONVÊNIO', :OLD.COD, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'CONVÊNIO' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMCD_APURAÇÃO BEFORE UPDATE OR INSERT OR DELETE ON SBDB.EMCD_APURAÇÃO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMCD_APURAÇÃO' AND CHAVE = :OLD.SÓCIO_MAT || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('EMCD_APURAÇÃO', :OLD.SÓCIO_MAT || :OLD.SEQ, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'EMCD_APURAÇÃO' AND CHAVE = :OLD.SÓCIO_MAT || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ATIV_NÓ BEFORE UPDATE OR INSERT OR DELETE ON SBDB.EMCD_ATIV_NÓ FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMCD_ATIV_NÓ' AND CHAVE = :OLD.INFERIOR;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('EMCD_ATIV_NÓ', :OLD.INFERIOR, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'EMCD_ATIV_NÓ' AND CHAVE = :OLD.INFERIOR;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMCD_ATIV_PT BEFORE UPDATE OR INSERT OR DELETE ON SBDB.EMCD_ATIV_PONTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMCD_ATIV_PONTO' AND CHAVE = :OLD.ATIV_COD || :OLD.PONTO_COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('EMCD_ATIV_PONTO', :OLD.ATIV_COD || :OLD.PONTO_COD, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'EMCD_ATIV_PONTO' AND CHAVE = :OLD.ATIV_COD || :OLD.PONTO_COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMCD_ATIV BEFORE UPDATE OR INSERT OR DELETE ON SBDB.EMCD_ATIVIDADE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMCD_ATIVIDADE' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('EMCD_ATIVIDADE', :OLD.COD, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'EMCD_ATIVIDADE' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMCD_PT_SÓCIO BEFORE UPDATE OR INSERT OR DELETE ON SBDB.EMCD_PONTO_SÓCIO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMCD_PONTO_SÓCIO' AND CHAVE = :OLD.SÓCIO_MAT || :OLD.ATIV_COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('EMCD_PONTO_SÓCIO', :OLD.SÓCIO_MAT || :OLD.ATIV_COD, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'EMCD_PONTO_SÓCIO' AND CHAVE = :OLD.SÓCIO_MAT || :OLD.ATIV_COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMCD_TIPO_PT BEFORE UPDATE OR INSERT OR DELETE ON SBDB.EMCD_TIPO_PONTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMCD_TIPO_PONTO' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('EMCD_TIPO_PONTO', :OLD.COD, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'EMCD_TIPO_PONTO' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_LISTA BEFORE UPDATE OR INSERT OR DELETE ON SBDB.LISTA_MALA_DIRETA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'LISTA_MALA_DIRETA' AND CHAVE = :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('LISTA_MALA_DIRETA', :OLD.SEQ, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'LISTA_MALA_DIRETA' AND CHAVE = :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_LISTA_SÓCIO BEFORE UPDATE OR INSERT OR DELETE ON SBDB.LISTA_MALA_SÓCIO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'LISTA_MALA_SÓCIO' AND CHAVE = :OLD.LISTA_COD || :OLD.SÓCIO_MAT;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('LISTA_MALA_SÓCIO', :OLD.LISTA_COD || :OLD.SÓCIO_MAT, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'LISTA_MALA_SÓCIO' AND CHAVE = :OLD.LISTA_COD || :OLD.SÓCIO_MAT;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_NOME BEFORE UPDATE OR INSERT OR DELETE ON SBDB.MATERIAL FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'MATERIAL' AND CHAVE = :OLD.NOME;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('MATERIAL', :OLD.NOME, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'MATERIAL' AND CHAVE = :OLD.NOME;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_NEGOCIAÇÃO BEFORE UPDATE OR INSERT OR DELETE ON SBDB.NEGOCIAÇÃO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'NEGOCIAÇÃO' AND CHAVE = :OLD.SÓCIO_MAT || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('NEGOCIAÇÃO', :OLD.SÓCIO_MAT || :OLD.SEQ, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'NEGOCIAÇÃO' AND CHAVE = :OLD.SÓCIO_MAT || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_OBRIG BEFORE UPDATE OR INSERT OR DELETE ON SBDB.OBRIGAÇÃO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'OBRIGAÇÃO' AND CHAVE = :OLD.SÓCIO_MAT || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('OBRIGAÇÃO', :OLD.SÓCIO_MAT || :OLD.SEQ, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'OBRIGAÇÃO' AND CHAVE = :OLD.SÓCIO_MAT || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_OBRIG_STATUS BEFORE UPDATE OR INSERT OR DELETE ON SBDB.OBRIGAÇÃO_STATUS FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'OBRIGAÇÃO_STATUS' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('OBRIGAÇÃO_STATUS', :OLD.COD, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'OBRIGAÇÃO_STATUS' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_OBRIG_TIPO BEFORE UPDATE OR INSERT OR DELETE ON SBDB.OBRIGAÇÃO_TIPO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'OBRIGAÇÃO_TIPO' AND CHAVE = :OLD.TIPO;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('OBRIGAÇÃO_TIPO', :OLD.TIPO, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'OBRIGAÇÃO_TIPO' AND CHAVE = :OLD.TIPO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ÓRGÃO BEFORE UPDATE OR INSERT OR DELETE ON SBDB.ÓRGÃO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'ÓRGÃO' AND CHAVE = :OLD.NOME;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('ÓRGÃO', :OLD.NOME, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'ÓRGÃO' AND CHAVE = :OLD.NOME;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ÓRGÃO_GESTÃO BEFORE UPDATE OR INSERT OR DELETE ON SBDB.ÓRGÃO_GESTÃO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'ÓRGÃO_GESTÃO' AND CHAVE = :OLD.ÓRGÃO_NOME || :OLD.GESTÃO_INI || :OLD.ÓRGÃO_CARGO;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('ÓRGÃO_GESTÃO', :OLD.ÓRGÃO_NOME || :OLD.GESTÃO_INI || :OLD.ÓRGÃO_CARGO, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'ÓRGÃO_GESTÃO' AND CHAVE = :OLD.ÓRGÃO_NOME || :OLD.GESTÃO_INI || :OLD.ÓRGÃO_CARGO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ÓRGÃO_MEMBRO BEFORE UPDATE OR INSERT OR DELETE ON SBDB.ÓRGÃO_MEMBRO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'ÓRGÃO_MEMBRO' AND CHAVE = :OLD.ÓRGÃO_NOME || :OLD.ÓRGÃO_CARGO || :OLD.ÓRGÃO_GESTÃO_INI || :OLD.SÓCIO_MAT;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('ÓRGÃO_MEMBRO', :OLD.ÓRGÃO_NOME || :OLD.ÓRGÃO_CARGO || :OLD.ÓRGÃO_GESTÃO_INI || :OLD.SÓCIO_MAT, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'ÓRGÃO_MEMBRO' AND CHAVE = :OLD.ÓRGÃO_NOME || :OLD.ÓRGÃO_CARGO || :OLD.ÓRGÃO_GESTÃO_INI || :OLD.SÓCIO_MAT;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ÓRGÃO_TIPO BEFORE UPDATE OR INSERT OR DELETE ON SBDB.ÓRGÃO_TIPO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'ÓRGÃO_TIPO' AND CHAVE = :OLD.TIPO;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('ÓRGÃO_TIPO', :OLD.TIPO, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'ÓRGÃO_TIPO' AND CHAVE = :OLD.TIPO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PAG BEFORE UPDATE OR INSERT OR DELETE ON SBDB.PAGAMENTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PAGAMENTO' AND CHAVE = :OLD.SÓCIO_MAT || :OLD.OBRIG_SEQ || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('PAGAMENTO', :OLD.SÓCIO_MAT || :OLD.OBRIG_SEQ || :OLD.SEQ, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'PAGAMENTO' AND CHAVE = :OLD.SÓCIO_MAT || :OLD.OBRIG_SEQ || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PARAM BEFORE UPDATE OR INSERT OR DELETE ON SBDB.PARAMETRO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PARAMETRO' AND CHAVE = :OLD.PARAM || :OLD.SBD || :OLD.OUTRO;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('PARAMETRO', :OLD.PARAM || :OLD.SBD || :OLD.OUTRO, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'PARAMETRO' AND CHAVE = :OLD.PARAM || :OLD.SBD || :OLD.OUTRO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PARCELA BEFORE UPDATE OR INSERT OR DELETE ON SBDB.PARCELAMENTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PARCELAMENTO' AND CHAVE = :OLD.SÓCIO_MAT || :OLD.NEG_SEQ || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('PARCELAMENTO', :OLD.SÓCIO_MAT || :OLD.NEG_SEQ || :OLD.SEQ, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'PARCELAMENTO' AND CHAVE = :OLD.SÓCIO_MAT || :OLD.NEG_SEQ || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PROPOSTA BEFORE UPDATE OR INSERT OR DELETE ON SBDB.PROPOSTA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PROPOSTA' AND CHAVE = :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('PROPOSTA', :OLD.SEQ, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'PROPOSTA' AND CHAVE = :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_REGIÃO BEFORE UPDATE OR INSERT OR DELETE ON SBDB.REGIÃO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'REGIÃO' AND CHAVE = :OLD.NOME;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('REGIÃO', :OLD.NOME, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'REGIÃO' AND CHAVE = :OLD.NOME;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_REGIONAL BEFORE UPDATE OR INSERT OR DELETE ON SBDB.REGIONAL FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'REGIONAL' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('REGIONAL', :OLD.COD, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'REGIONAL' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_REPASSE BEFORE UPDATE OR INSERT OR DELETE ON SBDB.REPASSE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'REPASSE' AND CHAVE = :OLD.REGIONAL_COD || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('REPASSE', :OLD.REGIONAL_COD || :OLD.SEQ, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'REPASSE' AND CHAVE = :OLD.REGIONAL_COD || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_RESPONSAVEL BEFORE UPDATE OR INSERT OR DELETE ON SBDB.RESPONSAVEL FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'RESPONSAVEL' AND CHAVE = :OLD.NOME;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('RESPONSAVEL', :OLD.NOME, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'RESPONSAVEL' AND CHAVE = :OLD.NOME;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_SEÇÃO BEFORE UPDATE OR INSERT OR DELETE ON SBDB.SEÇÃO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'SEÇÃO' AND CHAVE = :OLD.NOME;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('SEÇÃO', :OLD.NOME, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'SEÇÃO' AND CHAVE = :OLD.NOME;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_SERV_CRED_RENOVA BEFORE UPDATE OR INSERT OR DELETE ON SBDB.SERV_CRED_RENOVAÇÃO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'SERV_CRED_RENOVAÇÃO' AND CHAVE = :OLD.SERV_CRED_COD || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('SERV_CRED_RENOVAÇÃO', :OLD.SERV_CRED_COD || :OLD.SEQ, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'SERV_CRED_RENOVAÇÃO' AND CHAVE = :OLD.SERV_CRED_COD || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_SERV_CRED BEFORE UPDATE OR INSERT OR DELETE ON SBDB.SERVIÇO_CREDENCIADO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'SERVIÇO_CREDENCIADO' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('SERVIÇO_CREDENCIADO', :OLD.COD, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'SERVIÇO_CREDENCIADO' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_SÓCIO BEFORE UPDATE OR INSERT OR DELETE ON SBDB.SÓCIO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'SÓCIO' AND CHAVE = :OLD.MAT;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('SÓCIO', :OLD.MAT, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'SÓCIO' AND CHAVE = :OLD.MAT;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_SÓC_CATEG BEFORE UPDATE OR INSERT OR DELETE ON SBDB.SÓCIO_CATEGORIA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'SÓCIO_CATEGORIA' AND CHAVE = :OLD.SÓCIO_MAT || :OLD.CATEGORIA_COD || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('SÓCIO_CATEGORIA', :OLD.SÓCIO_MAT || :OLD.CATEGORIA_COD || :OLD.SEQ, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'SÓCIO_CATEGORIA' AND CHAVE = :OLD.SÓCIO_MAT || :OLD.CATEGORIA_COD || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_SÓCIO_CONV BEFORE UPDATE OR INSERT OR DELETE ON SBDB.SÓCIO_CONVÊNIO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'SÓCIO_CONVÊNIO' AND CHAVE = :OLD.CONVÊNIO_COD || :OLD.SÓCIO_MAT;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('SÓCIO_CONVÊNIO', :OLD.CONVÊNIO_COD || :OLD.SÓCIO_MAT, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'SÓCIO_CONVÊNIO' AND CHAVE = :OLD.CONVÊNIO_COD || :OLD.SÓCIO_MAT;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_SÓCIO_ISENÇÃO BEFORE UPDATE OR INSERT OR DELETE ON SBDB.SÓCIO_ISENÇÃO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'SÓCIO_ISENÇÃO' AND CHAVE = :OLD.SÓCIO_MAT || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('SÓCIO_ISENÇÃO', :OLD.SÓCIO_MAT || :OLD.SEQ, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'SÓCIO_ISENÇÃO' AND CHAVE = :OLD.SÓCIO_MAT || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_SÓCIO_SUB_ESP BEFORE UPDATE OR INSERT OR DELETE ON SBDB.SÓCIO_SUB_ESPECIALIDADE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'SÓCIO_SUB_ESPECIALIDADE' AND CHAVE = :OLD.SUB_ESPECIAL_COD || :OLD.SÓCIO_MAT;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('SÓCIO_SUB_ESPECIALIDADE', :OLD.SUB_ESPECIAL_COD || :OLD.SÓCIO_MAT, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'SÓCIO_SUB_ESPECIALIDADE' AND CHAVE = :OLD.SUB_ESPECIAL_COD || :OLD.SÓCIO_MAT;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_SUB_ESP BEFORE UPDATE OR INSERT OR DELETE ON SBDB.SUB_ESPECIALIDADE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'SUB_ESPECIALIDADE' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('SUB_ESPECIALIDADE', :OLD.COD, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'SUB_ESPECIALIDADE' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_TEMA BEFORE UPDATE OR INSERT OR DELETE ON SBDB.TEMA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'TEMA' AND CHAVE = :OLD.NOME;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('TEMA', :OLD.NOME, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'TEMA' AND CHAVE = :OLD.NOME;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_TEMA_RESPONSAVEL BEFORE UPDATE OR INSERT OR DELETE ON SBDB.TEMA_RESPONSAVEL FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'TEMA_RESPONSAVEL' AND CHAVE = :OLD.TEMA_NOME || :OLD.REPONSÁVEL_NOME;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('TEMA_RESPONSAVEL', :OLD.TEMA_NOME || :OLD.REPONSÁVEL_NOME, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'TEMA_RESPONSAVEL' AND CHAVE = :OLD.TEMA_NOME || :OLD.REPONSÁVEL_NOME;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_TEMP_EXTRATO BEFORE UPDATE OR INSERT OR DELETE ON SBDB.TEMP_EXTRATO_ATIV FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'TEMP_EXTRATO_ATIV' AND CHAVE = :OLD.MAT || :OLD.COD_ATIV;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('TEMP_EXTRATO_ATIV', :OLD.MAT || :OLD.COD_ATIV, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'TEMP_EXTRATO_ATIV' AND CHAVE = :OLD.MAT || :OLD.COD_ATIV;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_UF BEFORE UPDATE OR INSERT OR DELETE ON SBDB.UF_REGIÃO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'UF_REGIÃO' AND CHAVE = :OLD.UF || :OLD.NOME_REGIÃO;
      IF TOT_DEL = 0 THEN
         INSERT INTO SBDB.SYS_DELETE VALUES ('UF_REGIÃO', :OLD.UF || :OLD.NOME_REGIÃO, SYSDATE, USER, 'SBDB');
      ELSE
         UPDATE SBDB.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'SBDB' WHERE NOME_TABELA = 'UF_REGIÃO' AND CHAVE = :OLD.UF || :OLD.NOME_REGIÃO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'SBDB';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'SBDB';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/


