-------------------------------------------------------------------------------------
-- CRIAÇÃO DE SCRIPT PARA GERAR ESTRUTURA BÁSICA ETIKRJ
-------------------------------------------------------------------------------------
ALTER TABLESPACE T_ETIKRJ_DAT OFFLINE;
DROP TABLESPACE T_ETIKRJ_DAT INCLUDING CONTENTS;

CREATE TABLESPACE T_ETIKRJ_DAT DATAFILE 'D:\ORACLE\ORADATA\ETIKRJ\ETIKRJ.DBF' SIZE 100M REUSE
AUTOEXTEND ON NEXT 50M MAXSIZE UNLIMITED EXTENT MANAGEMENT LOCAL;

CREATE TABLE ETIKRJ.LOTE (
             REF NUMBER (10,0),
             NOME VARCHAR2 (50),
             PROCESSO VARCHAR2 (100),
             CLI1_NOME VARCHAR2 (50),
             CLI1_DESTINO VARCHAR2 (100),
             CLI2_NOME VARCHAR2 (50),
             CLI2_DESTINO VARCHAR2 (100),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_ETIKRJ_DAT;

ALTER TABLE ETIKRJ.LOTE ADD CONSTRAINT ID_LOTE
PRIMARY KEY (REF);

CREATE TABLE ETIKRJ.LOTE_GRUPO (
             LOTE_REF NUMBER (10,0),
             SEQ NUMBER (10,0),
             QUALITY VARCHAR2 (20),
             PRODUCT VARCHAR2 (20),
             THICKNESS NUMBER,
             WIDTH NUMBER,
             LENGTH NUMBER,
             FINISH VARCHAR2 (20),
             COATING VARCHAR2 (20),
             SPECIFICATION VARCHAR2 (100),
             TEMPER VARCHAR2 (20),
             PACKING VARCHAR2 (20),
             QTD_VOL NUMBER (10,0),
             NET NUMBER,
             GROSS NUMBER,
             CLI1_PRIOR NUMBER (3,0),
             CLI2_PRIOR NUMBER (3,0),
             FINAL_PRIOR NUMBER (3,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_ETIKRJ_DAT;

ALTER TABLE ETIKRJ.LOTE_GRUPO ADD CONSTRAINT ID_LOTE_GRUPO
PRIMARY KEY (LOTE_REF, SEQ_LOTE);

CREATE TABLE ETIKRJ.LOTE_ITEM (
             LOTE_REF NUMBER (10,0),
             TAG VARCHAR2 (20),
             QUALITY VARCHAR2 (20),
             PRODUCT VARCHAR2 (20),
             THICKNESS NUMBER,
             WIDTH NUMBER,
             LENGTH NUMBER,
             FINISH VARCHAR2 (20),
             COATING VARCHAR2 (20),
             SPECIFICATION VARCHAR2 (100),
             TEMPER VARCHAR2 (20),
             PACKING VARCHAR2 (20),
             NET NUMBER,
             GROSS NUMBER,
             CLIENTE VARCHAR2 (100),
             BL_CODE VARCHAR2 (20),
             DESTINO VARCHAR2 (50),
             OVITEM VARCHAR2 (20),
             PO VARCHAR2 (20),
             LOTE VARCHAR2 (20),
             PED_REF VARCHAR2 (20),
             PED_ITEM NUMBER (5,0),
             EMB_REF VARCHAR2 (20),
             PORTO_DEST VARCHAR2 (50),
             REMARK VARCHAR2 (3000),
             C NUMBER,
             MN NUMBER,
             P NUMBER,
             S NUMBER,
             SI NUMBER,
             CU NUMBER,
             NI NUMBER,
             CR NUMBER,
             MO NUMBER,
             SN NUMBER,
             AL NUMBER,
             N NUMBER,
             NB NUMBER,
             V NUMBER,
             TI NUMBER,
             O NUMBER,
             B NUMBER,
             C_EQ NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_ETIKRJ_DAT;

ALTER TABLE ETIKRJ.LOTE_ITEM ADD CONSTRAINT ID_LOTE_ITEM
PRIMARY KEY (LOTE_REF, TAG);

CREATE TABLE ETIKRJ.PACKING_LIST (
             SEQ NUMBER (10,0),
             EMPRESA_COD VARCHAR2 (255),
             EMPRESA_NOME VARCHAR2 (255),
             TÍTULO VARCHAR2 (100),
             REFERÊNCIA VARCHAR2 (255),
             DATA VARCHAR2 (50),
             TRANSPORTADOR VARCHAR2 (255),
             COMPRADOR_NOME VARCHAR2 (255),
             COMPRADOR_ENDEREÇO VARCHAR2 (255),
             ORIGEM VARCHAR2 (255),
             DESTINO VARCHAR2 (255),
             NOTAS VARCHAR2 (4000),
             EMPRESA_CONTATO VARCHAR2 (50),
             EMPRESA_ENDEREÇO VARCHAR2 (255),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_ETIKRJ_DAT;

ALTER TABLE ETIKRJ.PACKING_LIST ADD CONSTRAINT ID_PK_LIST
PRIMARY KEY (SEQ);

CREATE TABLE ETIKRJ.PACKING_LIST_FAM (
             DOC_SEQ NUMBER (10,0),
             SEQ NUMBER (10,0),
             FAMÍLIA VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_ETIKRJ_DAT;

ALTER TABLE ETIKRJ.PACKING_LIST_FAM ADD CONSTRAINT ID_PK_LIST_FAM
PRIMARY KEY (DOC_SEQ, SEQ);

CREATE TABLE ETIKRJ.PACKING_LIST_FAM_LOTE (
             DOC_SEQ NUMBER (10,0),
             DOC_FAMÍLIA_SEQ NUMBER (10,0),
             SEQ NUMBER (10,0),
             LOTE NUMBER (10,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_ETIKRJ_DAT;

ALTER TABLE ETIKRJ.PACKING_LIST_FAM_LOTE ADD CONSTRAINT ID_PK_LIST_FAM_LOT
PRIMARY KEY (DOC_SEQ, DOC_FAMÍLIA_SEQ, SEQ);

CREATE TABLE ETIKRJ.PADRONIZAÇÃO (
             REF VARCHAR2 (20),
             COD_FOR VARCHAR2 (100),
             COD_COM VARCHAR2 (100),
             LOTES VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_ETIKRJ_DAT;

ALTER TABLE ETIKRJ.PADRONIZAÇÃO ADD CONSTRAINT ID_PADRÃO
PRIMARY KEY (REF, COD_FOR);

CREATE TABLE ETIKRJ.SYS_CAD_LOG (
             SEQ NUMBER (10,0),
             NOME_TABELA VARCHAR2 (50),
             CHAVE CLOB,
             MOMENTO DATE,
             USUÁRIO VARCHAR2 (20),
             LOCAL VARCHAR2 (20),
             AÇÃO VARCHAR2 (20)
             ) TABLESPACE T_ETIKRJ_DAT;

ALTER TABLE ETIKRJ.SYS_CAD_LOG ADD CONSTRAINT ID_CAD_LOG
PRIMARY KEY (SEQ);

CREATE TABLE ETIKRJ.SYS_CONFIG_GLOBAL (
             PARAM VARCHAR2 (30),
             CONFIG VARCHAR2 (4000)
             ) TABLESPACE T_ETIKRJ_DAT;

ALTER TABLE ETIKRJ.SYS_CONFIG_GLOBAL ADD CONSTRAINT ID_CONFIG_GLOBAL
PRIMARY KEY (PARAM);

CREATE TABLE ETIKRJ.SYS_DELETE (
             NOME_TABELA VARCHAR2 (50),
             CHAVE VARCHAR2 (150),
             MOMENTO DATE,
             USUÁRIO VARCHAR2 (20),
             LOCAL VARCHAR2 (20)
             ) TABLESPACE T_ETIKRJ_DAT;

ALTER TABLE ETIKRJ.SYS_DELETE ADD CONSTRAINT ID_DELETE
PRIMARY KEY (NOME_TABELA, CHAVE);

CREATE TABLE ETIKRJ.SYS_LOCALID (
             NOME VARCHAR2 (15),
             CORRENTE NUMBER (5,0),
             PACOTE NUMBER (5,0),
             PACOTE_REC NUMBER (5,0),
             MOMENTO DATE,
             MOMENTO_REC DATE,
             MODELO NUMBER (5,0),
             OBS VARCHAR2 (255)
             ) TABLESPACE T_ETIKRJ_DAT;

ALTER TABLE ETIKRJ.SYS_LOCALID ADD CONSTRAINT ID_SYS_LOCAL
PRIMARY KEY (NOME);

CREATE TABLE ETIKRJ.SYS_OCORRÊNCIA (
             SEQ NUMBER (10,0),
             APLICAÇÃO VARCHAR2 (30),
             OCORRÊNCIA VARCHAR2 (3000),
             USUÁRIO VARCHAR2 (20),
             MOMENTO DATE,
             LOCAL VARCHAR2 (20)
             ) TABLESPACE T_ETIKRJ_DAT;

ALTER TABLE ETIKRJ.SYS_OCORRÊNCIA ADD CONSTRAINT ID_OCORRÊNCIA
PRIMARY KEY (SEQ);

CREATE TABLE ETIKRJ.SYS_TABELA (
             NOME VARCHAR2 (50),
             CHAVE VARCHAR2 (3000),
             EXPR_PRIMÁRIA VARCHAR2 (3000),
             EXPR_APRESENTA VARCHAR2 (3000),
             CAMPOS VARCHAR2 (3000),
             RELAÇÕES_1_N VARCHAR2 (3000),
             NÍVEL NUMBER (5,0)
             ) TABLESPACE T_ETIKRJ_DAT;

ALTER TABLE ETIKRJ.SYS_TABELA ADD CONSTRAINT ID_SYS_TABELA
PRIMARY KEY (NOME);

CREATE TABLE ETIKRJ.SYS_USUÁRIO (
             USUÁRIO VARCHAR2 (20),
             NOME VARCHAR2 (50),
             SUPERVISOR VARCHAR2 (20),
             DEPTO VARCHAR2 (10),
             MSG VARCHAR2 (3000),
             ASSINATURA BLOB,
             TEMPO_ATUALIZA NUMBER (5,0),
             FUNÇÃO VARCHAR2 (30),
             ASSINATURA_BMP BLOB
             ) TABLESPACE T_ETIKRJ_DAT;

ALTER TABLE ETIKRJ.SYS_USUÁRIO ADD CONSTRAINT ID_SYS_USUÁRIO
PRIMARY KEY (USUÁRIO);

ALTER TABLE ETIKRJ.LOTE_GRUPO ADD CONSTRAINT LOTE$LOTE_GRUPO$01
FOREIGN KEY (LOTE_REF) REFERENCES ETIKRJ.LOTE (REF);

ALTER TABLE ETIKRJ.LOTE_ITEM ADD CONSTRAINT LOTE$LOTE_ITEM$01
FOREIGN KEY (LOTE_REF) REFERENCES ETIKRJ.LOTE (REF);

ALTER TABLE ETIKRJ.PACKING_LIST_FAM ADD CONSTRAINT PK_LIST$PK_LIST_FAM$01
FOREIGN KEY (DOC_SEQ) REFERENCES ETIKRJ.PACKING_LIST (SEQ);

ALTER TABLE ETIKRJ.PACKING_LIST_FAM_LOTE ADD CONSTRAINT PK_LIST_FAM$PK_LIST_FAM_LOT$01
FOREIGN KEY (DOC_SEQ, DOC_FAMÍLIA_SEQ) REFERENCES ETIKRJ.PACKING_LIST_FAM (DOC_SEQ, SEQ);

CREATE OR REPLACE TRIGGER BEF_LOTE BEFORE UPDATE OR INSERT OR DELETE ON ETIKRJ.LOTE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'LOTE' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO ETIKRJ.SYS_DELETE VALUES ('LOTE', :OLD.REF, SYSDATE, USER, 'ETIKRJ');
      ELSE
         UPDATE ETIKRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'ETIKRJ' WHERE NOME_TABELA = 'LOTE' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'ETIKRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'ETIKRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_LOTE_GRUPO BEFORE UPDATE OR INSERT OR DELETE ON ETIKRJ.LOTE_GRUPO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'LOTE_GRUPO' AND CHAVE = :OLD.LOTE_REF || :OLD.SEQ_LOTE;
      IF TOT_DEL = 0 THEN
         INSERT INTO ETIKRJ.SYS_DELETE VALUES ('LOTE_GRUPO', :OLD.LOTE_REF || :OLD.SEQ_LOTE, SYSDATE, USER, 'ETIKRJ');
      ELSE
         UPDATE ETIKRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'ETIKRJ' WHERE NOME_TABELA = 'LOTE_GRUPO' AND CHAVE = :OLD.LOTE_REF || :OLD.SEQ_LOTE;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'ETIKRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'ETIKRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_LOTE_ITEM BEFORE UPDATE OR INSERT OR DELETE ON ETIKRJ.LOTE_ITEM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'LOTE_ITEM' AND CHAVE = :OLD.LOTE_REF || :OLD.TAG;
      IF TOT_DEL = 0 THEN
         INSERT INTO ETIKRJ.SYS_DELETE VALUES ('LOTE_ITEM', :OLD.LOTE_REF || :OLD.TAG, SYSDATE, USER, 'ETIKRJ');
      ELSE
         UPDATE ETIKRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'ETIKRJ' WHERE NOME_TABELA = 'LOTE_ITEM' AND CHAVE = :OLD.LOTE_REF || :OLD.TAG;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'ETIKRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'ETIKRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PK_LIST BEFORE UPDATE OR INSERT OR DELETE ON ETIKRJ.PACKING_LIST FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PACKING_LIST' AND CHAVE = :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO ETIKRJ.SYS_DELETE VALUES ('PACKING_LIST', :OLD.SEQ, SYSDATE, USER, 'ETIKRJ');
      ELSE
         UPDATE ETIKRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'ETIKRJ' WHERE NOME_TABELA = 'PACKING_LIST' AND CHAVE = :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'ETIKRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'ETIKRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PK_LIST_FAM BEFORE UPDATE OR INSERT OR DELETE ON ETIKRJ.PACKING_LIST_FAM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PACKING_LIST_FAM' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO ETIKRJ.SYS_DELETE VALUES ('PACKING_LIST_FAM', :OLD.DOC_SEQ || :OLD.SEQ, SYSDATE, USER, 'ETIKRJ');
      ELSE
         UPDATE ETIKRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'ETIKRJ' WHERE NOME_TABELA = 'PACKING_LIST_FAM' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'ETIKRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'ETIKRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PK_LIST_FAM_LOT BEFORE UPDATE OR INSERT OR DELETE ON ETIKRJ.PACKING_LIST_FAM_LOTE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PACKING_LIST_FAM_LOTE' AND CHAVE = :OLD.DOC_SEQ || :OLD.DOC_FAMÍLIA_SEQ || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO ETIKRJ.SYS_DELETE VALUES ('PACKING_LIST_FAM_LOTE', :OLD.DOC_SEQ || :OLD.DOC_FAMÍLIA_SEQ || :OLD.SEQ, SYSDATE, USER, 'ETIKRJ');
      ELSE
         UPDATE ETIKRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'ETIKRJ' WHERE NOME_TABELA = 'PACKING_LIST_FAM_LOTE' AND CHAVE = :OLD.DOC_SEQ || :OLD.DOC_FAMÍLIA_SEQ || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'ETIKRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'ETIKRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PADRÃO BEFORE UPDATE OR INSERT OR DELETE ON ETIKRJ.PADRONIZAÇÃO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PADRONIZAÇÃO' AND CHAVE = :OLD.REF || :OLD.COD_FOR;
      IF TOT_DEL = 0 THEN
         INSERT INTO ETIKRJ.SYS_DELETE VALUES ('PADRONIZAÇÃO', :OLD.REF || :OLD.COD_FOR, SYSDATE, USER, 'ETIKRJ');
      ELSE
         UPDATE ETIKRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'ETIKRJ' WHERE NOME_TABELA = 'PADRONIZAÇÃO' AND CHAVE = :OLD.REF || :OLD.COD_FOR;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'ETIKRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'ETIKRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE TABLE ETIKRJ.LOTE_T (
             REF NUMBER (10,0),
             NOME VARCHAR2 (50),
             PROCESSO VARCHAR2 (100),
             CLI1_NOME VARCHAR2 (50),
             CLI1_DESTINO VARCHAR2 (100),
             CLI2_NOME VARCHAR2 (50),
             CLI2_DESTINO VARCHAR2 (100),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE TRANSF NOLOGGING;

CREATE TABLE ETIKRJ.LOTE_GRUPO_T (
             LOTE_REF NUMBER (10,0),
             SEQ NUMBER (10,0),
             QUALITY VARCHAR2 (20),
             PRODUCT VARCHAR2 (20),
             THICKNESS NUMBER,
             WIDTH NUMBER,
             LENGTH NUMBER,
             FINISH VARCHAR2 (20),
             COATING VARCHAR2 (20),
             SPECIFICATION VARCHAR2 (100),
             TEMPER VARCHAR2 (20),
             PACKING VARCHAR2 (20),
             QTD_VOL NUMBER (10,0),
             NET NUMBER,
             GROSS NUMBER,
             CLI1_PRIOR NUMBER (3,0),
             CLI2_PRIOR NUMBER (3,0),
             FINAL_PRIOR NUMBER (3,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE TRANSF NOLOGGING;

CREATE TABLE ETIKRJ.LOTE_ITEM_T (
             LOTE_REF NUMBER (10,0),
             TAG VARCHAR2 (20),
             QUALITY VARCHAR2 (20),
             PRODUCT VARCHAR2 (20),
             THICKNESS NUMBER,
             WIDTH NUMBER,
             LENGTH NUMBER,
             FINISH VARCHAR2 (20),
             COATING VARCHAR2 (20),
             SPECIFICATION VARCHAR2 (100),
             TEMPER VARCHAR2 (20),
             PACKING VARCHAR2 (20),
             NET NUMBER,
             GROSS NUMBER,
             CLIENTE VARCHAR2 (100),
             BL_CODE VARCHAR2 (20),
             DESTINO VARCHAR2 (50),
             OVITEM VARCHAR2 (20),
             PO VARCHAR2 (20),
             LOTE VARCHAR2 (20),
             PED_REF VARCHAR2 (20),
             PED_ITEM NUMBER (5,0),
             EMB_REF VARCHAR2 (20),
             PORTO_DEST VARCHAR2 (50),
             REMARK VARCHAR2 (3000),
             C NUMBER,
             MN NUMBER,
             P NUMBER,
             S NUMBER,
             SI NUMBER,
             CU NUMBER,
             NI NUMBER,
             CR NUMBER,
             MO NUMBER,
             SN NUMBER,
             AL NUMBER,
             N NUMBER,
             NB NUMBER,
             V NUMBER,
             TI NUMBER,
             O NUMBER,
             B NUMBER,
             C_EQ NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE TRANSF NOLOGGING;

CREATE TABLE ETIKRJ.PACKING_LIST_T (
             SEQ NUMBER (10,0),
             EMPRESA_COD VARCHAR2 (255),
             EMPRESA_NOME VARCHAR2 (255),
             TÍTULO VARCHAR2 (100),
             REFERÊNCIA VARCHAR2 (255),
             DATA VARCHAR2 (50),
             TRANSPORTADOR VARCHAR2 (255),
             COMPRADOR_NOME VARCHAR2 (255),
             COMPRADOR_ENDEREÇO VARCHAR2 (255),
             ORIGEM VARCHAR2 (255),
             DESTINO VARCHAR2 (255),
             NOTAS VARCHAR2 (4000),
             EMPRESA_CONTATO VARCHAR2 (50),
             EMPRESA_ENDEREÇO VARCHAR2 (255),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE TRANSF NOLOGGING;

CREATE TABLE ETIKRJ.PACKING_LIST_FAM_T (
             DOC_SEQ NUMBER (10,0),
             SEQ NUMBER (10,0),
             FAMÍLIA VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE TRANSF NOLOGGING;

CREATE TABLE ETIKRJ.PACKING_LIST_FAM_LOTE_T (
             DOC_SEQ NUMBER (10,0),
             DOC_FAMÍLIA_SEQ NUMBER (10,0),
             SEQ NUMBER (10,0),
             LOTE NUMBER (10,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE TRANSF NOLOGGING;

CREATE TABLE ETIKRJ.PADRONIZAÇÃO_T (
             REF VARCHAR2 (20),
             COD_FOR VARCHAR2 (100),
             COD_COM VARCHAR2 (100),
             LOTES VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE TRANSF NOLOGGING;

CREATE TABLE ETIKRJ.SYS_DELETE_T (
             NOME_TABELA VARCHAR2 (50),
             CHAVE VARCHAR2 (150),
             MOMENTO DATE,
             USUÁRIO VARCHAR2 (20),
             LOCAL VARCHAR2 (20)
             ) TABLESPACE TRANSF NOLOGGING;


