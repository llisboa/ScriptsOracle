-------------------------------------------------------------------------------------
-- CRIAÇÃO DE SCRIPT PARA GERAR ESTRUTURA BÁSICA TKRJ
-------------------------------------------------------------------------------------
ALTER TABLESPACE T_TKRJ_DAT OFFLINE;
DROP TABLESPACE T_TKRJ_DAT INCLUDING CONTENTS;

CREATE TABLESPACE T_TKRJ_DAT DATAFILE 'D:\ORACLE\ORADATA\TKRJ\TKRJ.DBF' SIZE 100M REUSE
AUTOEXTEND ON NEXT 50M MAXSIZE UNLIMITED EXTENT MANAGEMENT LOCAL;

CREATE TABLE TKRJ.LOTE (
             REF NUMBER,
             NOME VARCHAR2 (50),
             PROCESSO VARCHAR2 (100),
             CLI1_NOME VARCHAR2 (50),
             CLI1_DESTINO VARCHAR2 (100),
             CLI2_NOME VARCHAR2 (50),
             CLI2_DESTINO VARCHAR2 (100),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TKRJ_DAT;

ALTER TABLE TKRJ.LOTE ADD CONSTRAINT ID_LOTE
PRIMARY KEY (REF);

CREATE TABLE TKRJ.LOTE_GRUPO (
             LOTE_REF NUMBER,
             SEQ NUMBER,
             QUALITY VARCHAR2 (20),
             PRODUCT VARCHAR2 (20),
             THICKNESS NUMBER,
             WIDTH NUMBER,
             LENGTH NUMBER,
             FINISH VARCHAR2 (20),
             COATING VARCHAR2 (20),
             TEMPER VARCHAR2 (20),
             VOLUME NUMBER (10,0),
             NET NUMBER,
             GROSS NUMBER,
             CLI1_PRIOR NUMBER (3,0),
             CLI2_PRIOR NUMBER (3,0),
             DIFER_PRIOR NUMBER (3,0),
             PORTO_CLI1 NUMBER,
             PORTO_CLI2 NUMBER,
             FINAL_PORTO1 NUMBER,
             FINAL_PORTO2 NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TKRJ_DAT;

ALTER TABLE TKRJ.LOTE_GRUPO ADD CONSTRAINT ID_LOTE_GRUPO
PRIMARY KEY (LOTE_REF, SEQ);

CREATE TABLE TKRJ.LOTE_ITEM (
             LOTE_REF NUMBER,
             SEQ NUMBER,
             VOLUME VARCHAR2 (50),
             TAG VARCHAR2 (20),
             QUALITY VARCHAR2 (20),
             PRODUCT VARCHAR2 (20),
             THICKNESS NUMBER,
             WIDTH NUMBER,
             LENGTH NUMBER,
             FINISH VARCHAR2 (20),
             COATING VARCHAR2 (20),
             SPECIFICATION VARCHAR2 (100),
             TEMPER VARCHAR2 (20),
             PACKING VARCHAR2 (20),
             NET NUMBER,
             GROSS NUMBER,
             CLIENTE VARCHAR2 (100),
             BL_CODE VARCHAR2 (20),
             DESTINO VARCHAR2 (50),
             OVITEM VARCHAR2 (20),
             PO VARCHAR2 (20),
             LOTE VARCHAR2 (20),
             PED_REF VARCHAR2 (20),
             PED_ITEM NUMBER (5,0),
             EMB_REF VARCHAR2 (20),
             PORTO_DEST VARCHAR2 (50),
             REMARK VARCHAR2 (3000),
             C NUMBER,
             MN NUMBER,
             P NUMBER,
             S NUMBER,
             SI NUMBER,
             CU NUMBER,
             NI NUMBER,
             CR NUMBER,
             MO NUMBER,
             SN NUMBER,
             AL NUMBER,
             N NUMBER,
             NB NUMBER,
             V NUMBER,
             TI NUMBER,
             O NUMBER,
             B NUMBER,
             C_EQ NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TKRJ_DAT;

ALTER TABLE TKRJ.LOTE_ITEM ADD CONSTRAINT ID_LOTE_ITEM
PRIMARY KEY (LOTE_REF, SEQ);

CREATE TABLE TKRJ.PACKING_LIST (
             SEQ NUMBER,
             EMPRESA_COD VARCHAR2 (255),
             EMPRESA_NOME VARCHAR2 (255),
             TÍTULO VARCHAR2 (100),
             REFERÊNCIA VARCHAR2 (255),
             DATA VARCHAR2 (50),
             TRANSPORTADOR VARCHAR2 (255),
             COMPRADOR_NOME VARCHAR2 (255),
             COMPRADOR_ENDEREÇO VARCHAR2 (255),
             ORIGEM VARCHAR2 (255),
             DESTINO VARCHAR2 (255),
             NOTAS VARCHAR2 (4000),
             EMPRESA_CONTATO VARCHAR2 (50),
             EMPRESA_ENDEREÇO VARCHAR2 (255),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TKRJ_DAT;

ALTER TABLE TKRJ.PACKING_LIST ADD CONSTRAINT ID_PK_LIST
PRIMARY KEY (SEQ);

CREATE TABLE TKRJ.PACKING_LIST_FAM (
             DOC_SEQ NUMBER,
             SEQ NUMBER,
             FAMÍLIA VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TKRJ_DAT;

ALTER TABLE TKRJ.PACKING_LIST_FAM ADD CONSTRAINT ID_PK_LIST_FAM
PRIMARY KEY (DOC_SEQ, SEQ);

CREATE TABLE TKRJ.PACKING_LIST_FAM_LOTE (
             DOC_SEQ NUMBER,
             DOC_FAMÍLIA_SEQ NUMBER,
             SEQ NUMBER,
             LOTE NUMBER,
             BL_CODE VARCHAR2 (20),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TKRJ_DAT;

ALTER TABLE TKRJ.PACKING_LIST_FAM_LOTE ADD CONSTRAINT ID_PK_LIST_FAM_LOT
PRIMARY KEY (DOC_SEQ, DOC_FAMÍLIA_SEQ, SEQ);

CREATE TABLE TKRJ.PADRONIZAÇÃO (
             SEQ NUMBER,
             REF VARCHAR2 (20),
             COD_FOR VARCHAR2 (100),
             COD_COM VARCHAR2 (100),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TKRJ_DAT;

ALTER TABLE TKRJ.PADRONIZAÇÃO ADD CONSTRAINT ID_PADRÃO
PRIMARY KEY (SEQ, REF);

CREATE TABLE TKRJ.PRODUTO (
             COD VARCHAR2 (20),
             DESCRIÇÃO VARCHAR2 (100),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TKRJ_DAT;

ALTER TABLE TKRJ.PRODUTO ADD CONSTRAINT ID_PRODUTO
PRIMARY KEY (COD);

CREATE TABLE TKRJ.PRODUTO_ESPECIF (
             PRODUTO_COD VARCHAR2 (20),
             SEQ NUMBER,
             ESPESSURA_MIN NUMBER,
             ESPESSURA_MAX NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_TKRJ_DAT;

ALTER TABLE TKRJ.PRODUTO_ESPECIF ADD CONSTRAINT ID_PROD_ESP
PRIMARY KEY (PRODUTO_COD, SEQ);

CREATE TABLE TKRJ.SYS_CAD_LOG (
             SEQ NUMBER (10,0),
             NOME_TABELA VARCHAR2 (50),
             CHAVE CLOB,
             MOMENTO DATE,
             USUÁRIO VARCHAR2 (20),
             LOCAL VARCHAR2 (20),
             AÇÃO VARCHAR2 (20)
             ) TABLESPACE T_TKRJ_DAT;

ALTER TABLE TKRJ.SYS_CAD_LOG ADD CONSTRAINT ID_CAD_LOG
PRIMARY KEY (SEQ);

CREATE TABLE TKRJ.SYS_CONFIG_GLOBAL (
             PARAM VARCHAR2 (30),
             CONFIG VARCHAR2 (4000)
             ) TABLESPACE T_TKRJ_DAT;

ALTER TABLE TKRJ.SYS_CONFIG_GLOBAL ADD CONSTRAINT ID_CONFIG_GLOBAL
PRIMARY KEY (PARAM);

CREATE TABLE TKRJ.SYS_DELETE (
             NOME_TABELA VARCHAR2 (50),
             CHAVE VARCHAR2 (150),
             MOMENTO DATE,
             USUÁRIO VARCHAR2 (20),
             LOCAL VARCHAR2 (20)
             ) TABLESPACE T_TKRJ_DAT;

ALTER TABLE TKRJ.SYS_DELETE ADD CONSTRAINT ID_DELETE
PRIMARY KEY (NOME_TABELA, CHAVE);

CREATE TABLE TKRJ.SYS_LOCALID (
             NOME VARCHAR2 (15),
             CORRENTE NUMBER (5,0),
             PACOTE NUMBER (5,0),
             PACOTE_REC NUMBER (5,0),
             MOMENTO DATE,
             MOMENTO_REC DATE,
             MODELO NUMBER (5,0),
             OBS VARCHAR2 (255)
             ) TABLESPACE T_TKRJ_DAT;

ALTER TABLE TKRJ.SYS_LOCALID ADD CONSTRAINT ID_SYS_LOCAL
PRIMARY KEY (NOME);

CREATE TABLE TKRJ.SYS_OCORRÊNCIA (
             SEQ NUMBER (10,0),
             APLICAÇÃO VARCHAR2 (30),
             OCORRÊNCIA VARCHAR2 (3000),
             USUÁRIO VARCHAR2 (20),
             MOMENTO DATE,
             LOCAL VARCHAR2 (20)
             ) TABLESPACE T_TKRJ_DAT;

ALTER TABLE TKRJ.SYS_OCORRÊNCIA ADD CONSTRAINT ID_OCORRÊNCIA
PRIMARY KEY (SEQ);

CREATE TABLE TKRJ.SYS_TABELA (
             NOME VARCHAR2 (50),
             CHAVE VARCHAR2 (3000),
             EXPR_PRIMÁRIA VARCHAR2 (3000),
             EXPR_APRESENTA VARCHAR2 (3000),
             CAMPOS VARCHAR2 (3000),
             RELAÇÕES_1_N VARCHAR2 (3000),
             NÍVEL NUMBER (5,0)
             ) TABLESPACE T_TKRJ_DAT;

ALTER TABLE TKRJ.SYS_TABELA ADD CONSTRAINT ID_SYS_TABELA
PRIMARY KEY (NOME);

CREATE TABLE TKRJ.SYS_USUÁRIO (
             USUÁRIO VARCHAR2 (20),
             NOME VARCHAR2 (50),
             SUPERVISOR VARCHAR2 (20),
             DEPTO VARCHAR2 (10),
             MSG VARCHAR2 (3000),
             ASSINATURA BLOB,
             TEMPO_ATUALIZA NUMBER (5,0),
             FUNÇÃO VARCHAR2 (30),
             ASSINATURA_BMP BLOB
             ) TABLESPACE T_TKRJ_DAT;

ALTER TABLE TKRJ.SYS_USUÁRIO ADD CONSTRAINT ID_SYS_USUÁRIO
PRIMARY KEY (USUÁRIO);

ALTER TABLE TKRJ.LOTE_GRUPO ADD CONSTRAINT LOTE$LOTE_GRUPO$01
FOREIGN KEY (LOTE_REF) REFERENCES TKRJ.LOTE (REF);

ALTER TABLE TKRJ.LOTE_ITEM ADD CONSTRAINT LOTE$LOTE_ITEM$01
FOREIGN KEY (LOTE_REF) REFERENCES TKRJ.LOTE (REF);

ALTER TABLE TKRJ.PACKING_LIST_FAM ADD CONSTRAINT PK_LIST$PK_LIST_FAM$01
FOREIGN KEY (DOC_SEQ) REFERENCES TKRJ.PACKING_LIST (SEQ);

ALTER TABLE TKRJ.PACKING_LIST_FAM_LOTE ADD CONSTRAINT PK_LIST_FAM$PK_LIST_FAM_LOT$02
FOREIGN KEY (DOC_SEQ, DOC_FAMÍLIA_SEQ) REFERENCES TKRJ.PACKING_LIST_FAM (DOC_SEQ, SEQ);

ALTER TABLE TKRJ.PRODUTO_ESPECIF ADD CONSTRAINT PRODUTO$PROD_ESP$01
FOREIGN KEY (PRODUTO_COD) REFERENCES TKRJ.PRODUTO (COD);

CREATE OR REPLACE TRIGGER BEF_LOTE BEFORE UPDATE OR INSERT OR DELETE ON TKRJ.LOTE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'LOTE' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO TKRJ.SYS_DELETE VALUES ('LOTE', :OLD.REF, SYSDATE, USER, 'TKRJ');
      ELSE
         UPDATE TKRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TKRJ' WHERE NOME_TABELA = 'LOTE' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TKRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TKRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_LOTE_GRUPO BEFORE UPDATE OR INSERT OR DELETE ON TKRJ.LOTE_GRUPO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'LOTE_GRUPO' AND CHAVE = :OLD.LOTE_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO TKRJ.SYS_DELETE VALUES ('LOTE_GRUPO', :OLD.LOTE_REF || :OLD.SEQ, SYSDATE, USER, 'TKRJ');
      ELSE
         UPDATE TKRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TKRJ' WHERE NOME_TABELA = 'LOTE_GRUPO' AND CHAVE = :OLD.LOTE_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TKRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TKRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_LOTE_ITEM BEFORE UPDATE OR INSERT OR DELETE ON TKRJ.LOTE_ITEM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'LOTE_ITEM' AND CHAVE = :OLD.LOTE_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO TKRJ.SYS_DELETE VALUES ('LOTE_ITEM', :OLD.LOTE_REF || :OLD.SEQ, SYSDATE, USER, 'TKRJ');
      ELSE
         UPDATE TKRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TKRJ' WHERE NOME_TABELA = 'LOTE_ITEM' AND CHAVE = :OLD.LOTE_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TKRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TKRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PK_LIST BEFORE UPDATE OR INSERT OR DELETE ON TKRJ.PACKING_LIST FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PACKING_LIST' AND CHAVE = :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO TKRJ.SYS_DELETE VALUES ('PACKING_LIST', :OLD.SEQ, SYSDATE, USER, 'TKRJ');
      ELSE
         UPDATE TKRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TKRJ' WHERE NOME_TABELA = 'PACKING_LIST' AND CHAVE = :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TKRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TKRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PK_LIST_FAM BEFORE UPDATE OR INSERT OR DELETE ON TKRJ.PACKING_LIST_FAM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PACKING_LIST_FAM' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO TKRJ.SYS_DELETE VALUES ('PACKING_LIST_FAM', :OLD.DOC_SEQ || :OLD.SEQ, SYSDATE, USER, 'TKRJ');
      ELSE
         UPDATE TKRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TKRJ' WHERE NOME_TABELA = 'PACKING_LIST_FAM' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TKRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TKRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PK_LIST_FAM_LOT BEFORE UPDATE OR INSERT OR DELETE ON TKRJ.PACKING_LIST_FAM_LOTE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PACKING_LIST_FAM_LOTE' AND CHAVE = :OLD.DOC_SEQ || :OLD.DOC_FAMÍLIA_SEQ || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO TKRJ.SYS_DELETE VALUES ('PACKING_LIST_FAM_LOTE', :OLD.DOC_SEQ || :OLD.DOC_FAMÍLIA_SEQ || :OLD.SEQ, SYSDATE, USER, 'TKRJ');
      ELSE
         UPDATE TKRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TKRJ' WHERE NOME_TABELA = 'PACKING_LIST_FAM_LOTE' AND CHAVE = :OLD.DOC_SEQ || :OLD.DOC_FAMÍLIA_SEQ || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TKRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TKRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PADRÃO BEFORE UPDATE OR INSERT OR DELETE ON TKRJ.PADRONIZAÇÃO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PADRONIZAÇÃO' AND CHAVE = :OLD.SEQ || :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO TKRJ.SYS_DELETE VALUES ('PADRONIZAÇÃO', :OLD.SEQ || :OLD.REF, SYSDATE, USER, 'TKRJ');
      ELSE
         UPDATE TKRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TKRJ' WHERE NOME_TABELA = 'PADRONIZAÇÃO' AND CHAVE = :OLD.SEQ || :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TKRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TKRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PRODUTO BEFORE UPDATE OR INSERT OR DELETE ON TKRJ.PRODUTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PRODUTO' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO TKRJ.SYS_DELETE VALUES ('PRODUTO', :OLD.COD, SYSDATE, USER, 'TKRJ');
      ELSE
         UPDATE TKRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TKRJ' WHERE NOME_TABELA = 'PRODUTO' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TKRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TKRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PROD_ESP BEFORE UPDATE OR INSERT OR DELETE ON TKRJ.PRODUTO_ESPECIF FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PRODUTO_ESPECIF' AND CHAVE = :OLD.PRODUTO_COD || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO TKRJ.SYS_DELETE VALUES ('PRODUTO_ESPECIF', :OLD.PRODUTO_COD || :OLD.SEQ, SYSDATE, USER, 'TKRJ');
      ELSE
         UPDATE TKRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'TKRJ' WHERE NOME_TABELA = 'PRODUTO_ESPECIF' AND CHAVE = :OLD.PRODUTO_COD || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'TKRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'TKRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE USER DANIEL IDENTIFIED BY XXXXXX
DEFAULT TABLESPACE T_TKRJ_DAT
TEMPORARY TABLESPACE TEMP
PROFILE DEFAULT
ACCOUNT UNLOCK;
GRANT CREATE SESSION, EXECUTE ANY LIBRARY, EXECUTE ANY PROCEDURE TO DANIEL;
GRANT SELECT ANY TABLE, INSERT ANY TABLE, UPDATE ANY TABLE, DELETE ANY TABLE TO DANIEL;

CREATE USER HENRIQUE IDENTIFIED BY XXXXXX
DEFAULT TABLESPACE T_TKRJ_DAT
TEMPORARY TABLESPACE TEMP
PROFILE DEFAULT
ACCOUNT UNLOCK;
GRANT CREATE SESSION, EXECUTE ANY LIBRARY, EXECUTE ANY PROCEDURE TO HENRIQUE;
GRANT SELECT ANY TABLE, INSERT ANY TABLE, UPDATE ANY TABLE, DELETE ANY TABLE TO HENRIQUE;

CREATE USER JOAOG IDENTIFIED BY XXXXXX
DEFAULT TABLESPACE T_TKRJ_DAT
TEMPORARY TABLESPACE TEMP
PROFILE DEFAULT
ACCOUNT UNLOCK;
GRANT CREATE SESSION, EXECUTE ANY LIBRARY, EXECUTE ANY PROCEDURE TO JOAOG;
GRANT SELECT ANY TABLE, INSERT ANY TABLE, UPDATE ANY TABLE, DELETE ANY TABLE TO JOAOG;

CREATE USER LUCIANOL IDENTIFIED BY XXXXXX_ON_INSTALL"
DEFAULT TABLESPACE T_TKRJ_DAT
TEMPORARY TABLESPACE TEMP
PROFILE DEFAULT
ACCOUNT UNLOCK;
GRANT CREATE SESSION, EXECUTE ANY LIBRARY, EXECUTE ANY PROCEDURE TO LUCIANOL;
GRANT SELECT ANY TABLE, INSERT ANY TABLE, UPDATE ANY TABLE, DELETE ANY TABLE TO LUCIANOL;

CREATE USER MYLENE IDENTIFIED BY XXXXXX
DEFAULT TABLESPACE T_TKRJ_DAT
TEMPORARY TABLESPACE TEMP
PROFILE DEFAULT
ACCOUNT UNLOCK;
GRANT CREATE SESSION, EXECUTE ANY LIBRARY, EXECUTE ANY PROCEDURE TO MYLENE;
GRANT SELECT ANY TABLE, INSERT ANY TABLE, UPDATE ANY TABLE, DELETE ANY TABLE TO MYLENE;

CREATE USER RONALD IDENTIFIED BY XXXXXX
DEFAULT TABLESPACE T_TKRJ_DAT
TEMPORARY TABLESPACE TEMP
PROFILE DEFAULT
ACCOUNT UNLOCK;
GRANT CREATE SESSION, EXECUTE ANY LIBRARY, EXECUTE ANY PROCEDURE TO RONALD;
GRANT SELECT ANY TABLE, INSERT ANY TABLE, UPDATE ANY TABLE, DELETE ANY TABLE TO RONALD;

CREATE USER VALERIA IDENTIFIED BY XXXXXX
DEFAULT TABLESPACE T_TKRJ_DAT
TEMPORARY TABLESPACE TEMP
PROFILE DEFAULT
ACCOUNT UNLOCK;
GRANT CREATE SESSION, EXECUTE ANY LIBRARY, EXECUTE ANY PROCEDURE TO VALERIA;
GRANT SELECT ANY TABLE, INSERT ANY TABLE, UPDATE ANY TABLE, DELETE ANY TABLE TO VALERIA;

CREATE TABLE TKRJ.LOTE_T (
             REF NUMBER,
             NOME VARCHAR2 (50),
             PROCESSO VARCHAR2 (100),
             CLI1_NOME VARCHAR2 (50),
             CLI1_DESTINO VARCHAR2 (100),
             CLI2_NOME VARCHAR2 (50),
             CLI2_DESTINO VARCHAR2 (100),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE TRANSF NOLOGGING;

CREATE TABLE TKRJ.LOTE_GRUPO_T (
             LOTE_REF NUMBER,
             SEQ NUMBER,
             QUALITY VARCHAR2 (20),
             PRODUCT VARCHAR2 (20),
             THICKNESS NUMBER,
             WIDTH NUMBER,
             LENGTH NUMBER,
             FINISH VARCHAR2 (20),
             COATING VARCHAR2 (20),
             TEMPER VARCHAR2 (20),
             VOLUME NUMBER (10,0),
             NET NUMBER,
             GROSS NUMBER,
             CLI1_PRIOR NUMBER (3,0),
             CLI2_PRIOR NUMBER (3,0),
             DIFER_PRIOR NUMBER (3,0),
             PORTO_CLI1 NUMBER,
             PORTO_CLI2 NUMBER,
             FINAL_PORTO1 NUMBER,
             FINAL_PORTO2 NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE TRANSF NOLOGGING;

CREATE TABLE TKRJ.LOTE_ITEM_T (
             LOTE_REF NUMBER,
             SEQ NUMBER,
             VOLUME VARCHAR2 (50),
             TAG VARCHAR2 (20),
             QUALITY VARCHAR2 (20),
             PRODUCT VARCHAR2 (20),
             THICKNESS NUMBER,
             WIDTH NUMBER,
             LENGTH NUMBER,
             FINISH VARCHAR2 (20),
             COATING VARCHAR2 (20),
             SPECIFICATION VARCHAR2 (100),
             TEMPER VARCHAR2 (20),
             PACKING VARCHAR2 (20),
             NET NUMBER,
             GROSS NUMBER,
             CLIENTE VARCHAR2 (100),
             BL_CODE VARCHAR2 (20),
             DESTINO VARCHAR2 (50),
             OVITEM VARCHAR2 (20),
             PO VARCHAR2 (20),
             LOTE VARCHAR2 (20),
             PED_REF VARCHAR2 (20),
             PED_ITEM NUMBER (5,0),
             EMB_REF VARCHAR2 (20),
             PORTO_DEST VARCHAR2 (50),
             REMARK VARCHAR2 (3000),
             C NUMBER,
             MN NUMBER,
             P NUMBER,
             S NUMBER,
             SI NUMBER,
             CU NUMBER,
             NI NUMBER,
             CR NUMBER,
             MO NUMBER,
             SN NUMBER,
             AL NUMBER,
             N NUMBER,
             NB NUMBER,
             V NUMBER,
             TI NUMBER,
             O NUMBER,
             B NUMBER,
             C_EQ NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE TRANSF NOLOGGING;

CREATE TABLE TKRJ.PACKING_LIST_T (
             SEQ NUMBER,
             EMPRESA_COD VARCHAR2 (255),
             EMPRESA_NOME VARCHAR2 (255),
             TÍTULO VARCHAR2 (100),
             REFERÊNCIA VARCHAR2 (255),
             DATA VARCHAR2 (50),
             TRANSPORTADOR VARCHAR2 (255),
             COMPRADOR_NOME VARCHAR2 (255),
             COMPRADOR_ENDEREÇO VARCHAR2 (255),
             ORIGEM VARCHAR2 (255),
             DESTINO VARCHAR2 (255),
             NOTAS VARCHAR2 (4000),
             EMPRESA_CONTATO VARCHAR2 (50),
             EMPRESA_ENDEREÇO VARCHAR2 (255),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE TRANSF NOLOGGING;

CREATE TABLE TKRJ.PACKING_LIST_FAM_T (
             DOC_SEQ NUMBER,
             SEQ NUMBER,
             FAMÍLIA VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE TRANSF NOLOGGING;

CREATE TABLE TKRJ.PACKING_LIST_FAM_LOTE_T (
             DOC_SEQ NUMBER,
             DOC_FAMÍLIA_SEQ NUMBER,
             SEQ NUMBER,
             LOTE NUMBER,
             BL_CODE VARCHAR2 (20),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE TRANSF NOLOGGING;

CREATE TABLE TKRJ.PADRONIZAÇÃO_T (
             SEQ NUMBER,
             REF VARCHAR2 (20),
             COD_FOR VARCHAR2 (100),
             COD_COM VARCHAR2 (100),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE TRANSF NOLOGGING;

CREATE TABLE TKRJ.PRODUTO_T (
             COD VARCHAR2 (20),
             DESCRIÇÃO VARCHAR2 (100),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE TRANSF NOLOGGING;

CREATE TABLE TKRJ.PRODUTO_ESPECIF_T (
             PRODUTO_COD VARCHAR2 (20),
             SEQ NUMBER,
             ESPESSURA_MIN NUMBER,
             ESPESSURA_MAX NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE TRANSF NOLOGGING;

CREATE TABLE TKRJ.SYS_DELETE_T (
             NOME_TABELA VARCHAR2 (50),
             CHAVE VARCHAR2 (150),
             MOMENTO DATE,
             USUÁRIO VARCHAR2 (20),
             LOCAL VARCHAR2 (20)
             ) TABLESPACE TRANSF NOLOGGING;


