
CREATE OR REPLACE TRIGGER BEF_BL_CARGA_CALC BEFORE UPDATE OF
PESO_LÍQUIDO, EXP_PREÇO_UNIT, IMP_PREÇO_UNIT, QTD_PED_UNID, QTD_VOL,
CALC_EXP_EMB, CALC_IMP_EMB, NOMINAL_PED_UNID OR INSERT OR DELETE ON CXRJ.BL_CARGA FOR EACH ROW
BEGIN

   UPDATE EMB SET CALC_PEND = 1 WHERE REF = :NEW.EMB_REF;

   IF INSERTING OR UPDATING THEN
      :NEW.CALC_EXP_EMB := ROUND(NVL(:NEW.PESO_LÍQUIDO * :NEW.EXP_PREÇO_UNIT,0),2);
      :NEW.CALC_IMP_EMB := ROUND(NVL(:NEW.PESO_LÍQUIDO * :NEW.IMP_PREÇO_UNIT,0),2);
   END IF;

   IF UPDATING OR DELETING THEN 
         UPDATE EMB SET 
         CALC_QTD_PED_UNID = CALC_QTD_PED_UNID - NVL(:OLD.QTD_PED_UNID,0),
         CALC_PESO_LÍQUIDO = CALC_PESO_LÍQUIDO - NVL(:OLD.PESO_LÍQUIDO,0),
         CALC_PESO_BRUTO = CALC_PESO_BRUTO - NVL(:OLD.PESO_BRUTO,0),
         CALC_QTD_VOL = CALC_QTD_VOL - NVL(:OLD.QTD_VOL,0),
         CALC_EXP_TOT_ITEM = CALC_EXP_TOT_ITEM - NVL(:OLD.CALC_EXP_EMB,0),
         CALC_IMP_TOT_ITEM = CALC_IMP_TOT_ITEM - NVL(:OLD.CALC_IMP_EMB,0),
         CALC_EXP_TOT_EMB = CALC_EXP_TOT_EMB - NVL(:OLD.CALC_EXP_EMB,0),
         CALC_IMP_TOT_EMB = CALC_IMP_TOT_EMB - NVL(:OLD.CALC_IMP_EMB,0),
         CALC_NOMINAL_PED = CALC_NOMINAL_PED - NVL(:OLD.NOMINAL_PED_UNID,0),
         CALC_PEND = 1,
         SYS_STATUS = DECODE(SYS_STATUS, 'I', '+', 'A', '/', 'X')
         WHERE REF = :OLD.EMB_REF;
   END IF;

   IF UPDATING OR INSERTING THEN
      UPDATE EMB SET 
         CALC_QTD_PED_UNID = CALC_QTD_PED_UNID + NVL(:NEW.QTD_PED_UNID,0),
         CALC_PESO_LÍQUIDO = CALC_PESO_LÍQUIDO + NVL(:NEW.PESO_LÍQUIDO,0),
         CALC_PESO_BRUTO = CALC_PESO_BRUTO + NVL(:NEW.PESO_BRUTO,0),
         CALC_QTD_VOL = CALC_QTD_VOL + NVL(:NEW.QTD_VOL,0),
         CALC_EXP_TOT_ITEM = CALC_EXP_TOT_ITEM + NVL(:NEW.CALC_EXP_EMB,0),
         CALC_IMP_TOT_ITEM = CALC_IMP_TOT_ITEM + NVL(:NEW.CALC_IMP_EMB,0),
         CALC_EXP_TOT_EMB = CALC_EXP_TOT_EMB + NVL(:NEW.CALC_EXP_EMB,0),
         CALC_IMP_TOT_EMB = CALC_IMP_TOT_EMB + NVL(:NEW.CALC_IMP_EMB,0),
         CALC_NOMINAL_PED = CALC_NOMINAL_PED + NVL(:NEW.NOMINAL_PED_UNID,0),
         CALC_PEND = 1,
         SYS_STATUS = DECODE(SYS_STATUS, 'I', '+', 'A', '/', 'X')
         WHERE REF = :NEW.EMB_REF;
   END IF;

END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_CALC_PEND BEFORE UPDATE OR INSERT OF CALC_PEND ON CXRJ.EMB FOR EACH ROW
DECLARE
      MAXX NUMBER;

      TEMP1 NUMBER(14,2);
      TEMP2 NUMBER(14,2);
      TEMP3 NUMBER(14,2);

      EMB_EXP_FOB NUMBER(14,2);
      EMB_IMP_FOB NUMBER(14,2);
      MT_FRETE NUMBER(6,2);
      
      TOT NUMBER;
      
	
BEGIN

      -- CAMPO CALC_PEND IDENTIFICA STATUS DO REGISTRO DE ACORDO COM:
      -- 0 --> VALORES CHECADOS E ATUALIZADOS. CAMPOS TRATADOS E EMBARQUE SEM PENDÊNCIAS
      -- 1 --> APENAS PENDÊNCIA DE VALORES. AO ZERAR, SERÃO CALCULADOS OS CAMPOS CALC
      -- 2 --> ORIENTAÇÃO PARA PROCEDER INICIALIZAÇÃO DE ELEMENTOS DO EMBARQUE: SERÃO APAGADOS
      --         OS LANÇAMENTOS E TOTALIZAÇÕES E CRIADOS A PARTIR DO PADRÃO

SELECT COUNT(*) INTO TOT FROM SYS_CONFIG_GLOBAL WHERE PARAM = :NEW.REF AND CONFIG ='INSERINDO';

IF TOT = 0 THEN

      INSERT INTO SYS_CONFIG_GLOBAL (PARAM, CONFIG) VALUES (:NEW.REF, 'INSERINDO');

      IF :NEW.CALC_PEND = 0 THEN


           --------------------------------------------
           -- ATUALIZA RESUMO DE EMBARQUE
           --------------------------------------------


-- 1) CALC_BL_CARGA: CALCULA CAMPOS CALCULADOS DO BL_CARGA
           --      PRIMEIRO, TESTAR PERFORMANCE. SE NECESSÁRIO, ATIVAR DEPOIS.


-- 2) CALC_EMB: CALCULA CAMPOS CALCULADOS DO EMB E FOB PARA DISTRIBUIÇÃO
           FOR CUR IN (SELECT EMB_REF, SUM(QTD_PED_UNID) T_QTD_PED_UNID, SUM(PESO_LÍQUIDO) T_PESO_LÍQUIDO, 
           SUM(PESO_BRUTO) T_PESO_BRUTO, SUM(QTD_VOL) T_QTD_VOL, SUM(CALC_EXP_EMB) T_EXP_ITEM, 
           SUM(CALC_EXP_EMB) T_EXP_EMB, SUM(CALC_IMP_EMB) T_IMP_ITEM, 
           SUM(CALC_IMP_EMB) T_IMP_EMB, SUM(NOMINAL_PED_UNID) T_NOMINAL FROM BL_CARGA WHERE EMB_REF = :NEW.REF GROUP BY EMB_REF) LOOP

               :NEW.CALC_QTD_PED_UNID := NVL(CUR.T_QTD_PED_UNID,0);
               :NEW.CALC_PESO_LÍQUIDO := NVL(CUR.T_PESO_LÍQUIDO,0);
               :NEW.CALC_PESO_BRUTO := NVL(CUR.T_PESO_BRUTO,0);
               :NEW.CALC_QTD_VOL := NVL(CUR.T_QTD_VOL,0);
               :NEW.CALC_EXP_TOT_ITEM := NVL(CUR.T_EXP_ITEM,0);
               :NEW.CALC_EXP_TOT_EMB := NVL(CUR.T_EXP_EMB,0);
               :NEW.CALC_IMP_TOT_ITEM := NVL(CUR.T_IMP_ITEM,0);
               :NEW.CALC_IMP_TOT_EMB := NVL(CUR.T_IMP_EMB,0);
	       :NEW.CALC_NOMINAL_PED := NVL(CUR.T_NOMINAL,0);
	
           END LOOP;



           --------------------------------------------
           -- ACERTOS DIVERSOS
           --------------------------------------------

-- 3) ACERTA FRETE NO EMBARQUE (SE TIVER TOTAL, COLOCA POR MT E VICE-VERSA)
	IF NVL(:NEW.FRETE_VALOR_TOTAL,0) <> 0 THEN
		:NEW.CALC_FRETE_TOTAL := :NEW.FRETE_VALOR_TOTAL;
	ELSIF NVL(:NEW.FRETE_VALOR_TOTAL,0) = 0 AND NVL(:NEW.FRETE_POR_MT,0) <> 0 THEN
		:NEW.CALC_FRETE_TOTAL := :NEW.FRETE_POR_MT * :NEW.CALC_PESO_BRUTO;
	ELSE
		:NEW.CALC_FRETE_TOTAL := 0;
	END IF;
	
-- 4) ATUALIZA DESCRIÇÃO DO BL (AQUELE CÓDIGO CAT)
           -- >> ESTE É PARA O HOTT, DEPOIS, ACERTAR COM O DEOPE <<

           --------------------------------------------
           -- TRATAMENTO DE ELEMENTOS DE EMBARQUE
           --------------------------------------------

           IF :OLD.CALC_PEND = 2 THEN

-- 5) EMB_LANÇ E EMB_TOTALIZA: EXCLUI LANÇAMENTOS E OS INCLUI CORRETAMENTE (SE SOLICITADO)
           --    CONFORME CONDIÇÃO DE EXPORTADOR E IMPORTADOR

               DELETE FROM EMB_LANÇ WHERE EMB_REF = :NEW.REF;
               DELETE FROM EMB_TOTALIZA WHERE EMB_REF = :NEW.REF;


               -- INSERE FOB PARA EXP E IMP
               SELECT MAX(SEQ) INTO MAXX FROM EMB_TOTALIZA WHERE EMB_REF = :NEW.REF;
               SELECT COUNT(LANÇ) INTO TEMP1 FROM INCOTERM_LANÇ WHERE INCOTERM = :NEW.CALC_EXP_COND_VENDA;
               SELECT COUNT(LANÇ) INTO TEMP2 FROM INCOTERM_LANÇ WHERE INCOTERM = :NEW.CALC_IMP_COND_VENDA;

		IF (TEMP1 > 1) OR (TEMP2 > 1) THEN 
	             INSERT INTO EMB_TOTALIZA (EMB_REF, SEQ, LANÇ, EXP, IMP)
                     VALUES (:NEW.REF, NVL(MAXX,0)+1, 'TOTAL FOB', SIGN(TEMP1), SIGN(TEMP2));
		END IF;

               FOR CUR IN (SELECT DISTINCT INCOTERM, LANÇ,
                   DECODE(INCOTERM, :NEW.CALC_EXP_COND_VENDA, 1, 0) EXP,
                   DECODE(INCOTERM, :NEW.CALC_IMP_COND_VENDA, 1, 0) IMP
                   FROM INCOTERM_LANÇ WHERE INCOTERM IN
                   (:NEW.CALC_EXP_COND_VENDA, :NEW.CALC_IMP_COND_VENDA) AND
                   LANÇ <> 'CUSTO') LOOP

                   SELECT MAX(SEQ) INTO MAXX FROM EMB_LANÇ WHERE EMB_REF = :NEW.REF;
                   INSERT INTO EMB_LANÇ (EMB_REF, SEQ, LANÇ, VALOR,
                       EXP, IMP, UNID, NA_FATURA) VALUES (:NEW.REF, NVL(MAXX,0)+1,
                       CUR.LANÇ, DECODE(CUR.LANÇ,'FRETE', NVL(:NEW.CALC_FRETE_TOTAL,0), 0), 
                       CUR.EXP, CUR.IMP, 1, 1);

		   SELECT MAX(SEQ) INTO MAXX FROM EMB_TOTALIZA WHERE EMB_REF = :NEW.REF;
                   INSERT INTO EMB_TOTALIZA (EMB_REF, SEQ, LANÇ, EXP, IMP)
                   VALUES (:NEW.REF, NVL(MAXX,0)+1, CUR.LANÇ, CUR.EXP, CUR.IMP);
               END LOOP;
		

-- 6) EMB_TOTALIZA: INCLUI TOTAL GERAL
               SELECT MAX(SEQ) INTO MAXX FROM EMB_TOTALIZA WHERE EMB_REF = :NEW.REF;
               INSERT INTO EMB_TOTALIZA (EMB_REF, SEQ, LANÇ, EXP, IMP, EXP_DESCR, IMP_DESCR)
                   VALUES (:NEW.REF, NVL(MAXX,0)+1, 'TOTAL GERAL', SIGN(TEMP1), SIGN(TEMP2),
                   DECODE(:NEW.EXP_COND_VENDA, NULL, NULL, 'TOTAL ' || :NEW.EXP_COND_VENDA),
                   DECODE(:NEW.IMP_COND_VENDA, NULL, NULL, 'TOTAL ' || :NEW.IMP_COND_VENDA));

           END IF;

           --------------------------------------------
           -- VERIFICAÇÃO DE VARIAÇÃO DE FRETE
           --------------------------------------------

-- 7) VAR_FRETE: CASO SOLICITADA, CALCULA E INSERE LANÇAMENTO DE VARIAÇÃO DE FRETE
           -- >> HOTT: VER ONDE ESTÁ O CAMPO QUE INDICA TER O EMBARQUE VARIAÇÃO DE FRETE 
           --          E IMPLEMENTAR

           --------------------------------------------
           -- RECÁLCULO DE VALORES
           --------------------------------------------


           -- HOTT, INCLUÍ VALOR_POR_MT APESAR DE CONSTAR EM TODOS OS DOCUMENTOS SUA EXCLUSÃO
-- >>>>>>> -- IMPORTANTE CONFIRMAR A PRESENÇA DESTE OU NÃO... 
           -- PERGUNTE SE O DEOPE IRÁ UTILIZAR SINCERAMENTE O CAMPO POIS DO CONTRÁRIO, OPTO POR
           -- EXCLUIR SUA UTILIZAÇÃO <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

-- 8) EMB_LANÇ E EMB_FOB: CALCULA FOB DO EMBARQUE E ATUALIZA CAMPO CALCULADO DE LANÇAMENTOS
           EMB_EXP_FOB := :NEW.CALC_EXP_TOT_ITEM;
           EMB_IMP_FOB := :NEW.CALC_IMP_TOT_ITEM;

           FOR CUR IN (SELECT SEQ, LANÇ, VALOR, VALOR_POR_MT, EXP, IMP FROM EMB_LANÇ WHERE 
               EMB_REF = :NEW.REF AND LANÇ <> 'CUSTO') LOOP

               IF CUR.LANÇ = 'FRETE' THEN
                   TEMP1 := :NEW.CALC_FRETE_TOTAL;
                   UPDATE EMB_LANÇ SET VALOR = TEMP1, VALOR_POR_MT = NULL WHERE EMB_REF = :NEW.REF AND SEQ = CUR.SEQ;
	       ELSE
                   TEMP1 := NVL(CUR.VALOR,0);
                   TEMP1 := TEMP1 + ROUND(NVL(CUR.VALOR_POR_MT,0) * NVL(:NEW.CALC_PESO_LÍQUIDO,0),2); -- POR_MT
               END IF;

               IF CUR.EXP=1 THEN
                   EMB_EXP_FOB := EMB_EXP_FOB - TEMP1;
               END IF;
               IF CUR.IMP=1 THEN
                   EMB_IMP_FOB := EMB_IMP_FOB - TEMP1;
               END IF;

               UPDATE EMB_LANÇ SET EXP_CALC = DECODE(CUR.EXP,0,0,TEMP1),
	       IMP_CALC = DECODE(CUR.IMP,0,0,TEMP1) WHERE EMB_REF = :NEW.REF AND SEQ = CUR.SEQ;

	   END LOOP;


-- 9) EMB_FOB: GRAVANDO CUSTO NO EMB_LANÇ E EMB_TOTALIZA

               IF EMB_EXP_FOB = EMB_IMP_FOB THEN
	          -- CUSTO EXP E IMP IGUAIS
	             UPDATE EMB_LANÇ SET VALOR = EMB_EXP_FOB, EXP = 1, IMP = 1, EXP_CALC = EMB_EXP_FOB, 
                     IMP_CALC = EMB_IMP_FOB WHERE EMB_REF = :NEW.REF AND LANÇ = 'CUSTO';
                     IF SQL%NOTFOUND THEN
                         SELECT MAX(SEQ) INTO MAXX FROM EMB_LANÇ WHERE EMB_REF = :NEW.REF;          
                         INSERT INTO EMB_LANÇ (EMB_REF, SEQ, LANÇ, VALOR,
                         EXP, IMP, UNID, NA_FATURA, EXP_CALC, IMP_CALC) VALUES (:NEW.REF, NVL(MAXX,0)+1,
                         'CUSTO', EMB_EXP_FOB, 1, 1, 1, 1, EMB_EXP_FOB, EMB_IMP_FOB);           
                     END IF;
               ELSE
                  -- CUSTO EXP E IMP DIFERENTES
                     -- EXP
                     UPDATE EMB_LANÇ SET VALOR = EMB_EXP_FOB, EXP = 1, IMP = 0, EXP_CALC = EMB_EXP_FOB,
                     IMP_CALC = 0 WHERE EMB_REF = :NEW.REF AND 
                     LANÇ = 'CUSTO' AND EXP = 1;
                     IF SQL%NOTFOUND THEN
                        SELECT MAX(SEQ) INTO MAXX FROM EMB_LANÇ WHERE EMB_REF = :NEW.REF;          
                        INSERT INTO EMB_LANÇ (EMB_REF, SEQ, LANÇ, VALOR,
                        EXP, IMP, UNID, NA_FATURA, EXP_CALC, IMP_CALC) VALUES (:NEW.REF, NVL(MAXX,0)+1,
                        'CUSTO', EMB_EXP_FOB, 1, 0, 1, 1, EMB_EXP_FOB, 0);           
                     END IF;
                     -- IMP
                     UPDATE EMB_LANÇ SET VALOR = EMB_IMP_FOB, EXP = 0, IMP = 1, IMP_CALC = EMB_IMP_FOB,
                     EXP_CALC = 0 WHERE EMB_REF = :NEW.REF AND LANÇ = 'CUSTO' AND IMP = 1;
                     IF SQL%NOTFOUND THEN
                        SELECT MAX(SEQ) INTO MAXX FROM EMB_LANÇ WHERE EMB_REF = :NEW.REF;          
                        INSERT INTO EMB_LANÇ (EMB_REF, SEQ, LANÇ, VALOR,
                        EXP, IMP, UNID, NA_FATURA, EXP_CALC, IMP_CALC) VALUES (:NEW.REF, NVL(MAXX,0)+1,
                        'CUSTO', EMB_IMP_FOB, 0, 1, 1, 1, 0, EMB_IMP_FOB);           
                     END IF;
               END IF;

-- 10) EMB_TOTALIZA: INCLUI REGISTRO DE TOTALIZAÇÃO
               UPDATE EMB_TOTALIZA SET EXP_CALC = EMB_EXP_FOB, IMP_CALC = EMB_IMP_FOB
               WHERE EMB_REF = :NEW.REF AND LANÇ = 'TOTAL FOB';


-- 11) BL_CARGA_FOB: DISTRIBUIÇÃO DO FOB PELOS ITENS
-- HOTT ALTEROU NO DIA 04/01/2003 PARA DISTRIBUIR O FOB DA MANEIRA DESEJADA PELO DEOP.

	IF :NEW.CALC_FRETE_TOTAL <> 0 THEN
            MT_FRETE := ROUND(:NEW.CALC_FRETE_TOTAL/:NEW.CALC_PESO_BRUTO,2);
            UPDATE BL_CARGA SET CALC_EXP_FOB = CALC_EXP_EMB - ROUND(MT_FRETE*PESO_BRUTO,2), 
            CALC_IMP_FOB = CALC_IMP_EMB - ROUND(MT_FRETE*PESO_BRUTO,2) WHERE 
            EMB_REF = :NEW.REF;
	ELSE
	    UPDATE BL_CARGA SET CALC_EXP_FOB = CALC_EXP_EMB, 
            CALC_IMP_FOB = CALC_IMP_EMB WHERE 
            EMB_REF = :NEW.REF;
	END IF;


-- 12) BL_CARGA_FOB DIFERENÇA: INSERE A DIFERENÇA DE SOMA DE FOB NO ÚLTIMO ITEM
               SELECT SUM(CALC_EXP_FOB), SUM(CALC_IMP_FOB) INTO TEMP1, TEMP2 FROM BL_CARGA WHERE
               EMB_REF = :NEW.REF;
           
               FOR CUR IN (SELECT * FROM 
                  (SELECT PED_REF, PED_ITEM, VIAGEM_REF, BL_SEQ FROM BL_CARGA WHERE EMB_REF = :NEW.REF
                  ORDER BY EMB_SEQ DESC, PED_REF DESC, PED_ITEM DESC) WHERE ROWNUM = 1) LOOP
                  UPDATE BL_CARGA SET CALC_EXP_FOB = CALC_EXP_FOB + (EMB_EXP_FOB-TEMP1),
                  CALC_IMP_FOB = CALC_IMP_FOB + (EMB_IMP_FOB-TEMP2) WHERE PED_REF = CUR.PED_REF AND
                  PED_ITEM = CUR.PED_ITEM AND VIAGEM_REF = CUR.VIAGEM_REF AND BL_SEQ = CUR.BL_SEQ;
               END LOOP;


-- 13) EMB_TOTALIZA: ATUALIZA VALORES DA TOTALIZAÇÃO DE FATURA
-- HOTT ALTEROU NO DIA 02/12/2002 PARA RECALCULAR COM O NA_FAT DESMARCADO.

               -- INCLUIR AQUI CRITÉRIOS DE FORMAÇÃO DE TOTALIZAÇÕES
               FOR CUR IN (SELECT SEQ, LANÇ FROM EMB_TOTALIZA WHERE EMB_REF = :NEW.REF) LOOP
                  IF CUR.LANÇ = 'TOTAL GERAL' THEN
                     SELECT SUM(EXP_CALC) EXP, SUM(IMP_CALC) IMP INTO TEMP1, TEMP2 FROM EMB_LANÇ WHERE EMB_REF = :NEW.REF AND NA_FATURA <> 0;
                     UPDATE EMB_TOTALIZA SET EXP_CALC = NVL(TEMP1,0), IMP_CALC = NVL(TEMP2,0) WHERE EMB_REF = :NEW.REF AND SEQ = CUR.SEQ;
                  ELSIF CUR.LANÇ LIKE 'TOTAL %' THEN
                     SELECT SUM(EXP_CALC) EXP, SUM(IMP_CALC) IMP INTO TEMP1, TEMP2 FROM EMB_LANÇ WHERE
                     EMB_REF = :NEW.REF AND EXISTS(SELECT * FROM INCOTERM_LANÇ IL WHERE INCOTERM = SUBSTR(CUR.LANÇ,7) AND EMB_LANÇ.LANÇ = IL.LANÇ);
                     UPDATE EMB_TOTALIZA SET EXP_CALC = NVL(TEMP1,0), IMP_CALC = NVL(TEMP2, 0) WHERE EMB_REF = :NEW.REF AND SEQ = CUR.SEQ;
                  ELSE
                     SELECT SUM(EXP_CALC) EXP, SUM(IMP_CALC) IMP INTO TEMP1, TEMP2 FROM EMB_LANÇ WHERE
                     EMB_REF = :NEW.REF AND LANÇ = CUR.LANÇ AND NA_FATURA <> 0;
                     UPDATE EMB_TOTALIZA SET EXP_CALC = NVL(TEMP1,0), IMP_CALC = NVL(TEMP2, 0) WHERE EMB_REF = :NEW.REF AND SEQ = CUR.SEQ;
                  END IF;
               END LOOP;


      END IF;
      DELETE FROM SYS_CONFIG_GLOBAL WHERE PARAM = :NEW.REF AND CONFIG = 'INSERINDO';
END IF;

END;
/

ALTER TABLE EMB MODIFY (CALC_PEND DEFAULT 1);


CREATE OR REPLACE TRIGGER BEF_EMB_LANÇ_CALC BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_LANÇ FOR EACH ROW
DECLARE
TOT NUMBER;
BEGIN
	SELECT COUNT(*) INTO TOT FROM SYS_CONFIG_GLOBAL WHERE PARAM = :NEW.EMB_REF AND CONFIG = 'INSERINDO';
	IF TOT = 0  AND NOT DELETING THEN
		UPDATE EMB SET CALC_PEND = 1 WHERE REF = :NEW.EMB_REF;
	END IF;
END;
/

