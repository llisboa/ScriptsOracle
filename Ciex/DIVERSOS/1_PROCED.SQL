-- ALTERAÇÕES DE FRETE

-- ALTER TABLE EMB ADD (CALC_FRETE_TOTAL NUMBER);
-- ALTER TABLE EMB ADD (FRETE_POR_MT NUMBER);

-- alter table emb modify (CALC_FRETE_TOTAL NUMBER);
-- ALTER TABLE EMB MODIFY (FRETE_POR_MT NUMBER);


-- CAMPO FRETE_VALOR DEVERÁ SER APAGADO DEPOIS DA MIGRAÇÃO
-- CAMPO FRETE_POR_UNID DEVERÁ SER APAGADO DEPOIS DA MIGRAÇÃO
-- FAVOR ATUALIZAR A INTERFACE: CASO EXISTA FRETE_VALOR, APAGAR FRETE_POR_MT E VICE-VERSA.
-- SOMENTE OS CAMPOS RELATIVOS A FRETE: FRETE_UNID, FRETE_COND, FRETE_VALOR, FRETE_POR_MT, 
--      CALC_FRETE_TOTAL DEVERÃO PERMANECER NA BASE.
-- IMPORTANTE INFORMAR QUE FRETE_UNID É APENAS INFORMATIVO NADA INTERFERINDO NO CÁLCULO DO VALOR.





-- PROCEDIMENTO DE INICIALIZAÇÃO DE VARIÁVEIS DE EMBARQUE E BL_CARGA
ALTER TRIGGER BEF_BL_CARGA_CALC DISABLE;
ALTER TRIGGER BEF_EMB_CALC DISABLE;


UPDATE BL_CARGA SET
      CALC_EXP_EMB = ROUND(PESO_LÍQUIDO * EXP_PREÇO_UNIT,2),
      CALC_EXP_FOB = ROUND(PESO_LÍQUIDO * EXP_PREÇO_UNIT,2),
      CALC_IMP_EMB = ROUND(PESO_LÍQUIDO * IMP_PREÇO_UNIT,2),
      CALC_IMP_FOB = ROUND(PESO_LÍQUIDO * IMP_PREÇO_UNIT,2),
      SYS_STATUS = DECODE(SYS_STATUS, 'I', '+', 'A', '/', 'X');

DROP TABLE TEMP_PED_DETS;
CREATE TABLE TEMP_PED_DETS TABLESPACE USERS
AS
SELECT EMB_REF T_EMB_REF,
  NVL(EXP_COND_VENDA,'') T_CALC_EXP_COND_VENDA, 
  NVL(IMP_COND_VENDA,'') T_CALC_IMP_COND_VENDA, 
  NVL(EXP_COND_PAG,'') T_CALC_EXP_COND_PAG, 
  NVL(IMP_COND_PAG,'') T_CALC_IMP_COND_PAG, 
  NVL(SUM(NOMINAL_PED_UNID),0) T_CALC_NOMINAL_PED,	
  NVL(SUM(QTD_PED_UNID),0) T_CALC_QTD_PED_UNID, 
  NVL(SUM(PESO_LÍQUIDO),0) T_CALC_PESO_LÍQUIDO,
  NVL(SUM(PESO_BRUTO),0) T_CALC_PESO_BRUTO, 
  NVL(SUM(QTD_VOL),0) T_CALC_QTD_VOL, 
  NVL(SUM(CALC_EXP_EMB),0) T_CALC_EXP_TOT_ITEM,
  NVL(SUM(CALC_IMP_EMB),0) T_CALC_IMP_TOT_ITEM,
  NVL(SUM(CALC_EXP_EMB),0) T_CALC_EXP_TOT_EMB, 
  NVL(SUM(CALC_IMP_EMB),0) T_CALC_IMP_TOT_EMB 
  FROM (SELECT E.REF EMB_REF, 
  FIRST_VALUE(P.EXP_COND_VENDA) OVER (PARTITION BY E.REF ORDER BY EMB_SEQ) EXP_COND_VENDA,
  FIRST_VALUE(P.IMP_COND_VENDA) OVER (PARTITION BY E.REF ORDER BY EMB_SEQ) IMP_COND_VENDA,
  FIRST_VALUE(P.FORNECEDOR_COND_RECEB) OVER (PARTITION BY E.REF ORDER BY EMB_SEQ) EXP_COND_PAG,
  FIRST_VALUE(P.EXP_COND_RECEB) OVER (PARTITION BY E.REF ORDER BY EMB_SEQ) IMP_COND_PAG,
  FIRST_VALUE(PI.NOMINAL_PED_UNID) OVER (PARTITION BY E.REF ORDER BY EMB_SEQ) NOMINAL_PED_UNID,
  BLC.QTD_PED_UNID, BLC.PESO_LÍQUIDO, BLC.PESO_BRUTO, BLC.QTD_VOL, EXP_PREÇO_UNIT, IMP_PREÇO_UNIT,
  CALC_EXP_EMB, CALC_IMP_EMB
  FROM CXRJ.EMB E, CXRJ.BL_CARGA BLC, CXRJ.PED P, CXRJ.PED_ITEM PI WHERE 
  E.REF = BLC.EMB_REF (+) AND BLC.PED_REF = P.REF (+) AND BLC.PED_REF = PI.PED_REF (+) AND BLC.PED_ITEM = PI.ITEM (+)) GROUP BY
  EMB_REF, EXP_COND_VENDA, IMP_COND_VENDA, EXP_COND_PAG, 
  IMP_COND_PAG;

ALTER TABLE TEMP_PED_DETS ADD CONSTRAINT ID_TEMP_PED_DETS PRIMARY KEY (T_EMB_REF);

UPDATE
	(SELECT E.*, T.* FROM EMB E, TEMP_PED_DETS T
	WHERE REF = T_EMB_REF)
SET
	CALC_QTD_PED_UNID = T_CALC_QTD_PED_UNID,
	CALC_PESO_LÍQUIDO = T_CALC_PESO_LÍQUIDO,
	CALC_PESO_BRUTO = T_CALC_PESO_BRUTO,
	CALC_QTD_VOL = T_CALC_QTD_VOL,
	CALC_EXP_TOT_ITEM = T_CALC_EXP_TOT_ITEM,
	CALC_IMP_TOT_ITEM = T_CALC_IMP_TOT_ITEM,
	CALC_EXP_TOT_EMB = T_CALC_EXP_TOT_EMB,
	CALC_IMP_TOT_EMB = T_CALC_IMP_TOT_EMB,
	CALC_EXP_COND_VENDA = T_CALC_EXP_COND_VENDA,
	CALC_IMP_COND_VENDA = T_CALC_IMP_COND_VENDA,
	CALC_EXP_COND_PAG = T_CALC_EXP_COND_PAG,
	CALC_IMP_COND_PAG = T_CALC_IMP_COND_PAG,
	CALC_NOMINAL_PED = T_CALC_NOMINAL_PED,
        CALC_PEND = 1,
	SYS_STATUS = DECODE(SYS_STATUS, 'I', '+', 'A', '/', 'X');

DROP TABLE TEMP_PED_DETS;
ALTER TRIGGER BEF_BL_CARGA_CALC ENABLE;
ALTER TRIGGER BEF_EMB_CALC ENABLE;
