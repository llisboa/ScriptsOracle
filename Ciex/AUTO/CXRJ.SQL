-------------------------------------------------------------------------------------
-- CRIAÇÃO DE SCRIPT PARA GERAR ESTRUTURA BÁSICA CXRJ
-------------------------------------------------------------------------------------
ALTER TABLESPACE T_CXRJ_DAT OFFLINE;
DROP TABLESPACE T_CXRJ_DAT INCLUDING CONTENTS;

CREATE TABLESPACE T_CXRJ_DAT DATAFILE 'D:\ORACLE\ORADATA\CXRJ\CIEX.DBF' SIZE 100M REUSE
AUTOEXTEND ON NEXT 50M MAXSIZE UNLIMITED EXTENT MANAGEMENT LOCAL;

CREATE TABLE CXRJ.ANEXO (
             NOME VARCHAR2(50),
             SUB_CONTA NUMBER,
             SUB_CONTA_REL NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.ANEXO ADD CONSTRAINT ID_ANEXO
PRIMARY KEY (NOME);

CREATE TABLE CXRJ.BL (
             VIAGEM_REF VARCHAR2 (13),
             SEQ NUMBER (5,0),
             BL_NUM VARCHAR2 (30),
             BL_DATA DATE,
             EMB_REF VARCHAR2 (13),
             MSG VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.BL ADD CONSTRAINT ID_BL
PRIMARY KEY (VIAGEM_REF, SEQ);

CREATE TABLE CXRJ.BL_CARGA (
             PED_REF VARCHAR2 (13),
             PED_ITEM NUMBER (5,0),
             VIAGEM_REF VARCHAR2 (13),
             BL_SEQ NUMBER (5,0),
             FECH_REF VARCHAR2 (13),
             QTD_PED_UNID NUMBER,
             QTD_VOL NUMBER (10,0),
             PESO_LÍQUIDO NUMBER,
             PESO_BRUTO NUMBER,
             EMB_DATA DATE,
             EMB_REF VARCHAR2 (13),
             EMB_SEQ NUMBER,
             FAMÍLIA_GENÉRICA NUMBER (5,0),
             FAMÍLIA NUMBER (5,0),
             DESCR          VARCHAR2 (255),
             EMBALAGEM VARCHAR2 (30),
             NCM VARCHAR2 (20),
             NALADI VARCHAR2 (20),
             EXP_PREÇO_UNIT NUMBER,
             IMP_PREÇO_UNIT NUMBER,
             CALC_EXP_EMB NUMBER,
             CALC_EXP_FOB NUMBER,
             CALC_IMP_EMB NUMBER,
             CALC_IMP_FOB NUMBER,
             NOMINAL_PED_UNID NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.BL_CARGA ADD CONSTRAINT ID_BL_CARGA
PRIMARY KEY (PED_REF, PED_ITEM, VIAGEM_REF, BL_SEQ);

CREATE TABLE CXRJ.CARTA (
             REF VARCHAR2 (13),
             EMPRESA VARCHAR2 (30),
             IDIOMA VARCHAR2 (3),
             DOC_DATA DATE,
             CIA VARCHAR2 (30),
             CONTATO VARCHAR2 (50),
             CIA_SUB VARCHAR2 (30),
             CONTATO_SUB VARCHAR2 (50),
             ASSUNTO VARCHAR2 (3000),
             TEXTO VARCHAR2 (4000),
             EMISSÃO_DATA DATE,
             COM_CÓPIA VARCHAR2 (3000),
             USUÁRIO VARCHAR2 (20),
             SUPERVISOR VARCHAR2 (20),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.CARTA ADD CONSTRAINT ID_CARTA
PRIMARY KEY (REF);

CREATE TABLE CXRJ.CARTA_CRÉDITO (
             REF VARCHAR2 (13),
             REF_LC VARCHAR2 (50),
             DATA_EMISS DATE,
             MOEDA VARCHAR2 (20),
             VALOR NUMBER,
             PESO NUMBER,
             BCO_EMISSOR VARCHAR2 (50),
             BCO_NEGOCIADOR VARCHAR2 (50),
             BCO_AVISADOR VARCHAR2 (50),
             BCO_CONFIRMADOR VARCHAR2 (50),
             BCO_RECEBEDOR VARCHAR2 (50),
             VALIDADE_LC DATE,
             VALIDADE_EMB DATE,
             FORM_PAGAMENTO VARCHAR2 (100),
             TOLER_QTD VARCHAR2 (100),
             TOLER_VALOR VARCHAR2 (100),
             APRESENT_DOC VARCHAR2 (100),
             UNID_PESO VARCHAR2 (10),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.CARTA_CRÉDITO ADD CONSTRAINT ID_CARTA_CRÉDITO
PRIMARY KEY (REF);

CREATE TABLE CXRJ.CARTA_FECH (
             CARTA_REF VARCHAR2 (13),
             FECH_REF VARCHAR2 (13),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.CARTA_FECH ADD CONSTRAINT ID_CARTA_FECH
PRIMARY KEY (CARTA_REF, FECH_REF);

CREATE TABLE CXRJ.CIA (
             LOGO BLOB,
             LOGOTIPO BLOB,
             COD VARCHAR2 (30),
             CGC VARCHAR2 (18),
             NOME VARCHAR2 (255),
             ENDEREÇO VARCHAR2 (255),
             BAIRRO VARCHAR2 (60),
             CIDADE VARCHAR2 (60),
             ESTADO VARCHAR2 (30),
             PAÍS VARCHAR2 (30),
             CEP VARCHAR2 (15),
             CAIXA_POSTAL VARCHAR2 (30),
             TELEFONE VARCHAR2 (255),
             FAX VARCHAR2 (255),
             TELEX VARCHAR2 (200),
             E_MAIL VARCHAR2 (60),
             F_COD VARCHAR2 (30),
             MARCAÇÃO VARCHAR2 (3000),
             OBS VARCHAR2 (3000),
             LOCAL_RESULT VARCHAR2 (8),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.CIA ADD CONSTRAINT ID_CIA
PRIMARY KEY (COD);

CREATE TABLE CXRJ.CIA_CONTATO (
             CIA_COD VARCHAR2 (30),
             CONTATO_NOME VARCHAR2 (50),
             TELEFONE VARCHAR2 (3000),
             FUNÇÃO VARCHAR2 (30),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.CIA_CONTATO ADD CONSTRAINT ID_CIA_CONTATO
PRIMARY KEY (CIA_COD, CONTATO_NOME);

CREATE TABLE CXRJ.CIA_RAMO_ATIVIDADE (
             CIA_COD VARCHAR2 (30),
             RAMO_ATIVIDADE VARCHAR2 (20),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.CIA_RAMO_ATIVIDADE ADD CONSTRAINT ID_CIA_RAMO_ATIVIDADE
PRIMARY KEY (CIA_COD, RAMO_ATIVIDADE);

CREATE TABLE CXRJ.COND_PAG (
             COD VARCHAR2 (10),
             DESCR VARCHAR2 (3000),
             PERÍODO NUMBER (5,0),
             OBS VARCHAR2 (3000),
             FIN_COND VARCHAR2 (20),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.COND_PAG ADD CONSTRAINT ID_COND_PAG
PRIMARY KEY (COD);

CREATE TABLE CXRJ.CONFIRM_VENDA (
             REF VARCHAR2 (13),
             SEQ NUMBER (5,0),
             EMISSÃO_DATA DATE,
             EMISSOR VARCHAR2 (3000),
             PED_REF VARCHAR2 (13),
             OUTRA_REF VARCHAR2 (3000),
             COMPRADOR VARCHAR2 (30),
             USUÁRIO_FINAL VARCHAR2 (30),
             DESTINATÁRIO VARCHAR2 (3000),
             ENTREGA VARCHAR2 (250),
             CARGA_PORTO VARCHAR2 (30),
             IDIOMA VARCHAR2 (3),
             DIMENSÃO VARCHAR2 (5),
             PREÇO_DETALHE VARCHAR2 (3000),
             ESPECIFICAÇÃO VARCHAR2 (3000),
             EMBALAGEM VARCHAR2 (3000),
             SEGURO VARCHAR2 (3000),
             PAG VARCHAR2 (3000),
             OBS VARCHAR2 (4000),
             OBS_TERMOS VARCHAR2 (3000),
             PRODUTOR VARCHAR2 (30),
             DESCARGA_PORTO VARCHAR2 (30),
             ASSINATURA VARCHAR2 (50),
             DT_REVISÃO VARCHAR2 (30),
             EMPRESA_REL VARCHAR2(100),
             MOEDA VARCHAR2 (20),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.CONFIRM_VENDA ADD CONSTRAINT ID_CONFIRM_VENDA
PRIMARY KEY (REF, SEQ);

CREATE TABLE CXRJ.CONFIRM_VENDA_ITEM (
             CONFIRM_VENDA_REF VARCHAR2 (13),
             SEQ NUMBER (5,0),
             ITEM NUMBER (5,0),
             DESCR VARCHAR2 (3000),
             DIMENSÃO VARCHAR2 (3000),
             QTD NUMBER,
             UNID VARCHAR2 (10),
             PREÇO NUMBER,
             MOEDA VARCHAR2 (10),
             QUALIDADE VARCHAR2 (15),
             PREÇO_C NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.CONFIRM_VENDA_ITEM ADD CONSTRAINT ID_CONFIRM_VENDA_ITEM
PRIMARY KEY (CONFIRM_VENDA_REF, SEQ, ITEM);

CREATE TABLE CXRJ.CONTA_CORRENTE (
             COD VARCHAR2 (30),
             CONTA_CORRENTE VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.CONTA_CORRENTE ADD CONSTRAINT ID_CONTA_CORRENTE
PRIMARY KEY (COD);

CREATE TABLE CXRJ.COSIPA_FOLHA_1 (
             APLAIN_OBS2 VARCHAR2 (37),
             DIAM_INT1 VARCHAR2 (30),
             APLAIN_PERC1 VARCHAR2 (10),
             APLAIN_PERC2 VARCHAR2 (10),
             APLAIN_PERC3 VARCHAR2 (10),
             ITEM_EXT_1 VARCHAR2 (15),
             LARGURA2 VARCHAR2 (50),
             ITEM_INT_2 VARCHAR2 (15),
             ITEM_INT_1 VARCHAR2 (15),
             DIAM_EXT2 VARCHAR2 (30),
             DIAM_EXT1 VARCHAR2 (30),
             ITEM_EXT_2 VARCHAR2 (15),
             DIAM_INT2 VARCHAR2 (30),
             ESPESS_OBS1 VARCHAR2 (37),
             LARGURA1 VARCHAR2 (50),
             COMPRIMENTO2 VARCHAR2 (45),
             COMPRIMENTO1 VARCHAR2 (45),
             ESPESS_OBS2 VARCHAR2 (37),
             ESPESS_PERC3 VARCHAR2 (10),
             ESPESS_PERC2 VARCHAR2 (10),
             ESPESS_PERC1 VARCHAR2 (10),
             ESPESS_OBS3 VARCHAR2 (37),
             APLAIN_OBS3 VARCHAR2 (37),
             APLAIN_OBS1 VARCHAR2 (37),
             ORD_REF VARCHAR2 (13),
             ITEM NUMBER (5,0),
             QUANTID VARCHAR2 (50),
             YR_REF VARCHAR2 (50),
             MARCA_EMB_VOL VARCHAR2 (25),
             COR_MARCA VARCHAR2 (50),
             COR_MARCA1 VARCHAR2 (50),
             COR_MARCA2 VARCHAR2 (50),
             COR_MARCA3 VARCHAR2 (50),
             MARGEM FLOAT,
             QUAL_NORMA VARCHAR2 (132),
             QUAL_OBS VARCHAR2 (168),
             SUPERFÍCIE FLOAT,
             TRAT_TERMICO VARCHAR2 (50),
             ULTRA_SOM VARCHAR2 (30),
             RUGOSIDADE VARCHAR2 (20),
             LUBRIFICADO NUMBER (5,0),
             LUBRIFICADO_OBS VARCHAR2 (50),
             APLICAÇÃO VARCHAR2 (100),
             SOLDA VARCHAR2 (50),
             DUREZA VARCHAR2 (50),
             RABO_PEIXE VARCHAR2 (100),
             TELESCOPICIDADE VARCHAR2 (100),
             ESPESS_NOMINAL VARCHAR2 (50),
             OUTRA_TOLER VARCHAR2 (40),
             IMP VARCHAR2 (50),
             OBS VARCHAR2 (255),
             ESPESS_MAX_MIN NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.COSIPA_FOLHA_1 ADD CONSTRAINT ID_COSIPA_FOLHA_1
PRIMARY KEY (ORD_REF, ITEM);

CREATE TABLE CXRJ.COSIPA_FOLHA_2 (
             ORD_REF VARCHAR2 (13),
             FOLHA NUMBER (5,0),
             ITEM NUMBER (5,0),
             PED VARCHAR2 (30),
             NEG VARCHAR2 (30),
             LOT VARCHAR2 (30),
             PROD VARCHAR2 (30),
             ESPESSURA VARCHAR2 (30),
             LARGURA VARCHAR2 (30),
             COMPRIMENTO VARCHAR2 (30),
             MT NUMBER (5,0),
             CWT_MIN VARCHAR2 (30),
             CWT_MAX VARCHAR2 (30),
             TOLER_MAX VARCHAR2 (30),
             TOLER_MIN VARCHAR2 (30),
             PREÇO FLOAT,
             OBS VARCHAR2 (3000),
             PECAS NUMBER (5,0),
             ESPESS_MM FLOAT,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.COSIPA_FOLHA_2 ADD CONSTRAINT ID_COSIPA_FOLHA_2
PRIMARY KEY (ORD_REF, FOLHA, ITEM);

CREATE TABLE CXRJ.COSIPA_FOLHA_2_PAG (
             ORD_REF VARCHAR2 (13),
             FOLHA NUMBER (5,0),
             UNIDADE NUMBER (5,0),
             MOEDA NUMBER (2,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.COSIPA_FOLHA_2_PAG ADD CONSTRAINT ID_COSIPA_FOLHA_2_PAG
PRIMARY KEY (ORD_REF, FOLHA);

CREATE TABLE CXRJ.COSIPA_NEGOCIAÇÃO (
             REF VARCHAR2 (13),
             REF_EXT VARCHAR2 (3),
             DATA_ORD DATE,
             ALTERA VARCHAR2 (2),
             MÊS_NEG VARCHAR2 (20),
             MÊS_EMB DATE,
             AGENTE VARCHAR2 (50),
             PRODUTO VARCHAR2 (30),
             TON VARCHAR2 (15),
             PAÍS_DESTINO VARCHAR2 (30),
             PORTO_DESTINO VARCHAR2 (30),
             IMP VARCHAR2 (65),
             OUTRO_DOC VARCHAR2 (60),
             PEÇAS NUMBER (5,0),
             TRAT_TÉRMICO NUMBER (5,0),
             TOLER_PROD_LOT_MAX FLOAT,
             TOLER_PROD_LOT_MIN FLOAT,
             COND_PAG VARCHAR2 (30),
             TERMO_ENTREGA VARCHAR2 (30),
             PREÇO VARCHAR2 (30),
             COMISS_AGENTE VARCHAR2 (255),
             OBS_GERAL VARCHAR2 (255),
             INSP_CLASS NUMBER (5,0),
             FATURA_LÂMINA NUMBER (5,0),
             FATURA_OUTRO NUMBER (5,0),
             EXTERNAL_SURVEY_TYPE VARCHAR2 (50),
             EXTERNAL_SURVEYOR VARCHAR2 (50),
             SURVEY_SIGN_CERTIF VARCHAR2 (50),
             CLASS_ORG VARCHAR2 (50),
             END_USER VARCHAR2 (65),
             HRP VARCHAR2 (6),
             HRC VARCHAR2 (6),
             CRC VARCHAR2 (6),
             PREDAYS VARCHAR2 (2),
             POSDAYS VARCHAR2 (15),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.COSIPA_NEGOCIAÇÃO ADD CONSTRAINT ID_COSIPA_NEGOCIAÇÃO
PRIMARY KEY (REF);

CREATE TABLE CXRJ.DEPTO (
             COD VARCHAR2 (10),
             NOME VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DEPTO ADD CONSTRAINT ID_DEPTO
PRIMARY KEY (COD);

CREATE TABLE CXRJ.DESPESA (
             DESPESA VARCHAR2(150)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DESPESA ADD CONSTRAINT ID_DESPESA
PRIMARY KEY (DESPESA);

CREATE TABLE CXRJ.DESPESA_PADRAO (
             EMPRESA VARCHAR2(30),
             SEQ NUMBER,
             DESPESA VARCHAR2(150),
             EMP NUMBER(5),
             REL NUMBER(5)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DESPESA_PADRAO ADD CONSTRAINT ID_DESPESA_PADRAO
PRIMARY KEY (EMPRESA, SEQ);

CREATE TABLE CXRJ.DIVISÃO (
             ESCRITÓRIO VARCHAR2 (2),
             DIVISÃO VARCHAR2 (1),
             DESCR VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DIVISÃO ADD CONSTRAINT ID_DIVISÃO
PRIMARY KEY (ESCRITÓRIO, DIVISÃO);

CREATE TABLE CXRJ.DIVISÃO_PRODUTO (
             ESCRITÓRIO VARCHAR2 (2),
             DIVISÃO VARCHAR2 (1),
             PROD VARCHAR2 (30),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DIVISÃO_PRODUTO ADD CONSTRAINT ID_DIVISÃO_PRODUTO
PRIMARY KEY (ESCRITÓRIO, DIVISÃO, PROD);

CREATE TABLE CXRJ.DIVISÃO_TIPO_REF (
             ESCRITÓRIO VARCHAR2 (2),
             DIVISÃO VARCHAR2 (1),
             TIPO_REF VARCHAR2 (4),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DIVISÃO_TIPO_REF ADD CONSTRAINT ID_DIVISÃO_TIPO_REF
PRIMARY KEY (ESCRITÓRIO, DIVISÃO, TIPO_REF);

CREATE TABLE CXRJ.DOC (
             COD VARCHAR2 (25),
             NOME VARCHAR2 (3000),
             OBJETO_VINCULADO VARCHAR2 (50),
             FORMULÁRIO_PARAM VARCHAR2 (20),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC ADD CONSTRAINT ID_DOC
PRIMARY KEY (COD);

CREATE TABLE CXRJ.DOC_ALADI (
             DOC NUMBER (10,0),
             IMP_PAÍS VARCHAR2 (3000),
             REF_CIEX VARCHAR2 (3000),
             DECLARAÇÃO VARCHAR2 (3000),
             DATA_DOC VARCHAR2 (3000),
             OBS VARCHAR2 (3000),
             UNID_PESO VARCHAR2 (3000),
             IDIOMA VARCHAR2 (3000),
             MENSAGEM VARCHAR2 (3000),
             EMB_REF VARCHAR2 (3000),
             EMB_DOC_SEQ NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_ALADI ADD CONSTRAINT ID_DOC_ALADI
PRIMARY KEY (DOC);

CREATE TABLE CXRJ.DOC_ALADI_DET (
             DOC_SEQ NUMBER (10,0),
             SEQ_ITEM NUMBER (5,0),
             ORDEM NUMBER (5,0),
             NALADI VARCHAR2 (3000),
             FAMÍLIA VARCHAR2 (3000),
             VOLUME NUMBER (10,0),
             EMBALAGEM VARCHAR2 (3000),
             PESO_LÍQUIDO NUMBER,
             PESO_BRUTO NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_ALADI_DET ADD CONSTRAINT ID_DOC_ALADI_DET
PRIMARY KEY (DOC_SEQ, SEQ_ITEM);

CREATE TABLE CXRJ.DOC_ALADI_NORMA (
             DOC_SEQ NUMBER (10,0),
             SEQ_NORMA NUMBER (5,0),
             NORMA VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_ALADI_NORMA ADD CONSTRAINT ID_DOC_ALADI_NORMA
PRIMARY KEY (DOC_SEQ, SEQ_NORMA);

CREATE TABLE CXRJ.DOC_BORDERÔ_I (
             DOC NUMBER (10,0),
             ORIGEM_CIA_COD VARCHAR2 (3000),
             ORIGEM_LOGO_NOME VARCHAR2 (3000),
             ORIGEM_NOME VARCHAR2 (3000),
             ORIGEM_ENDEREÇO VARCHAR2 (3000),
             ORIGEM_PAÍS VARCHAR2 (3000),
             ORIGEM_CONTATO VARCHAR2 (3000),
             ASSINATURA VARCHAR2 (3000),
             DESTINO_CIA_COD VARCHAR2 (3000),
             DESTINO_NOME VARCHAR2 (3000),
             DESTINO_ENDEREÇO VARCHAR2 (3000),
             DESTINO_PAÍS VARCHAR2 (3000),
             DESTINO_CONTATO VARCHAR2 (3000),
             TÍTULO VARCHAR2 (3000),
             DATA_DOC VARCHAR2 (3000),
             REF_CIEX VARCHAR2 (3000),
             DESTINO_REF VARCHAR2 (3000),
             MOEDA VARCHAR2 (3000),
             VALOR NUMBER,
             SACADO VARCHAR2 (3000),
             SACADO_ENDEREÇO VARCHAR2 (3000),
             SACADO_PAÍS VARCHAR2 (3000),
             COMISSÃO VARCHAR2 (3000),
             INSTRUÇÕES VARCHAR2 (3000),
             DOCUMENTO VARCHAR2 (3000),
             IDIOMA VARCHAR2 (3000),
             EMB_REF VARCHAR2 (3000),
             EMB_DOC_SEQ NUMBER (5,0)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_BORDERÔ_I ADD CONSTRAINT ID_DOC_BORDERÔ_I
PRIMARY KEY (DOC);

CREATE TABLE CXRJ.DOC_BORDERÔ_P (
             DOC NUMBER (10,0),
             ORIGEM_CIA_COD VARCHAR2 (3000),
             ORIGEM_LOGO_NOME VARCHAR2 (3000),
             ORIGEM_NOME VARCHAR2 (3000),
             ORIGEM_ENDEREÇO VARCHAR2 (3000),
             ORIGEM_PAÍS VARCHAR2 (3000),
             ORIGEM_CONTATO VARCHAR2 (3000),
             ASSINATURA VARCHAR2 (3000),
             DESTINO_CIA_COD VARCHAR2 (3000),
             DESTINO_NOME VARCHAR2 (3000),
             DESTINO_ENDEREÇO VARCHAR2 (3000),
             DESTINO_PAÍS VARCHAR2 (3000),
             DESTINO_CONTATO VARCHAR2 (3000),
             TÍTULO VARCHAR2 (3000),
             DATA_DOC VARCHAR2 (3000),
             REF_CIEX VARCHAR2 (3000),
             DESTINO_REF VARCHAR2 (3000),
             MOEDA VARCHAR2 (3000),
             VALOR NUMBER,
             SACADO VARCHAR2 (3000),
             SACADO_ENDEREÇO VARCHAR2 (3000),
             SACADO_PAÍS VARCHAR2 (3000),
             COMISSÃO VARCHAR2 (3000),
             INSTRUÇÕES VARCHAR2 (3000),
             DOCUMENTO VARCHAR2 (3000),
             IDIOMA VARCHAR2 (3000),
             EMB_REF VARCHAR2 (3000),
             EMB_DOC_SEQ NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_BORDERÔ_P ADD CONSTRAINT ID_DOC_BORDERÔ_P
PRIMARY KEY (DOC);

CREATE TABLE CXRJ.DOC_CÂMARA_COMÉRCIO (
             DOC NUMBER (10,0),
             COD_EXP VARCHAR2 (3000),
             EXPORTADOR VARCHAR2 (3000),
             EXP_ENDEREÇO VARCHAR2 (3000),
             EXP_PAÍS VARCHAR2 (3000),
             COD_IMP VARCHAR2 (3000),
             IMPORTADOR VARCHAR2 (3000),
             IMP_PAÍS VARCHAR2 (3000),
             REF_CIEX VARCHAR2 (3000),
             DATA_DOC VARCHAR2 (3000),
             TRANSPORTADOR VARCHAR2 (3000),
             CONSIGNATÁRIO VARCHAR2 (3000),
             UNID_PESO VARCHAR2 (3000),
             MOEDA VARCHAR2 (3000),
             TOTAL_DOC NUMBER,
             MENSAGEM VARCHAR2 (3000),
             IDIOMA VARCHAR2 (3000),
             EMB_REF VARCHAR2 (3000),
             EMB_DOC_SEQ NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_CÂMARA_COMÉRCIO ADD CONSTRAINT ID_DOC_CÂMARA_COMÉRCIO
PRIMARY KEY (DOC);

CREATE TABLE CXRJ.DOC_CÂMARA_COMÉRCIO_DET (
             DOC_SEQ NUMBER (10,0),
             SEQ_ITEM NUMBER (5,0),
             NCM VARCHAR2 (3000),
             FAMÍLIA VARCHAR2 (3000),
             VOLUME NUMBER (10,0),
             EMBALAGEM VARCHAR2 (3000),
             PESO_LÍQUIDO NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_CÂMARA_COMÉRCIO_DET ADD CONSTRAINT ID_DOC_CÂMARA_COMÉRCIO_DET
PRIMARY KEY (DOC_SEQ, SEQ_ITEM);

CREATE TABLE CXRJ.DOC_CARTA_I (
             DOC NUMBER (10,0),
             ORIGEM_CIA_COD VARCHAR2 (3000),
             ORIGEM_LOGO_NOME VARCHAR2 (3000),
             ORIGEM_NOME VARCHAR2 (3000),
             ORIGEM_ENDEREÇO VARCHAR2 (3000),
             ORIGEM_PAÍS VARCHAR2 (3000),
             ORIGEM_CONTATO VARCHAR2 (3000),
             ASSINATURA VARCHAR2 (3000),
             DESTINO_CIA_COD VARCHAR2 (3000),
             DESTINO_NOME VARCHAR2 (3000),
             DESTINO_ENDEREÇO VARCHAR2 (3000),
             DESTINO_PAÍS VARCHAR2 (3000),
             DESTINO_CONTATO VARCHAR2 (3000),
             TÍTULO VARCHAR2 (3000),
             DATA_DOC VARCHAR2 (3000),
             ASSUNTO VARCHAR2 (3000),
             MENSAGEM VARCHAR2 (3000),
             IDIOMA VARCHAR2 (3000),
             EMB_REF VARCHAR2 (3000),
             EMB_DOC_SEQ NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_CARTA_I ADD CONSTRAINT ID_DOC_CARTA_I
PRIMARY KEY (DOC);

CREATE TABLE CXRJ.DOC_CARTA_P (
             DOC NUMBER (10,0),
             ORIGEM_CIA_COD VARCHAR2 (3000),
             ORIGEM_LOGO_NOME VARCHAR2 (3000),
             ORIGEM_NOME VARCHAR2 (3000),
             ORIGEM_ENDEREÇO VARCHAR2 (3000),
             ORIGEM_PAÍS VARCHAR2 (3000),
             ORIGEM_CONTATO VARCHAR2 (3000),
             ASSINATURA VARCHAR2 (3000),
             DESTINO_CIA_COD VARCHAR2 (3000),
             DESTINO_NOME VARCHAR2 (3000),
             DESTINO_ENDEREÇO VARCHAR2 (3000),
             DESTINO_PAÍS VARCHAR2 (3000),
             DESTINO_CONTATO VARCHAR2 (3000),
             TÍTULO VARCHAR2 (3000),
             DATA_DOC VARCHAR2 (3000),
             ASSUNTO VARCHAR2 (3000),
             MENSAGEM VARCHAR2 (3000),
             IDIOMA VARCHAR2 (3000),
             EMB_REF VARCHAR2 (3000),
             EMB_DOC_SEQ NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_CARTA_P ADD CONSTRAINT ID_DOC_CARTA_P
PRIMARY KEY (DOC);

CREATE TABLE CXRJ.DOC_CONHECIMENT_ROD (
             DOC NUMBER (10,0),
             TÍTULO VARCHAR2 (3000),
             IDIOMA VARCHAR2 (3000),
             DATA_DOC VARCHAR2 (3000),
             ORIGEM_CIA_COD VARCHAR2 (3000),
             ORIGEM_LOGO_NOME VARCHAR2 (3000),
             ORIGEM_NOME VARCHAR2 (3000),
             ORIGEM_ENDEREÇO VARCHAR2 (3000),
             ORIGEM_PAÍS VARCHAR2 (3000),
             ORIGEM_CONTATO VARCHAR2 (3000),
             TRANSPORTADOR_CIA_COD VARCHAR2 (3000),
             TRANSPORTADOR VARCHAR2 (3000),
             TRANSPORTADOR_ENDEREÇO VARCHAR2 (3000),
             TRANSPORTADOR_PAÍS VARCHAR2 (3000),
             TRANSPORTADOR_CONTATO VARCHAR2 (3000),
             REMETENTE_CIA_COD VARCHAR2 (3000),
             REMETENTE VARCHAR2 (3000),
             REMETENTE_ENDEREÇO VARCHAR2 (3000),
             REMETENTE_PAÍS VARCHAR2 (3000),
             DESTINATÁRIO_CIA_COD VARCHAR2 (3000),
             DESTINATÁRIO VARCHAR2 (3000),
             DESTINATÁRIO_ENDEREÇO VARCHAR2 (3000),
             DESTINATÁRIO_PAÍS VARCHAR2 (3000),
             CONSIGNATÁRIO_CIA_COD VARCHAR2 (3000),
             CONSIGNATÁRIO VARCHAR2 (3000),
             CONSIGNATÁRIO_ENDEREÇO VARCHAR2 (3000),
             CONSIGNATÁRIO_PAÍS VARCHAR2 (3000),
             MOEDA VARCHAR2 (3000),
             REF_CIEX VARCHAR2 (3000),
             CARGA_EMBARQUE VARCHAR2 (3000),
             CARGA_DESCARGA VARCHAR2 (3000),
             MARCAÇÃO VARCHAR2 (3000),
             REF_RE VARCHAR2 (3000),
             MENSAGEM VARCHAR2 (3000),
             ASSINATURA VARCHAR2 (3000),
             UNID_PESO VARCHAR2 (3000),
             DESTINO_CIA_COD VARCHAR2 (3000),
             DESTINO_NOME VARCHAR2 (3000),
             DESTINO_ENDEREÇO VARCHAR2 (3000),
             DESTINO_CONTATO VARCHAR2 (3000),
             DESTINO_PAÍS VARCHAR2 (3000),
             VALOR NUMBER,
             EMB_REF VARCHAR2 (3000),
             EMB_DOC_SEQ NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_CONHECIMENT_ROD ADD CONSTRAINT ID_DOC_CONHECIMENT_ROD
PRIMARY KEY (DOC);

CREATE TABLE CXRJ.DOC_CONHECIMENT_ROD_DET (
             DOC_SEQ NUMBER (10,0),
             SEQ_ITEM NUMBER (5,0),
             FAMÍLIA VARCHAR2 (3000),
             VOLUME NUMBER (10,0),
             EMBALAGEM VARCHAR2 (3000),
             PESO_LÍQUIDO NUMBER,
             PESO_BRUTO NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_CONHECIMENT_ROD_DET ADD CONSTRAINT ID_DOC_CONHECIMENT_ROD_DET
PRIMARY KEY (DOC_SEQ, SEQ_ITEM);

CREATE TABLE CXRJ.DOC_FATURA (
             DOC NUMBER (10,0),
             ORIGEM_CIA_COD VARCHAR2 (3000),
             ORIGEM_LOGO_NOME VARCHAR2 (3000),
             ORIGEM_NOME VARCHAR2 (3000),
             ORIGEM_ENDEREÇO VARCHAR2 (3000),
             ORIGEM_PAÍS VARCHAR2 (3000),
             ORIGEM_CONTATO VARCHAR2 (3000),
             SACADO_CIA_COD VARCHAR2 (3000),
             SACADO_NOME VARCHAR2 (3000),
             SACADO_ENDEREÇO VARCHAR2 (3000),
             SACADO_PAÍS VARCHAR2 (3000),
             SACADO_CONTATO VARCHAR2 (3000),
             TÍTULO VARCHAR2 (3000),
             REF_CIEX VARCHAR2 (3000),
             DATA_DOC VARCHAR2 (3000),
             MOEDA VARCHAR2 (3000),
             FAT_VALOR NUMBER,
             CARGA_EMBARQUE VARCHAR2 (3000),
             CARGA_DESCARGA VARCHAR2 (3000),
             TRANSPORTADOR VARCHAR2 (3000),
             DESCR_BL VARCHAR2 (3000),
             COND_PAG VARCHAR2 (3000),
             UNID_PESO VARCHAR2 (3000),
             UNID_VALOR VARCHAR2 (3000),
             PESO_BRUTO NUMBER,
             MENSAGEM VARCHAR2 (3000),
             ASSINATURA VARCHAR2 (3000),
             IDIOMA VARCHAR2 (3000),
             DESCR_MERC VARCHAR2 (3000),
             EMB_REF VARCHAR2 (3000),
             EMB_DOC_SEQ NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_FATURA ADD CONSTRAINT ID_DOC_FATURA
PRIMARY KEY (DOC);

CREATE TABLE CXRJ.DOC_FATURA_DET (
             DOC_SEQ NUMBER (10,0),
             SEQ_ITEM NUMBER (5,0),
             FAMÍLIA VARCHAR2 (3000),
             PEDIDO VARCHAR2 (3000),
             ITEM NUMBER (5,0),
             MEDIDAS VARCHAR2 (3000),
             VOLUME NUMBER (10,0),
             EMBALAGEM VARCHAR2 (3000),
             PESO_LÍQUIDO NUMBER,
             PREÇO_UNIT NUMBER,
             TOTAL_UNIT NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_FATURA_DET ADD CONSTRAINT ID_DOC_FATURA_DET
PRIMARY KEY (DOC_SEQ, SEQ_ITEM);

CREATE TABLE CXRJ.DOC_FATURA_JUROS (
             DOC NUMBER (10,0),
             ORIGEM_CIA_COD VARCHAR2 (3000),
             ORIGEM_LOGO_NOME VARCHAR2 (3000),
             ORIGEM_NOME VARCHAR2 (3000),
             ORIGEM_ENDEREÇO VARCHAR2 (3000),
             ORIGEM_PAÍS VARCHAR2 (3000),
             ORIGEM_CONTATO VARCHAR2 (3000),
             SACADO_CIA_COD VARCHAR2 (3000),
             SACADO_NOME VARCHAR2 (3000),
             SACADO_ENDEREÇO VARCHAR2 (3000),
             SACADO_PAÍS VARCHAR2 (3000),
             SACADO_CONTATO VARCHAR2 (3000),
             TÍTULO VARCHAR2 (3000),
             REF_CIEX VARCHAR2 (3000),
             DATA_DOC VARCHAR2 (3000),
             MOEDA VARCHAR2 (3000),
             INTEREST NUMBER,
             TRANSPORTADOR VARCHAR2 (3000),
             DATE_SHIPMENT VARCHAR2 (3000),
             DESCR_BL VARCHAR2 (3000),
             COND_PAG VARCHAR2 (3000),
             DESCRIÇÃO VARCHAR2 (3000),
             DESCR_JUROS VARCHAR2 (3000),
             PRINCIPAL NUMBER,
             MENSAGEM VARCHAR2 (3000),
             IDIOMA VARCHAR2 (3000),
             ASSINATURA VARCHAR2 (3000),
             EMB_REF VARCHAR2 (3000),
             EMB_DOC_SEQ NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_FATURA_JUROS ADD CONSTRAINT ID_DOC_FATURA_JUROS
PRIMARY KEY (DOC);

CREATE TABLE CXRJ.DOC_FATURA_TOT (
             DOC_SEQ NUMBER (10,0),
             SEQ_LANC NUMBER (5,0),
             LANÇAMENTO VARCHAR2 (3000),
             VALOR NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_FATURA_TOT ADD CONSTRAINT ID_DOC_FATURA_TOT
PRIMARY KEY (DOC_SEQ, SEQ_LANC);

CREATE TABLE CXRJ.DOC_FECHAMENTO_CÂMB (
             DOC NUMBER (10,0),
             ORIGEM_CIA_COD VARCHAR2 (3000),
             ORIGEM_LOGO_NOME VARCHAR2 (3000),
             ORIGEM_NOME VARCHAR2 (3000),
             ORIGEM_ENDEREÇO VARCHAR2 (3000),
             ORIGEM_PAÍS VARCHAR2 (3000),
             ORIGEM_CONTATO VARCHAR2 (3000),
             ASSINATURA VARCHAR2 (3000),
             DESTINO_CIA_COD VARCHAR2 (3000),
             DESTINO_NOME VARCHAR2 (3000),
             DESTINO_ENDEREÇO VARCHAR2 (3000),
             DESTINO_PAÍS VARCHAR2 (3000),
             DESTINO_CONTATO VARCHAR2 (3000),
             TÍTULO VARCHAR2 (3000),
             REF_CIEX VARCHAR2 (3000),
             DATA_DOC VARCHAR2 (3000),
             REF_RE VARCHAR2 (3000),
             REF_CÂMBIO VARCHAR2 (3000),
             BANCO_CIA_COD VARCHAR2 (3000),
             BANCO_NOME VARCHAR2 (3000),
             BANCO_ENDEREÇO VARCHAR2 (3000),
             BANCO_PAÍS VARCHAR2 (3000),
             BANCO_CONTATO VARCHAR2 (3000),
             VENCIMENTO VARCHAR2 (3000),
             COND_PAG VARCHAR2 (3000),
             COMISSÃO VARCHAR2 (3000),
             DATA_BL VARCHAR2 (3000),
             MENSAGEM VARCHAR2 (3000),
             SACADO_CIA_COD VARCHAR2 (3000),
             SACADO_NOME VARCHAR2 (3000),
             SACADO_CONTATO VARCHAR2 (3000),
             SACADO_ENDEREÇO VARCHAR2 (3000),
             SACADO_PAÍS VARCHAR2 (3000),
             IDIOMA VARCHAR2 (3000),
             EMB_REF VARCHAR2 (3000),
             EMB_DOC_SEQ NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_FECHAMENTO_CÂMB ADD CONSTRAINT ID_DOC_FECHAMENTO_CÂMB
PRIMARY KEY (DOC);

CREATE TABLE CXRJ.DOC_FECHAMENTO_CÂMB_TOT (
             DOC_SEQ NUMBER (10,0),
             SEQ_LANC NUMBER (5,0),
             LANÇAMENTO VARCHAR2 (3000),
             VALOR NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_FECHAMENTO_CÂMB_TOT ADD CONSTRAINT ID_DOC_FECHAMENTO_CÂMB_TOT
PRIMARY KEY (DOC_SEQ, SEQ_LANC);

CREATE TABLE CXRJ.DOC_FIRJAN (
             DOC NUMBER (10,0),
             COD_EXP VARCHAR2 (3000),
             EXPORTADOR VARCHAR2 (3000),
             EXP_PAÍS VARCHAR2 (3000),
             COD_IMP VARCHAR2 (3000),
             IMPORTADOR VARCHAR2 (3000),
             IMP_PAÍS VARCHAR2 (3000),
             COD_CONSIGN VARCHAR2 (3000),
             CONSIGNATÁRIO VARCHAR2 (3000),
             CONSIGN_PAÍS VARCHAR2 (3000),
             REF_CIEX VARCHAR2 (3000),
             DATA_DOC VARCHAR2 (3000),
             UNID_PESO VARCHAR2 (3000),
             MENSAGEM VARCHAR2 (3000),
             IDIOMA VARCHAR2 (3000),
             EMB_REF VARCHAR2 (3000),
             EMB_DOC_SEQ NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_FIRJAN ADD CONSTRAINT ID_DOC_FIRJAN
PRIMARY KEY (DOC);

CREATE TABLE CXRJ.DOC_FIRJAN_DET (
             DOC_SEQ NUMBER (10,0),
             SEQ_ITEM NUMBER (5,0),
             NCM VARCHAR2 (3000),
             FAMÍLIA VARCHAR2 (3000),
             VOLUME NUMBER (10,0),
             EMBALAGEM VARCHAR2 (3000),
             PESO_LÍQUIDO NUMBER,
             PESO_BRUTO NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_FIRJAN_DET ADD CONSTRAINT ID_DOC_FIRJAN_DET
PRIMARY KEY (DOC_SEQ, SEQ_ITEM);

CREATE TABLE CXRJ.DOC_MERCOSUL (
             DOC NUMBER (10,0),
             COD_EXP VARCHAR2 (3000),
             EXPORTADOR VARCHAR2 (3000),
             EXP_ENDEREÇO VARCHAR2 (3000),
             EXP_PAÍS VARCHAR2 (3000),
             COD_IMP VARCHAR2 (3000),
             IMPORTADOR VARCHAR2 (3000),
             IMP_ENDEREÇO VARCHAR2 (3000),
             IMP_PAÍS VARCHAR2 (3000),
             COD_CONSIGN VARCHAR2 (3000),
             CONSIGNATÁRIO VARCHAR2 (3000),
             CONSIGN_PAÍS VARCHAR2 (3000),
             LOCAL_EMBARQUE VARCHAR2 (3000),
             DESTINO VARCHAR2 (3000),
             TRANSPORTE VARCHAR2 (3000),
             REF_CIEX VARCHAR2 (3000),
             DATA_DOC VARCHAR2 (3000),
             OBS VARCHAR2 (3000),
             DECLARAÇÃO VARCHAR2 (3000),
             DECLARAÇÃO_DATA VARCHAR2 (3000),
             IDIOMA VARCHAR2 (3000),
             UNID_PESO VARCHAR2 (3000),
             MENSAGEM VARCHAR2 (3000),
             MOEDA VARCHAR2 (3000),
             EMB_REF VARCHAR2 (3000),
             EMB_DOC_SEQ NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_MERCOSUL ADD CONSTRAINT ID_DOC_MERCOSUL
PRIMARY KEY (DOC);

CREATE TABLE CXRJ.DOC_MERCOSUL_BOLIV (
             DOC NUMBER (10,0),
             COD_EXP VARCHAR2 (3000),
             EXPORTADOR VARCHAR2 (3000),
             EXP_ENDEREÇO VARCHAR2 (3000),
             EXP_PAÍS VARCHAR2 (3000),
             COD_IMP VARCHAR2 (3000),
             IMPORTADOR VARCHAR2 (3000),
             IMP_ENDEREÇO VARCHAR2 (3000),
             IMP_PAÍS VARCHAR2 (3000),
             COD_CONSIGN VARCHAR2 (3000),
             CONSIGNATÁRIO VARCHAR2 (3000),
             CONSIGN_PAÍS VARCHAR2 (3000),
             LOCAL_EMBARQUE VARCHAR2 (3000),
             DESTINO VARCHAR2 (3000),
             TRANSPORTE VARCHAR2 (3000),
             REF_CIEX VARCHAR2 (3000),
             DATA_DOC VARCHAR2 (3000),
             OBS VARCHAR2 (3000),
             DECLARAÇÃO VARCHAR2 (3000),
             DECLARAÇÃO_DATA VARCHAR2 (3000),
             IDIOMA VARCHAR2 (3000),
             UNID_PESO VARCHAR2 (3000),
             MENSAGEM VARCHAR2 (3000),
             MOEDA VARCHAR2 (3000),
             EMB_REF VARCHAR2 (3000),
             EMB_DOC_SEQ NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_MERCOSUL_BOLIV ADD CONSTRAINT ID_DOC_MERCOSUL_BOLIV
PRIMARY KEY (DOC);

CREATE TABLE CXRJ.DOC_MERCOSUL_BOLIV_DET (
             DOC_SEQ NUMBER (10,0),
             SEQ_ITEM NUMBER (5,0),
             ORDEM NUMBER (5,0),
             NALADI VARCHAR2 (3000),
             FAMÍLIA VARCHAR2 (3000),
             DESCRIÇÃO VARCHAR2 (3000),
             VOLUME NUMBER (10,0),
             EMBALAGEM VARCHAR2 (3000),
             PESO_LÍQUIDO NUMBER,
             VALOR_FOB NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_MERCOSUL_BOLIV_DET ADD CONSTRAINT ID_DOC_MERCOSUL_BOLIV_DET
PRIMARY KEY (DOC_SEQ, SEQ_ITEM);

CREATE TABLE CXRJ.DOC_MERCOSUL_BOLIV_NORMA (
             DOC_SEQ NUMBER (10,0),
             SEQ_NORMA NUMBER (5,0),
             NORMA VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_MERCOSUL_BOLIV_NORMA ADD CONSTRAINT ID_DOC_MERCOSUL_BOLIV_NORMA
PRIMARY KEY (DOC_SEQ, SEQ_NORMA);

CREATE TABLE CXRJ.DOC_MERCOSUL_CHILE (
             DOC NUMBER (10,0),
             COD_EXP VARCHAR2 (3000),
             EXPORTADOR VARCHAR2 (3000),
             EXP_ENDEREÇO VARCHAR2 (3000),
             EXP_PAÍS VARCHAR2 (3000),
             COD_IMP VARCHAR2 (3000),
             IMPORTADOR VARCHAR2 (3000),
             IMP_ENDEREÇO VARCHAR2 (3000),
             IMP_PAÍS VARCHAR2 (3000),
             COD_CONSIGN VARCHAR2 (3000),
             CONSIGNATÁRIO VARCHAR2 (3000),
             CONSIGN_PAÍS VARCHAR2 (3000),
             LOCAL_EMBARQUE VARCHAR2 (3000),
             DESTINO VARCHAR2 (3000),
             TRANSPORTE VARCHAR2 (3000),
             REF_CIEX VARCHAR2 (3000),
             DATA_DOC VARCHAR2 (3000),
             OBS VARCHAR2 (3000),
             DECLARAÇÃO VARCHAR2 (3000),
             DECLARAÇÃO_DATA VARCHAR2 (3000),
             IDIOMA VARCHAR2 (3000),
             UNID_PESO VARCHAR2 (3000),
             MENSAGEM VARCHAR2 (3000),
             MOEDA VARCHAR2 (3000),
             EMB_REF VARCHAR2 (3000),
             EMB_DOC_SEQ NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_MERCOSUL_CHILE ADD CONSTRAINT ID_DOC_MERCOSUL_CHILE
PRIMARY KEY (DOC);

CREATE TABLE CXRJ.DOC_MERCOSUL_CHILE_DET (
             DOC_SEQ NUMBER (10,0),
             SEQ_ITEM NUMBER (5,0),
             ORDEM NUMBER (5,0),
             NALADI VARCHAR2 (3000),
             FAMÍLIA VARCHAR2 (3000),
             DESCRIÇÃO VARCHAR2 (3000),
             VOLUME NUMBER (10,0),
             EMBALAGEM VARCHAR2 (3000),
             PESO_LÍQUIDO NUMBER,
             VALOR_FOB NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_MERCOSUL_CHILE_DET ADD CONSTRAINT ID_DOC_MERCOSUL_CHILE_DET
PRIMARY KEY (DOC_SEQ, SEQ_ITEM);

CREATE TABLE CXRJ.DOC_MERCOSUL_CHILE_NORMA (
             DOC_SEQ NUMBER (10,0),
             SEQ_NORMA NUMBER (5,0),
             NORMA VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_MERCOSUL_CHILE_NORMA ADD CONSTRAINT ID_DOC_MERCOSUL_CHILE_NORMA
PRIMARY KEY (DOC_SEQ, SEQ_NORMA);

CREATE TABLE CXRJ.DOC_MERCOSUL_DET (
             DOC_SEQ NUMBER (10,0),
             SEQ_ITEM NUMBER (5,0),
             ORDEM NUMBER (5,0),
             NCM VARCHAR2 (3000),
             FAMÍLIA VARCHAR2 (3000),
             DESCRIÇÃO VARCHAR2 (3000),
             VOLUME NUMBER (10,0),
             EMBALAGEM VARCHAR2 (3000),
             PESO_LÍQUIDO NUMBER,
             VALOR_FOB NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_MERCOSUL_DET ADD CONSTRAINT ID_DOC_MERCOSUL_DET
PRIMARY KEY (DOC_SEQ, SEQ_ITEM);

CREATE TABLE CXRJ.DOC_MERCOSUL_NORMA (
             DOC_SEQ NUMBER (10,0),
             SEQ_NORMA NUMBER (5,0),
             NORMA VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_MERCOSUL_NORMA ADD CONSTRAINT ID_DOC_MERCOSUL_NORMA
PRIMARY KEY (DOC_SEQ, SEQ_NORMA);

CREATE TABLE CXRJ.DOC_PLIST_WEIG_CERT (
             DOC NUMBER (10,0),
             ORIGEM_CIA_COD VARCHAR2 (3000),
             ORIGEM_LOGO_NOME VARCHAR2 (3000),
             ORIGEM_NOME VARCHAR2 (3000),
             ORIGEM_ENDEREÇO VARCHAR2 (3000),
             ORIGEM_PAÍS VARCHAR2 (3000),
             ORIGEM_CONTATO VARCHAR2 (3000),
             SACADO_CIA_COD VARCHAR2 (3000),
             SACADO_NOME VARCHAR2 (3000),
             SACADO_ENDEREÇO VARCHAR2 (3000),
             SACADO_PAÍS VARCHAR2 (3000),
             SACADO_CONTATO VARCHAR2 (3000),
             TÍTULO VARCHAR2 (3000),
             REF_CIEX VARCHAR2 (3000),
             DATA_DOC VARCHAR2 (3000),
             CARGA_EMBARQUE VARCHAR2 (3000),
             CARGA_DESCARGA VARCHAR2 (3000),
             TRANSPORTADOR VARCHAR2 (3000),
             UNID_PESO VARCHAR2 (3000),
             MENSAGEM VARCHAR2 (3000),
             ASSINATURA VARCHAR2 (3000),
             IDIOMA VARCHAR2 (3000),
             DESCR_MERC VARCHAR2 (3000),
             EMB_REF VARCHAR2 (3000),
             EMB_DOC_SEQ NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_PLIST_WEIG_CERT ADD CONSTRAINT ID_DOC_PLIST_WEIG_CERT
PRIMARY KEY (DOC);

CREATE TABLE CXRJ.DOC_PLIST_WEIG_CERT_DET (
             DOC_SEQ NUMBER (10,0),
             SEQ_ITEM NUMBER (5,0),
             FAMÍLIA VARCHAR2 (3000),
             MEDIDAS VARCHAR2 (3000),
             VOLUME NUMBER (10,0),
             EMBALAGEM VARCHAR2 (3000),
             PESO_LÍQUIDO NUMBER,
             PESO_BRUTO NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_PLIST_WEIG_CERT_DET ADD CONSTRAINT ID_DOC_PLIST_WEIG_CERT_DET
PRIMARY KEY (DOC_SEQ, SEQ_ITEM);

CREATE TABLE CXRJ.DOC_SAQUE_2V (
             DOC NUMBER (10,0),
             ASSISTENTE VARCHAR2 (3000),
             BENEF_CIA_COD VARCHAR2 (3000),
             BENEF_NOME VARCHAR2 (3000),
             COND_PAG VARCHAR2 (3000),
             DATA_DOC VARCHAR2 (3000),
             MENSAGEM VARCHAR2 (3000),
             MOEDA VARCHAR2 (3000),
             ORIGEM_CIA_COD VARCHAR2 (3000),
             ORIGEM_ESTADO VARCHAR2 (3000),
             ORIGEM_NOME VARCHAR2 (3000),
             SACADO_CIA_COD VARCHAR2 (3000),
             SACADO_NOME VARCHAR2 (3000),
             SAQ_VALOR NUMBER,
             SUPERVISOR VARCHAR2 (3000),
             TÍTULO VARCHAR2 (3000),
             VALOR_EXT VARCHAR2 (3000),
             IDIOMA VARCHAR2 (3000),
             MENSAGEM_COMP VARCHAR2 (3000),
             EMB_REF VARCHAR2 (3000),
             EMB_DOC_SEQ NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_SAQUE_2V ADD CONSTRAINT ID_DOC_SAQUE_2V
PRIMARY KEY (DOC);

CREATE TABLE CXRJ.DOC_SAQUE_3V (
             DOC NUMBER (10,0),
             ASSISTENTE VARCHAR2 (3000),
             BENEF_CIA_COD VARCHAR2 (3000),
             BENEF_NOME VARCHAR2 (3000),
             COND_PAG VARCHAR2 (3000),
             DATA_DOC VARCHAR2 (3000),
             MENSAGEM VARCHAR2 (3000),
             MOEDA VARCHAR2 (3000),
             ORIGEM_CIA_COD VARCHAR2 (3000),
             ORIGEM_ESTADO VARCHAR2 (3000),
             ORIGEM_NOME VARCHAR2 (3000),
             SACADO_CIA_COD VARCHAR2 (3000),
             SACADO_NOME VARCHAR2 (3000),
             SAQ_VALOR NUMBER,
             SUPERVISOR VARCHAR2 (3000),
             TÍTULO VARCHAR2 (3000),
             VALOR_EXT VARCHAR2 (3000),
             IDIOMA VARCHAR2 (3000),
             MENSAGEM_COMP VARCHAR2 (3000),
             EMB_REF VARCHAR2 (3000),
             EMB_DOC_SEQ NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_SAQUE_3V ADD CONSTRAINT ID_DOC_SAQUE_3V
PRIMARY KEY (DOC);

CREATE TABLE CXRJ.DOC_SAQUE_JUROS_2V (
             DOC NUMBER (10,0),
             ASSISTENTE VARCHAR2 (3000),
             BENEF_CIA_COD VARCHAR2 (3000),
             BENEF_NOME VARCHAR2 (3000),
             COND_PAG VARCHAR2 (3000),
             DATA_DOC VARCHAR2 (3000),
             MENSAGEM VARCHAR2 (3000),
             MOEDA VARCHAR2 (3000),
             ORIGEM_CIA_COD VARCHAR2 (3000),
             ORIGEM_ESTADO VARCHAR2 (3000),
             ORIGEM_NOME VARCHAR2 (3000),
             SACADO_CIA_COD VARCHAR2 (3000),
             SACADO_NOME VARCHAR2 (3000),
             SAQ_VALOR NUMBER,
             SUPERVISOR VARCHAR2 (3000),
             TÍTULO VARCHAR2 (3000),
             VALOR_EXT VARCHAR2 (3000),
             IDIOMA VARCHAR2 (3000),
             MENSAGEM_COMP VARCHAR2 (3000),
             EMB_REF VARCHAR2 (3000),
             EMB_DOC_SEQ NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_SAQUE_JUROS_2V ADD CONSTRAINT ID_DOC_SAQUE_JUROS_2V
PRIMARY KEY (DOC);

CREATE TABLE CXRJ.DOC_SAQUE_JUROS_3V (
             DOC NUMBER (10,0),
             ASSISTENTE VARCHAR2 (3000),
             BENEF_CIA_COD VARCHAR2 (3000),
             BENEF_NOME VARCHAR2 (3000),
             COND_PAG VARCHAR2 (3000),
             DATA_DOC VARCHAR2 (3000),
             MENSAGEM VARCHAR2 (3000),
             MOEDA VARCHAR2 (3000),
             ORIGEM_CIA_COD VARCHAR2 (3000),
             ORIGEM_ESTADO VARCHAR2 (3000),
             ORIGEM_NOME VARCHAR2 (3000),
             SACADO_CIA_COD VARCHAR2 (3000),
             SACADO_NOME VARCHAR2 (3000),
             SAQ_VALOR NUMBER,
             SUPERVISOR VARCHAR2 (3000),
             TÍTULO VARCHAR2 (3000),
             VALOR_EXT VARCHAR2 (3000),
             IDIOMA VARCHAR2 (3000),
             MENSAGEM_COMP VARCHAR2 (3000),
             EMB_REF VARCHAR2 (3000),
             EMB_DOC_SEQ NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_SAQUE_JUROS_3V ADD CONSTRAINT ID_DOC_SAQUE_JUROS_3V
PRIMARY KEY (DOC);

CREATE TABLE CXRJ.DOC_TEMPLATE (
             NOME_TABELA VARCHAR2 (50),
             CAMPO VARCHAR2 (50),
             ORDEM NUMBER (5,0),
             ETIQ VARCHAR2 (50),
             TIPO VARCHAR2 (25),
             CORRESPOND_EXP VARCHAR2 (255),
             CORRESPOND_IMP VARCHAR2 (255),
             REL_ADICIONAL VARCHAR2 (255),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.DOC_TEMPLATE ADD CONSTRAINT ID_DOC_TEMPLATE
PRIMARY KEY (NOME_TABELA, CAMPO);

CREATE TABLE CXRJ.EMB (
             CALC_NOMINAL_PED NUMBER,
             REF VARCHAR2 (13),
             VIAGEM VARCHAR2 (13),
             FRETE_UNID VARCHAR2 (10),
             FRETE_VALOR NUMBER,
             FRETE_POR_MT NUMBER,
             FRETE_VALOR_POR_UNID NUMBER,
             FRETE_VALOR_TOTAL NUMBER,
             FRETE_COND VARCHAR2 (10),
             DATA_EMBARQUE DATE,
             DATA_EMISSÃO_DOC VARCHAR2 (30),
             CARGA_PORTO VARCHAR2 (3000),
             DESCARGA_PORTO VARCHAR2 (3000),
             TRANSPORTADOR VARCHAR2 (3000),
             MOEDA VARCHAR2 (20),
             IDIOMA VARCHAR2 (3),
             PESO_UNID VARCHAR2 (3000),
             PREÇO_UNITÁRIO_UNID VARCHAR2 (3000),
             PREÇO_UNID VARCHAR2 (3000),
             NEGOCIADOR VARCHAR2 (30),
             EMBARCADOR VARCHAR2 (3000),
             EMB_ENDEREÇO VARCHAR2 (3000),
             EMB_PAÍS VARCHAR2 (3000),
             EMB_COND_VENDA VARCHAR2 (3000),
             EMB_COND_PAG VARCHAR2 (3000),
             EMB_COMENTÁRIOS VARCHAR2 (3000),
             EXP VARCHAR2 (3000),
             EXP_ENDEREÇO VARCHAR2 (3000),
             EXP_PAÍS VARCHAR2 (3000),
             EXP_COND_VENDA VARCHAR2 (3000),
             EXP_COND_PAG VARCHAR2 (3000),
             EXP_COMENTÁRIOS VARCHAR2 (3000),
             EXP_LOGOTIPO VARCHAR2 (30),
             EXP_FAT VARCHAR2 (13),
             IMP VARCHAR2 (3000),
             IMP_ENDEREÇO VARCHAR2 (3000),
             IMP_PAÍS VARCHAR2 (3000),
             IMP_COND_VENDA VARCHAR2 (3000),
             IMP_COND_PAG VARCHAR2 (3000),
             IMP_COMENTÁRIOS VARCHAR2 (3000),
             IMP_LOGOTIPO VARCHAR2 (30),
             IMP_FAT VARCHAR2 (13),
             PAGADOR VARCHAR2 (3000),
             PAG_ENDEREÇO VARCHAR2 (3000),
             PAG_PAÍS VARCHAR2 (3000),
             CONSIGNATÁRIO VARCHAR2 (3000),
             CONSIGN_ENDEREÇO VARCHAR2 (3000),
             CONSIGN_PAÍS VARCHAR2 (3000),
             NOTIFICAR VARCHAR2 (3000),
             NOTIFICAR_ENDEREÇO VARCHAR2 (3000),
             NOTIFICAR_PAÍS VARCHAR2 (3000),
             NUM_BL_DESCR VARCHAR2 (3000),
             FAMÍLIA_GENÉRICA VARCHAR2 (3000),
             TIPO_DESCR_MERCADORIA VARCHAR2 (100),
             MARCAÇÃO VARCHAR2 (3000),
             TOTALIZAÇÃO_EMBALAGEM VARCHAR2 (20),
             CONFIG VARCHAR2 (4000),
             EMB_ACORDO DATE,
             VIA_TRANSPORTE VARCHAR2 (15),
             CARTA_CRED_REF VARCHAR2 (13),
             EMB_DATA VARCHAR2 (30),
             CARTA_CRÉDITO_BANCO_ABRIDOR VARCHAR2 (30),
             CARTA_CRÉDITO_REF VARCHAR2 (30),
             BANCO_AVISADOR VARCHAR2 (30),
             BANCO_CONFIRM VARCHAR2 (30),
             CALC_QTD_PED_UNID NUMBER,
             CALC_PESO_LÍQUIDO NUMBER,
             CALC_PESO_BRUTO NUMBER,
             CALC_QTD_VOL NUMBER (10,0),
             CALC_EXP_TOT_ITEM NUMBER,
             CALC_EXP_TOT_EMB NUMBER,
             CALC_EXP_COND_PAG VARCHAR2 (10),
             CALC_EXP_COND_VENDA VARCHAR2 (10),
             CALC_IMP_TOT_ITEM NUMBER,
             CALC_IMP_TOT_EMB NUMBER,
             CALC_IMP_COND_PAG VARCHAR2 (10),
             CALC_IMP_COND_VENDA VARCHAR2 (10),
             CALC_FRETE_TOTAL NUMBER,
             CALC_PEND NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.EMB ADD CONSTRAINT ID_EMB
PRIMARY KEY (REF);

CREATE TABLE CXRJ.EMB_CHECK_LIST (
             EMB_REF VARCHAR2 (13),
             CHECKLIST VARCHAR2 (13),
             CK_QTD_VALOR NUMBER (5,0),
             CK_DECLAR NUMBER (5,0),
             CK_CONFIRM NUMBER (5,0),
             CK_SUJEITA NUMBER (5,0),
             CK_CLASULA NUMBER (5,0),
             CK_PRAZO NUMBER (5,0),
             CK_EMB_PARCIAIS NUMBER (5,0),
             CK_TRANSBORDO NUMBER (5,0),
             CK_CONHECIMENTO NUMBER (5,0),
             CK_ASSINADO NUMBER (5,0),
             CK_END_CORRETO NUMBER (5,0),
             CK_DOC_TERCEIRO NUMBER (5,0),
             CK_CLAUSULA_DOC NUMBER (5,0),
             CE_PROIB_DATA NUMBER (5,0),
             CE_PROIB_EMISS NUMBER (5,0),
             CE_PROIB_SHORT NUMBER (5,0),
             CE_EXIG_DECL NUMBER (5,0),
             CE_ENDOSSO NUMBER (5,0),
             SQ_ENDOSSO NUMBER (5,0),
             SQ_MONTANT NUMBER (5,0),
             CK_CONSULADO NUMBER (5,0),
             OBS VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.EMB_CHECK_LIST ADD CONSTRAINT ID_EMB_CHECK_LIST
PRIMARY KEY (EMB_REF);

CREATE TABLE CXRJ.EMB_DOC_DESTINO (
             EMB_REF VARCHAR2 (13),
             SEQ NUMBER (5,0),
             CIA VARCHAR2 (30),
             ORIGINAL_NUM NUMBER (3,0),
             CÓPIA_NUM NUMBER (3,0),
             ORIGINAL_VISADA_NUM NUMBER (3,0),
             CÓPIA_VISADA_NUM NUMBER (3,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.EMB_DOC_DESTINO ADD CONSTRAINT ID_EMB_DOC_DESTINO
PRIMARY KEY (EMB_REF, SEQ, CIA);

CREATE TABLE CXRJ.EMB_DOC_REL (
             EMB_REF VARCHAR2 (13),
             DOC NUMBER (5,0),
             EMB_REL VARCHAR2 (13),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.EMB_DOC_REL ADD CONSTRAINT ID_EMB_DOC_REL
PRIMARY KEY (EMB_REF, DOC, EMB_REL);

CREATE TABLE CXRJ.EMB_F (
             PED_REF VARCHAR2 (13),
             SEQ NUMBER (5,0),
             FATURA VARCHAR2 (20),
             INV_DATA DATE,
             NAVIO VARCHAR2 (30),
             BL_DATA DATE,
             COMPETÊNCIA DATE,
             QUANTIDADE NUMBER,
             VALOR NUMBER,
             RESULT1 NUMBER,
             RESULT2 NUMBER,
             RESULT3 NUMBER,
             RESULT4 NUMBER,
             RESULT5 NUMBER,
             POSIÇÃO CHAR,
             OBSERVAÇÃO VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.EMB_F ADD CONSTRAINT ID_EMB_F
PRIMARY KEY (PED_REF, SEQ);

CREATE TABLE CXRJ.EMB_FAMÍLIA (
             EMB_REF VARCHAR2 (13),
             SEQ NUMBER (5,0),
             FAMÍLIA VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.EMB_FAMÍLIA ADD CONSTRAINT ID_EMB_FAMÍLIA
PRIMARY KEY (EMB_REF, SEQ);

CREATE TABLE CXRJ.EMB_FAMÍLIA_GENÉRICA (
             EMB_REF VARCHAR2 (13),
             SEQ NUMBER (5,0),
             FAMÍLIA VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.EMB_FAMÍLIA_GENÉRICA ADD CONSTRAINT ID_EMB_FAMÍLIA_GENÉRICA
PRIMARY KEY (EMB_REF, SEQ);

CREATE TABLE CXRJ.EMB_FILTRO (
             EMB_REF VARCHAR2 (13),
             SEQ NUMBER,
             PED_REF VARCHAR2 (13),
             ITEM NUMBER,
             FECH_REF VARCHAR2 (13),
             OV VARCHAR2 (20),
             NE_ITEM VARCHAR2 (20),
             PO VARCHAR2 (20),
             LOTE VARCHAR2 (20),
             TBN VARCHAR2 (20),
             P VARCHAR2 (20),
             FSE VARCHAR2 (20),
             BL_CODE VARCHAR2 (20),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.EMB_FILTRO ADD CONSTRAINT ID_EMB_FILTRO
PRIMARY KEY (EMB_REF, SEQ);

CREATE TABLE CXRJ.EMB_LANÇ (
             EMB_REF VARCHAR2 (13),
             SEQ NUMBER (5,0),
             LANÇ VARCHAR2 (20),
             VALOR NUMBER,
             VALOR_POR_MT NUMBER,
             TOTAL_PERCENT FLOAT,
             TOTAL_TIPO VARCHAR2 (10),
             EXP NUMBER (5,0),
             IMP NUMBER (5,0),
             UNID NUMBER (5,0),
             NA_FATURA NUMBER (5,0),
             BENEFICIÁRIO VARCHAR2 (30),
             COMISSÃO_MODALIDADE VARCHAR2 (1),
             INSTRUÇÃO_REMESSA VARCHAR2 (3000),
             EXP_CALC NUMBER,
             IMP_CALC NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.EMB_LANÇ ADD CONSTRAINT ID_EMB_LANÇ
PRIMARY KEY (EMB_REF, SEQ);

CREATE TABLE CXRJ.EMB_MENSAGEM (
             EMB_REF VARCHAR2 (13),
             SEQ NUMBER (5,0),
             MSG VARCHAR2 (3000),
             EXP NUMBER (5,0),
             IMP NUMBER (5,0),
             DOC_ALADI NUMBER (5,0),
             DOC_BORDERÔ_I NUMBER (5,0),
             DOC_BORDERÔ_P NUMBER (5,0),
             DOC_CÂMARA_COMÉRCIO NUMBER (5,0),
             DOC_CARTA_I NUMBER (5,0),
             DOC_CARTA_P NUMBER (5,0),
             DOC_CONHECIM_ROD NUMBER (5,0),
             DOC_FATURA NUMBER (5,0),
             DOC_FATURA_JUROS NUMBER (5,0),
             DOC_FECH_CAMBIO NUMBER (5,0),
             DOC_FIRJAN NUMBER (5,0),
             DOC_MERCOSUL NUMBER (5,0),
             DOC_MERCOSUL_BOLIVIA NUMBER (5,0),
             DOC_MERCOSUL_CHILE NUMBER (5,0),
             DOC_PLIST_WEIG_CERT NUMBER (5,0),
             DOC_SAQUE_JUR_2_VIAS NUMBER (5,0),
             DOC_SAQUE_JUR_3_VIAS NUMBER (5,0),
             DOC_SAQUE_2_VIAS NUMBER (5,0),
             DOC_SAQUE_3_VIAS NUMBER (5,0),
             DOC_ALADI_CERTIF_ORIGEM NUMBER (5,0),
             DOC_BL NUMBER (5,0),
             DOC_CÂM_COM_CERTIF_O NUMBER (5,0),
             DOC_CAPA NUMBER (5,0),
             DOC_CONHECIM_RODOVIÁRIO NUMBER (5,0),
             DOC_CHECK_LIST NUMBER (5,0),
             DOC_CARTA_DEOP_INGLÊS NUMBER (5,0),
             DOC_CARTA_DEOP_PORTUG NUMBER (5,0),
             DOC_FECHAM_CÂMBIO NUMBER (5,0),
             DOC_FIRJAN_CERTIF_ORIGEM NUMBER (5,0),
             DOC_FORM_A NUMBER (5,0),
             DOC_INSTR_PAG NUMBER (5,0),
             DOC_MERCOSUL_CERTIF_ORIGEM NUMBER (5,0),
             DOC_PACKING_LIST NUMBER (5,0),
             DOC_SAQUE NUMBER (5,0),
             DOC_WEIGHT_CERTIFICATE NUMBER (5,0),
             DOC_SAQUE_JUROS NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.EMB_MENSAGEM ADD CONSTRAINT ID_EMB_MENSAGEM
PRIMARY KEY (EMB_REF, SEQ);

CREATE TABLE CXRJ.EMB_RE (
             EMB_REF VARCHAR2 (13),
             RE VARCHAR2 (15),
             EMISSÃO_DATA DATE,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.EMB_RE ADD CONSTRAINT ID_EMB_RE
PRIMARY KEY (EMB_REF, RE);

CREATE TABLE CXRJ.EMB_SD (
             EMB_REF VARCHAR2 (13),
             SD VARCHAR2 (15),
             AVERBAÇÃO_DATA DATE,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.EMB_SD ADD CONSTRAINT ID_EMB_SD
PRIMARY KEY (EMB_REF, SD);

CREATE TABLE CXRJ.EMB_TOTALIZA (
             EMB_REF VARCHAR2 (13),
             SEQ NUMBER (5,0),
             LANÇ VARCHAR2 (20),
             EXP NUMBER (5,0),
             IMP NUMBER (5,0),
             EXP_DESCR VARCHAR2 (3000),
             IMP_DESCR VARCHAR2 (3000),
             EXP_CALC NUMBER,
             IMP_CALC NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.EMB_TOTALIZA ADD CONSTRAINT ID_EMB_TOTALIZA
PRIMARY KEY (EMB_REF, SEQ);

CREATE TABLE CXRJ.EMBALAGEM (
             COD VARCHAR2 (20),
             DESCR VARCHAR2 (3000),
             OBS VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.EMBALAGEM ADD CONSTRAINT ID_EMBALAGEM
PRIMARY KEY (COD);

CREATE TABLE CXRJ.EMPRESA (
             EMPRESA VARCHAR2(30),
             RELACIONADA VARCHAR2(30)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.EMPRESA ADD CONSTRAINT ID_EMPRESA
PRIMARY KEY (EMPRESA);

CREATE TABLE CXRJ.EMPRESA_APUR (
             EMPRESA VARCHAR2(30),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.EMPRESA_APUR ADD CONSTRAINT ID_EMPRESA_APUR
PRIMARY KEY (EMPRESA);

CREATE TABLE CXRJ.ESCRITÓRIO (
             ESCRITÓRIO VARCHAR2 (2),
             DESCR VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.ESCRITÓRIO ADD CONSTRAINT ID_ESCRITÓRIO
PRIMARY KEY (ESCRITÓRIO);

CREATE TABLE CXRJ.FATURA (
             REF VARCHAR2 (13),
             EMPRESA VARCHAR2 (30),
             DOC_DATA DATE,
             CIA VARCHAR2 (30),
             CONTATO VARCHAR2 (50),
             CIA_SUB VARCHAR2 (30),
             CONTATO_SUB VARCHAR2 (50),
             FECH_REF VARCHAR2 (13),
             BANCO_DETALHE VARCHAR2 (3000),
             ASSUNTO VARCHAR2 (3000),
             EMISSÃO_DATA DATE,
             USUÁRIO VARCHAR2 (20),
             SUPERVISOR VARCHAR2 (20),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.FATURA ADD CONSTRAINT ID_FATURA
PRIMARY KEY (REF);

CREATE TABLE CXRJ.FATURA_CONFIRM (
             REF VARCHAR2(13),
             SEQ NUMBER(5),
             TÍTULO VARCHAR2(100),
             NOME_CIA VARCHAR(45),
             LOGOTIPO BLOB,
             FATURA VARCHAR2(100),
             EMISSÃO_DATA VARCHAR2(35),
             EMISSOR VARCHAR2(3000),
             OUTRA_REF VARCHAR2(3000),
             PRODUTOR VARCHAR2(3000),
             COMPRADOR VARCHAR2(3000),
             USUÁRIO_FINAL VARCHAR2(3000),
             ENTREGA VARCHAR2(30),
             CARGA_PORTO VARCHAR2(30),
             DIMENSÃO VARCHAR2(20),
             ESPECIFICAÇÃO VARCHAR2(3000),
             PAG VARCHAR2(3000),
             PREÇO_DETALHE VARCHAR2(3000),
             DESCARGA_PORTO VARCHAR2(30),
             DESTINATÁRIO VARCHAR2(3000),
             ASSINATURA VARCHAR2(50),
             ETIQ_FATURA VARCHAR2(100),
             ETIQ_REFÊNCIAS VARCHAR2(100),
             ETIQ_COMPRADOR VARCHAR2(100),
             ETIQ_DATA VARCHAR2(100),
             ETIQ_PREV_EMB VARCHAR2(100),
             ETIQ_COND_PAG VARCHAR2(100),
             ETIQ_USU_FINAL VARCHAR2(100),
             ETIQ_ESPECIFICAÇÃO VARCHAR2(100),
             ETIQ_ORIGEM VARCHAR2(100),
             ETIQ_DESTINO VARCHAR2(100),
             ETIQ_EMBARQUE VARCHAR2(100),
             ETIQ_PAGINA VARCHAR2(100),
             ETIQ_DESCR VARCHAR2(100),
             ETIQ_QTD VARCHAR2(100),
             ETIQ_PREÇO_UNITÁRIO VARCHAR2(100),
             ETIQ_PREÇO_TOTAL VARCHAR2(100),
             ETIQ_PESO VARCHAR2(100),
             EMPRESA_REL VARCHAR2(100),
             ETIQ_ASSIN VARCHAR2(100),
             ETIQ_PREÇO_DET VARCHAR2(100),
             ETIQ_PRODUTOR VARCHAR2(100),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.FATURA_CONFIRM ADD CONSTRAINT ID_FATURA_CONFIRM
PRIMARY KEY (REF, SEQ);

CREATE TABLE CXRJ.FATURA_CONFIRM_ITEM (
             CONFIRM_VENDA_REF VARCHAR2(13),
             SEQ NUMBER(5),
             ITEM NUMBER(5),
             DESCR VARCHAR2(3000),
             DIMENSÃO VARCHAR2(3000),
             QTD FLOAT,
             UNID VARCHAR2(10),
             PESO_UNID VARCHAR2(50),
             PREÇO FLOAT,
             MOEDA VARCHAR2(15),
             PESO FLOAT,
             QUALIDADE VARCHAR2(15),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.FATURA_CONFIRM_ITEM ADD CONSTRAINT ID_FATURA_CONFIRM_ITEM
PRIMARY KEY (CONFIRM_VENDA_REF, SEQ, ITEM);

CREATE TABLE CXRJ.FATURA_CONFIRM_TOT (
             CONFIRM_FATURA_REF VARCHAR2 (13),
             CONFIRM_FATURA_SEQ number(5),
             DESCRIÇÃO VARCHAR2 (50),
             SEQ number(5),
             VALOR NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.FATURA_CONFIRM_TOT ADD CONSTRAINT ID_FATURA_CONFIRM_TOT
PRIMARY KEY (CONFIRM_FATURA_REF, CONFIRM_FATURA_SEQ, SEQ);

CREATE TABLE CXRJ.FAX (
             REF VARCHAR2 (13),
             USUÁRIO VARCHAR2 (20),
             MOMENTO_CRIA DATE,
             MOMENTO_ENVIA DATE,
             MOMENTO_CONFIRM DATE,
             PÁGINAS_ADICIONAIS NUMBER (3,0),
             DOC VARCHAR2 (50),
             DE VARCHAR2 (3000),
             ASSUNTO VARCHAR2 (3000),
             FAX_CORPO VARCHAR2 (4000),
             FAX_OBJ BLOB,
             COMENTÁRIO VARCHAR2 (3000),
             CANCEL NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.FAX ADD CONSTRAINT ID_FAX
PRIMARY KEY (REF);

CREATE TABLE CXRJ.FAX_CHAVE (
             FAX_REF VARCHAR2 (13),
             CHAVE VARCHAR2 (40),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.FAX_CHAVE ADD CONSTRAINT ID_FAX_CHAVE
PRIMARY KEY (FAX_REF, CHAVE);

CREATE TABLE CXRJ.FAX_DESTINO (
             FAX_REF VARCHAR2 (13),
             SEQ NUMBER (5,0),
             TIPO VARCHAR2 (3),
             CIA VARCHAR2 (30),
             CONTATO VARCHAR2 (50),
             CONTATO_2 VARCHAR2 (50),
             CONTATO_3 VARCHAR2 (50),
             DESCR VARCHAR2 (100),
             OBS VARCHAR2 (100),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.FAX_DESTINO ADD CONSTRAINT ID_FAX_DESTINO
PRIMARY KEY (FAX_REF, SEQ);

CREATE TABLE CXRJ.FECH (
             REF VARCHAR2 (13),
             FECH_DATA DATE,
             MOEDA VARCHAR2 (20),
             VIAGEM_REF VARCHAR2 (13),
             CARGA_PORTO_ESCALA NUMBER (5,0),
             DESCARGA_PORTO_ESCALA NUMBER (5,0),
             CONTRATANTE VARCHAR2 (30),
             CORRETOR VARCHAR2 (30),
             PROPRIETÁRIO VARCHAR2 (30),
             NEGOCIANTE VARCHAR2 (30),
             FRETE_DETALHE VARCHAR2 (10),
             FRETE_UNID VARCHAR2 (10),
             FRETE_VALOR NUMBER,
             FRETE_VALOR_POR_UNID NUMBER,
             FRETE_PAG_DETALHE VARCHAR2 (3000),
             COMISSÃO_FRETE NUMBER,
             COMISSÃO_BASE NUMBER,
             COMISSÃO_PERCENT FLOAT,
             CIA_PAGADORA VARCHAR2 (30),
             CARGA_AGENTE VARCHAR2 (30),
             CARGA_ESTIVA VARCHAR2 (30),
             CARGA_ESTIVA_CUSTO NUMBER,
             CARGA_DETALHE VARCHAR2 (3000),
             CARGA_OBS VARCHAR2 (3000),
             DESCARGA_AGENTE VARCHAR2 (30),
             DESCARGA_ESTIVA VARCHAR2 (30),
             DESCARGA_ESTIVA_CUSTO NUMBER,
             DESCARGA_DETALHE VARCHAR2 (3000),
             DESCARGA_OBS VARCHAR2 (3000),
             DETENÇÃO NUMBER,
             DEMORA NUMBER,
             OBS VARCHAR2 (3000),
             DESPACHANTE NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.FECH ADD CONSTRAINT ID_FECH
PRIMARY KEY (REF);

CREATE TABLE CXRJ.FECH_CARGA (
             FECH_REF VARCHAR2 (13),
             PED_REF VARCHAR2 (13),
             PED_ITEM NUMBER (5,0),
             QTD_PED_UNID NUMBER,
             QTD_FRETE_UNID NUMBER,
             QTD_TOTAL NUMBER (5,0),
             NOMEAÇÃO_DATA DATE,
             ACEITAÇÃO_FORNECEDOR_DATA DATE,
             CANCEL_DATA DATE,
             CANCEL_MOTIVO VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.FECH_CARGA ADD CONSTRAINT ID_FECH_CARGA
PRIMARY KEY (FECH_REF, PED_REF, PED_ITEM);

CREATE TABLE CXRJ.FECH_CONTATO (
             FECH_REF VARCHAR2 (13),
             CIA_COD VARCHAR2 (30),
             CONTATO_NOME VARCHAR2 (50),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.FECH_CONTATO ADD CONSTRAINT ID_FECH_CONTATO
PRIMARY KEY (FECH_REF, CIA_COD, CONTATO_NOME);

CREATE TABLE CXRJ.FECH_SUBSTITUÍDO (
             SUBSTITUÍDO VARCHAR2 (13),
             SUBSTITUTO VARCHAR2 (13),
             SUBSTITUIÇÃO_DATA DATE,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.FECH_SUBSTITUÍDO ADD CONSTRAINT ID_FECH_SUBSTITUÍDO
PRIMARY KEY (SUBSTITUÍDO, SUBSTITUTO);

CREATE TABLE CXRJ.FRETE (
             CARGA_PORTO VARCHAR2 (30),
             DESCARGA_PORTO VARCHAR2 (30),
             PROPRIETÁRIO VARCHAR2 (30),
             FRETE_DETALHE VARCHAR2 (10),
             FRETE_UNID VARCHAR2 (10),
             FRETE_VALOR_POR_UNID NUMBER,
             COMISSÃO_USD NUMBER,
             COMISSÃO_PERCENT FLOAT,
             OBS VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.FRETE ADD CONSTRAINT ID_FRETE
PRIMARY KEY (CARGA_PORTO, DESCARGA_PORTO, PROPRIETÁRIO, FRETE_DETALHE);

CREATE TABLE CXRJ.GRUPO_PRODUTO (
             COD VARCHAR2 (10),
             DESCR VARCHAR2 (200),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.GRUPO_PRODUTO ADD CONSTRAINT ID_GRUPO_PRODUTO
PRIMARY KEY (COD);

CREATE TABLE CXRJ.HIST_PADRAO (
             CLIENTE VARCHAR2(30),
             PAÍS_DESTINO VARCHAR2(30),
             FORNECEDOR VARCHAR2(30),
             GRUPO VARCHAR2(20)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.HIST_PADRAO ADD CONSTRAINT ID_HIST_PADRAO
PRIMARY KEY (CLIENTE, PAÍS_DESTINO, FORNECEDOR, GRUPO);

CREATE TABLE CXRJ.HIST_PADRAO_LANÇAMENTO (
             CLIENTE VARCHAR2(30),
             PAÍS_DESTINO VARCHAR2(30),
             FORNECEDOR VARCHAR2(30),
             GRUPO VARCHAR2(20),
             SEQ NUMBER(5,0),
             HISTORICO VARCHAR2(150),
             COMPLEMENTO VARCHAR2(150),
             DÉBITO_RS NUMBER,
             CRÉDITO_RS NUMBER,
             DÉBITO_US NUMBER,
             CRÉDITO_US NUMBER,
             EMPRESA NUMBER(5,0),
             RELACIONADA NUMBER(5,0)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.HIST_PADRAO_LANÇAMENTO ADD CONSTRAINT ID_HIST_PADRAO_LANÇAMENTO
PRIMARY KEY (CLIENTE, PAÍS_DESTINO, FORNECEDOR, GRUPO, SEQ);

CREATE TABLE CXRJ.HISTORICO (
             NOME VARCHAR2(150)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.HISTORICO ADD CONSTRAINT ID_HISTORICO
PRIMARY KEY (NOME);

CREATE TABLE CXRJ.IDIOMA (
             COD VARCHAR2 (3),
             DESCR VARCHAR2 (25),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.IDIOMA ADD CONSTRAINT ID_IDIOMA
PRIMARY KEY (COD);

CREATE TABLE CXRJ.INCOTERM (
             COD VARCHAR2 (10),
             DESCR VARCHAR2 (3000),
             OBS VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.INCOTERM ADD CONSTRAINT ID_INCOTERM
PRIMARY KEY (COD);

CREATE TABLE CXRJ.INCOTERM_LANÇ (
             INCOTERM VARCHAR2 (10),
             LANÇ VARCHAR2 (20),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.INCOTERM_LANÇ ADD CONSTRAINT ID_INCOTERM_LANÇ
PRIMARY KEY (INCOTERM, LANÇ);

CREATE TABLE CXRJ.INSTRUÇÃO_PAG (
             REF VARCHAR2 (13),
             SOLICITAÇÃO_DATA DATE,
             MOEDA VARCHAR2 (20),
             VALOR NUMBER,
             RECEBEDOR VARCHAR2 (30),
             PAG_DATA DATE,
             PAG_FORMA VARCHAR2 (3000),
             HISTÓRICO VARCHAR2 (3000),
             OBS VARCHAR2 (3000),
             PAGADOR VARCHAR2 (30),
             RESPONSÁVEL VARCHAR2 (3000),
             SOLICITANTE VARCHAR2 (3000),
             AUTORIZADOR VARCHAR2 (3000),
             COM_CÓPIA VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.INSTRUÇÃO_PAG ADD CONSTRAINT ID_INSTRUÇÃO_PAG
PRIMARY KEY (REF);

CREATE TABLE CXRJ.INSTRUÇÃO_PAG_FECH (
             INSTRUÇÃO_PAG_REF VARCHAR2 (13),
             FECH_REF VARCHAR2 (13),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.INSTRUÇÃO_PAG_FECH ADD CONSTRAINT ID_INSTRUÇÃO_PAG_FECH
PRIMARY KEY (INSTRUÇÃO_PAG_REF, FECH_REF);

CREATE TABLE CXRJ.INTR_EMB (
             EMB_PREV DATE,
             PED_REF VARCHAR2(13),
             IMP_COND_RECEB VARCHAR2(10),
             PAÍS_DESTINO VARCHAR2(30),
             OV VARCHAR2(20),
             PROD VARCHAR2(30),
             DESCARGA_PORTO VARCHAR2(30),
             FSE VARCHAR2(20),
             TOTAL_EMB NUMBER(5),
             PO VARCHAR2(20),
             FORNECEDOR VARCHAR2(30),
             PED_DATA DATE,
             USUÁRIO_FINAL VARCHAR2(30),
             INÍCIO DATE,
             FIM DATE,
             VENDA VARCHAR2(10),
             COMPRA VARCHAR2(10),
             NOMINAL NUMBER,
             FECHADO NUMBER,
             NAVIO VARCHAR2(30),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

CREATE TABLE CXRJ.LANÇ (
             LANÇ VARCHAR2 (20),
             NOME VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.LANÇ ADD CONSTRAINT ID_LANÇ
PRIMARY KEY (LANÇ);

CREATE TABLE CXRJ.LOCAL_RESULT (
             COD VARCHAR2 (8),
             DESCR VARCHAR2 (30),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.LOCAL_RESULT ADD CONSTRAINT ID_LOCAL_RESULT
PRIMARY KEY (COD);

CREATE TABLE CXRJ.LOG_IMPORT (
             DATA DATE,
             NOME VARCHAR2(255),
             SEQ NUMBER,
             SITUAÇÃO VARCHAR2(255),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.LOG_IMPORT ADD CONSTRAINT ID_LOG_IMPORT
PRIMARY KEY (SEQ);

CREATE TABLE CXRJ.LOG_MAPA (
             TABELA VARCHAR2 (10),
             CHAVE VARCHAR2 (15),
             SEQ NUMBER,
             DATA DATE
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.LOG_MAPA ADD CONSTRAINT ID_LOG_MAPA
PRIMARY KEY (TABELA, CHAVE);

CREATE TABLE CXRJ.LOG_PED (
             TABELA VARCHAR2(30),
             PED_REF VARCHAR2(13),
             SEQ NUMBER (5,0),
             MOMENTO DATE
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.LOG_PED ADD CONSTRAINT ID_LOG_PED
PRIMARY KEY (TABELA, PED_REF, SEQ);

CREATE TABLE CXRJ.MAPA (
             WORKSHEET VARCHAR2(30),
             SEQ NUMBER,
             EMPRESA VARCHAR2(20),
             ARQUIVO VARCHAR2(100),
             TITULO VARCHAR2(50),
             LINHA NUMBER,
             COLUNA NUMBER,
             COR NUMBER,
             LARGURA NUMBER,
             FONT VARCHAR2(50),
             FONT_NEGRITO NUMBER,
             FONT_TAM NUMBER,
             ALINHAMENTO NUMBER,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.MAPA ADD CONSTRAINT ID_MAPA
PRIMARY KEY (WORKSHEET, SEQ);

CREATE TABLE CXRJ.MAPA_DE_CONTROLE (
             PED_REF VARCHAR2(13),
             SEQ NUMBER (5,0),
             PAÍS_DESTINO VARCHAR2(30),
             PRODUTOR VARCHAR2(30),
             FORNECEDOR VARCHAR2(30),
             FORN_SALES_COND VARCHAR2(20),
             FORN_RECEIPT_COND VARCHAR2(20),
             EXPORTADOR VARCHAR2(30),
             EXP_SALES_COND VARCHAR2(20),
             EXP_RECEIPT_COND VARCHAR2(20),
             IMPORTADOR VARCHAR2(30),
             IMP_SALES_COND VARCHAR2(20),
             IMP_RECEIPT_COND VARCHAR2(20),
             DISTRIBUIDOR VARCHAR2(30),
             PAGADOR VARCHAR2(30),
             GRUPO VARCHAR2(25),
             EMPRESA VARCHAR2(30),
             FINA_REF VARCHAR2(13)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.MAPA_DE_CONTROLE ADD CONSTRAINT ID_MAPA_DE_CONTROLE
PRIMARY KEY (PED_REF, SEQ);

CREATE TABLE CXRJ.MODALIDADE_FRETE (
             COD VARCHAR2 (10),
             DESCR VARCHAR2 (3000),
             OBS VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.MODALIDADE_FRETE ADD CONSTRAINT ID_MODALIDADE_FRETE
PRIMARY KEY (COD);

CREATE TABLE CXRJ.MOEDA (
             COD VARCHAR2 (20),
             NOME VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.MOEDA ADD CONSTRAINT ID_MOEDA
PRIMARY KEY (COD);

CREATE TABLE CXRJ.NAVIO (
             COD VARCHAR2 (30),
             ANO_CONSTRUÇÃO NUMBER (5,0),
             NOME VARCHAR2 (3000),
             NOME_ANTERIOR VARCHAR2 (30),
             BANDEIRA VARCHAR2 (30),
             NAVIO_TIPO VARCHAR2 (3000),
             DWAT NUMBER (10,0),
             LOA FLOAT,
             BEAN FLOAT,
             GRT NUMBER (10,0),
             NRT NUMBER (10,0),
             CAPACIDADE_GRÃO NUMBER (10,0),
             CAPACIDADE_FARDO NUMBER (10,0),
             CALADO_VERÃO FLOAT,
             GUINDASTE_NUM NUMBER (5,0),
             GUINDASTE_DIMENSÃO VARCHAR2 (3000),
             ESCOTILHA_NUM NUMBER (5,0),
             ESCOTILHA_DIMENSÃO VARCHAR2 (3000),
             ESCOTILHA_FECHAM_TIPO VARCHAR2 (254),
             EQUIPAMENTO VARCHAR2 (3000),
             TANKTOP_STRENGTH VARCHAR2 (3000),
             SOCIEDADE_CLASSIFICADORA VARCHAR2 (50),
             CLASSE VARCHAR2 (40),
             OBS VARCHAR2 (3000),
             OWNER VARCHAR2( 30),
             CALL_SIGN VARCHAR2(25),
             N_TANKS VARCHAR2(25),
             SBT VARCHAR2(3),
             DOUBLE_HULL VARCHAR2(3),
             DOUBLE_BOTTOM VARCHAR2(3),
             INERT_GAS_SYS VARCHAR2(3),
             HEATING_COILS VARCHAR2(3),
             IMO_NUM NUMBER,
             IMO_TYPE VARCHAR2(20),
             COATING VARCHAR2(3),
             CARGO_PUMPS VARCHAR2(2000),
             CUBIC_CAPACITY FLOAT(126),
             CARGO_LINES VARCHAR2(800),
             CARGO_MANIFOLDS VARCHAR2(800),
             MAJORS_AP VARCHAR2(800),
             SUMMER_DRAFT FLOAT(126),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.NAVIO ADD CONSTRAINT ID_NAVIO
PRIMARY KEY (COD);

CREATE TABLE CXRJ.NEG_COMERCIAL (
             ORDREF VARCHAR2(4),
             PED_REF VARCHAR2(13),
             PAÍS_DESTINO VARCHAR2(30),
             IMP_COND_VENDA VARCHAR2(10),
             FORNECEDOR_COND_VENDA VARCHAR2(10),
             PED_DATA DATE,
             CARGA_PORTO VARCHAR2(30),
             EMB_PREV DATE,
             PED_ITEM NUMBER(5),
             LAYDAY_FINAL DATE,
             LAYDAY_INÍCIO DATE,
             P VARCHAR2(20),
             OV VARCHAR2(20),
             NE_ITEM VARCHAR2(20),
             LOTE VARCHAR2(20),
             TBN VARCHAR2(20),
             BL_CODE VARCHAR2(20),
             PO VARCHAR2(20),
             USUÁRIO_FINAL VARCHAR2(30),
             PROD VARCHAR2(30),
             DIMENSÃO VARCHAR2(100),
             REVESTIMENTO VARCHAR2(15),
             TÊMPERA VARCHAR2(15),
             NORMA_PRODUÇÃO VARCHAR2(15),
             EMBALAGEM_PESO_MIN FLOAT(126),
             EMBALAGEM_PESO_MAX FLOAT(126),
             NOMINAL_PED_UNID NUMBER,
             DESCARGA_PORTO VARCHAR2(30),
             PESO_LÍQUIDO NUMBER,
             PREÇO_UNITÁRIO_FORNECEDOR NUMBER,
             PREÇO_UNITÁRIO_IMP NUMBER,
             QTD_PED_UNID NUMBER
             ) TABLESPACE T_CXRJ_DAT;

CREATE TABLE CXRJ.NEG_FECH_ANA (
             REF VARCHAR2(13),
             ITEM NUMBER(5),
             USUÁRIO_FINAL VARCHAR2(30),
             LOTE VARCHAR2(20),
             OV VARCHAR2(20),
             NOMINAL_PED_UNID NUMBER,
             PESO_LÍQUIDO NUMBER,
             PED_DATA DATE,
             NAVIO VARCHAR2(30),
             PAÍS_DESTINO VARCHAR2(30),
             CARGA_PORTO VARCHAR2(30),
             EMB_PREV DATE,
             IMP VARCHAR2(30),
             DISTRIBUIDOR VARCHAR2(30),
             DESCARGA_PORTO VARCHAR2(30),
             PROD VARCHAR2(30),
             EMBALAGEM VARCHAR2(20),
             AÇO_TIPO VARCHAR2(15),
             REVESTIMENTO VARCHAR2(15),
             TÊMPERA VARCHAR2(15),
             NORMA_TOLERÂNCIA VARCHAR2(15),
             NORMA_PRODUÇÃO VARCHAR2(15),
             TRAT_TÉRMICO NUMBER(5),
             TRAT_QUÍMICO NUMBER(5),
             LA NUMBER(5),
             LÍNGUA NUMBER(5),
             PED_UNID VARCHAR2(10),
             USO_FINAL VARCHAR2(50),
             PREVENDA NUMBER,
             PRECOMPRA NUMBER,
             LAYDAY_INÍCIO DATE,
             LAYDAY_FINAL DATE
             ) TABLESPACE T_CXRJ_DAT;

CREATE TABLE CXRJ.NEG_FECH_SINT_PAIS (
             REF VARCHAR2(13),
             PED_DATA DATE,
             USUÁRIO_FINAL VARCHAR2(30),
             OV VARCHAR2(20),
             P VARCHAR2(20),
             LOTE VARCHAR2(20),
             PO VARCHAR2(20),
             FSE VARCHAR2(20),
             FORNECEDOR VARCHAR2(30),
             PROD VARCHAR2(30),
             PAÍS_DESTINO VARCHAR2(30),
             DESCARGA_PORTO VARCHAR2(30),
             CARGA_PORTO VARCHAR2(30),
             EMB_PREV DATE,
             PGT VARCHAR2(10),
             MOEDA VARCHAR2(20),
             CC VARCHAR2(10),
             CV VARCHAR2(10),
             PRODU NUMBER,
             FECH NUMBER,
             PRCOMPRA NUMBER,
             PRVENDA NUMBER,
             EMB NUMBER,
             ENCOM NUMBER,
             CALC NUMBER,
             BL_DATA DATE,
             NAVIO VARCHAR2(30)
             ) TABLESPACE T_CXRJ_DAT;

CREATE TABLE CXRJ.NEG_USIMINAS (
	PED_REF	VARCHAR2(13),
	CLIENTE_REF VARCHAR2(50),
	CLIENTE	VARCHAR2(50),
	CLIENTE_DOC VARCHAR2(50),
	CLIENTE_APLIC VARCHAR2(50),
	FATURA VARCHAR2(30),
	FATURA_END VARCHAR2(100),
	FATURA_PAIS VARCHAR2(30),
	DATA DATE,
	COND_VENDA VARCHAR2(30),
	COMMISSION VARCHAR2(30),
	COND_PAG VARCHAR2(30),
	PESO_TOTAL NUMBER,
	MOEDA VARCHAR2(10),
	PORTO_ORIGEM VARCHAR2(50),
	PORTO_DESTINO VARCHAR2(50),
	EMBARQUE VARCHAR2(10),
	PRODUTO VARCHAR2(30),
	PRODUTO_DESCR VARCHAR2(100),
	PRODUTO_INFORM VARCHAR2(30),
	QUALIDADE VARCHAR2(30),
	MARCACAO_01 VARCHAR2(30),
	MARCACAO_02 VARCHAR2(30),
	MARCACAO_COR_01 VARCHAR2(30),
	MARCACAO_COR_02	VARCHAR2(30),
	MARCACAO_COR_03	VARCHAR2(30),
	MARCACAO_COR_INFORM VARCHAR2(30),
	SURFACE_CONDITIONS VARCHAR2(100),
	EXTERNAL_SURVEYS VARCHAR2(100),
	CERTIFICACAO VARCHAR2(30),
	CERTIFICACAO_INFORM VARCHAR2(30),
	OILED_INFORM VARCHAR2(30),
	OILED VARCHAR2(30),
	EDGES VARCHAR2(30),
	FINISH VARCHAR2(30),
	WELDING	VARCHAR2(50),
	WELDING_INFORM VARCHAR2(50),
	HARDNESS VARCHAR2(30),
	TELESCOPICITY VARCHAR2(30),
	FISH_TAIL VARCHAR2(30),
	FISH_TAIL_INFORM VARCHAR2(30),
	TOLERENCIA_01 VARCHAR2(30),
	TOLERENCIA_02 VARCHAR2(30),
	TOLERENCIA_03 VARCHAR2(30),
	TOLERENCIA_04 VARCHAR2(30),
	TOLERENCIA_05 VARCHAR2(30),
	THICKNESS VARCHAR2(30),
	THICKNESS_PERC VARCHAR2(30),
	FLATNESS VARCHAR2(30),
	FLATNESS_PERC VARCHAR2(30),
	WIDTH VARCHAR2(30),
	LENGHT VARCHAR2(30),
	OTHERS VARCHAR2(30),
	OTHERS_INFORM VARCHAR2(30),
	PACKING	VARCHAR2(30),
	REMARKS	VARCHAR2(100),
	REMARKS_INFORM VARCHAR2(100),
	BL VARCHAR2(50),
	BL_MARCADO VARCHAR2(50),
	OBS VARCHAR2(100),
	LOTE VARCHAR2(30),
	CONTRATO VARCHAR2(30),
        SYS_MOMENTO_CRIA DATE,
        SYS_USUÁRIO_CRIA CHAR (20),
        SYS_LOCAL_CRIA CHAR (20),
        SYS_MOMENTO_ATUALIZA DATE,
        SYS_USUÁRIO_ATUALIZA CHAR (20),
        SYS_LOCAL_ATUALIZA CHAR(20),
        SYS_STATUS CHAR (1)
        ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.NEG_USIMINAS ADD CONSTRAINT ID_NEG_USIMINAS
PRIMARY KEY (PED_REF);

CREATE TABLE CXRJ.NEG_USIMINAS_ITEM (
	PED_REF	VARCHAR2(13),
	ITEM NUMBER,
	ESPESSURA NUMBER,
	LARGURA	NUMBER,
	COMPRIMENTO NUMBER,
	QTD NUMBER,
	PESO NUMBER,
	EMBALAGEM_MIN NUMBER,
	EMBALAGEM_MAX NUMBER,
	DIAMETRO_INT_MIN NUMBER,
	DIAMETRO_INT_MAX NUMBER,
	DIAMETRO_EXT_MIN NUMBER,
	DIAMETRO_EXT_MAX NUMBER,
	PRODUTO_NEG NUMBER,
	PRODUTO_POS NUMBER,
	VALOR_BASIS NUMBER,
	VALOR_EXTRA NUMBER,
	VALOR_EFECTIVE NUMBER,
	OBS_ITEM VARCHAR2(100),
	SYS_MOMENTO_CRIA DATE,
        SYS_USUÁRIO_CRIA CHAR (20),
        SYS_LOCAL_CRIA CHAR (20),
        SYS_MOMENTO_ATUALIZA DATE,
        SYS_USUÁRIO_ATUALIZA CHAR (20),
        SYS_LOCAL_ATUALIZA CHAR(20),
        SYS_STATUS CHAR (1)
        ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.NEG_USIMINAS_ITEM ADD CONSTRAINT ID_NEG_USIMINAS_ITEM
PRIMARY KEY (PED_REF, ITEM);

CREATE TABLE CXRJ.NOTA_CRÉDITO (
             REF VARCHAR2 (13),
             DOC_DATA DATE,
             MOEDA VARCHAR2 (20),
             TAXA_USD FLOAT,
             VALOR NUMBER,
             CIA VARCHAR2 (30),
             CONTATO VARCHAR2 (50),
             CIA_SUB VARCHAR2 (30),
             CONTATO_SUB VARCHAR2 (50),
             TEXTO VARCHAR2 (3000),
             EMISSOR VARCHAR2 (3000),
             ASSUNTO VARCHAR2 (3000),
             EMISSÃO_DATA DATE,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.NOTA_CRÉDITO ADD CONSTRAINT ID_NOTA_CRÉDITO
PRIMARY KEY (REF);

CREATE TABLE CXRJ.NOTA_CRÉDITO_FECH (
             NOTA_CRÉDITO_REF VARCHAR2 (13),
             FECH_REF VARCHAR2 (13),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.NOTA_CRÉDITO_FECH ADD CONSTRAINT ID_NOTA_CRÉDITO_FECH
PRIMARY KEY (NOTA_CRÉDITO_REF, FECH_REF);

CREATE TABLE CXRJ.NOTA_CRÉDITO_PAG (
             NOTA_CRÉDITO_REF VARCHAR2 (13),
             SEQ NUMBER (5,0),
             PAG_DATA DATE,
             MOEDA VARCHAR2 (20),
             TAXA_USD FLOAT,
             VALOR NUMBER,
             OBS VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.NOTA_CRÉDITO_PAG ADD CONSTRAINT ID_NOTA_CRÉDITO_PAG
PRIMARY KEY (NOTA_CRÉDITO_REF, SEQ);

CREATE TABLE CXRJ.NOTA_DÉBITO (
             REF VARCHAR2 (13),
             DOC_DATA DATE,
             MOEDA VARCHAR2 (20),
             TAXA_USD FLOAT,
             VALOR NUMBER,
             CIA VARCHAR2 (30),
             CONTATO VARCHAR2 (50),
             CIA_SUB VARCHAR2 (30),
             CONTATO_SUB VARCHAR2 (50),
             TEXTO VARCHAR2 (3000),
             TRANSFERÊNCIA_DETALHE VARCHAR2 (3000),
             ASSUNTO VARCHAR2 (3000),
             EMISSÃO_DATA DATE,
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.NOTA_DÉBITO ADD CONSTRAINT ID_NOTA_DÉBITO
PRIMARY KEY (REF);

CREATE TABLE CXRJ.NOTA_DÉBITO_FECH (
             NOTA_DÉBITO_REF VARCHAR2 (13),
             FECH_REF VARCHAR2 (13),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.NOTA_DÉBITO_FECH ADD CONSTRAINT ID_NOTA_DÉBITO_FECH
PRIMARY KEY (NOTA_DÉBITO_REF, FECH_REF);

CREATE TABLE CXRJ.NOTA_DÉBITO_RECEB (
             NOTA_DÉBITO_REF VARCHAR2 (13),
             SEQ NUMBER (5,0),
             RECEB_DATA DATE,
             MOEDA VARCHAR2 (20),
             TAXA_USD FLOAT,
             VALOR NUMBER,
             OBS VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.NOTA_DÉBITO_RECEB ADD CONSTRAINT ID_NOTA_DÉBITO_RECEB
PRIMARY KEY (NOTA_DÉBITO_REF, SEQ);

CREATE TABLE CXRJ.PAÍS (
             COD VARCHAR2 (30),
             NOME VARCHAR2 (3000),
             ABREVIATURA VARCHAR2 (5),
             BANDEIRA_COD VARCHAR2 (5),
             IDIOMA VARCHAR2 (3),
             MSG VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.PAÍS ADD CONSTRAINT ID_PAÍS
PRIMARY KEY (COD);

CREATE TABLE CXRJ.PARAM (
             GRUPO VARCHAR2 (30),
             PARAM VARCHAR2 (15),
             QUANDO_TEXTO VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.PARAM ADD CONSTRAINT ID_PARAM
PRIMARY KEY (GRUPO, PARAM);

CREATE TABLE CXRJ.PARAM_CSN (
             PROD VARCHAR2(30),
             PARAM VARCHAR2(50),
             VALOR NUMBER
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.PARAM_CSN ADD CONSTRAINT ID_PARAM_CSN
PRIMARY KEY (PROD, VALOR);

CREATE TABLE CXRJ.PED (
             REF VARCHAR2 (13),
             PED_DATA DATE,
             MOEDA VARCHAR2 (20),
             TAXA_USD FLOAT,
             VIA_TRANSPORTE VARCHAR2 (15),
             CARGA_PORTO VARCHAR2 (30),
             PAÍS_DESTINO VARCHAR2 (30),
             FORNECEDOR VARCHAR2 (30),
             FORNECEDOR_REF VARCHAR2 (50),
             FORNECEDOR_COND_RECEB VARCHAR2 (25),
             EXP VARCHAR2 (30),
             EXP_REF VARCHAR2 (50),
             EXP_COND_RECEB VARCHAR2 (25),
             IMP VARCHAR2 (30),
             IMP_REF VARCHAR2 (50),
             IMP_COND_RECEB VARCHAR2 (25),
             DISTRIBUIDOR VARCHAR2 (30),
             PAGADOR VARCHAR2 (30),
             FRETE_COND VARCHAR2 (10),
             FRETE_PREV_POR_MT NUMBER,
             FRETE_PREV_VALOR NUMBER,
             EMB_PREV DATE,
             MARCAÇÃO VARCHAR2 (3000),
             OBS VARCHAR2 (3000),
             TIPO_VENDA VARCHAR2 (10),
             GRUPO_PROD VARCHAR2 (15),
             SUPERVISOR_VENDA VARCHAR2 (20),
             PRODUÇÃO_PREV DATE,
             PARIDADE VARCHAR2 (10),
             INSPEÇÃO_EXTERNA NUMBER (5,0),
             RESPONSÁVEL_INSP_EXT VARCHAR2 (20),
             AGENTE VARCHAR2 (30),
             TAXA_JUROS_FINANCIAM NUMBER,
             JUROS_NO_PREÇO NUMBER (5,0),
             COMISSÃO_PERCENT NUMBER,
             COMISSÃO_MT NUMBER,
             ADICIONAL_PERCENT NUMBER,
             ADICIONAL_MT NUMBER,
             INCIDÊNCIA VARCHAR2 (10),
             TIPO VARCHAR2 (10),
             ANEXO VARCHAR2 (3000),
             BENEFICIÁRIO VARCHAR2 (30),
             LOCAL_PAG VARCHAR2 (50),
             BANCO VARCHAR2 (3000),
             F_QUANTIDADE NUMBER,
             F_PREÇO NUMBER,
             F_RESULTADO NUMBER,
             F_RESULTADO_MT NUMBER,
             F_RESULTADO_P FLOAT,
             F_COMISSÃO_FORN FLOAT,
             F_COMISSÃO_FORN_P FLOAT,
             F_PROFIT_SPLIT FLOAT,
             F_DELIV_PURCHASE VARCHAR2 (30),
             F_DELIV_SALES VARCHAR2 (30),
             F_PAY_PURCHASE VARCHAR2 (30),
             F_PAY_SALES VARCHAR2 (30),
             F_OBS VARCHAR2 (3000),
             FORNECEDOR_COND_VENDA VARCHAR2 (10),
             EXP_COND_VENDA VARCHAR2 (10),
             IMP_COND_VENDA VARCHAR2 (10),
             INSTRUC_INTERNA VARCHAR2 (3000),
             PRODUTOR VARCHAR2 (30),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.PED ADD CONSTRAINT ID_PED
PRIMARY KEY (REF);

CREATE TABLE CXRJ.PED_CONTATO (
             PED_REF VARCHAR2 (13),
             CIA_COD VARCHAR2 (30),
             CONTATO_NOME VARCHAR2 (50),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.PED_CONTATO ADD CONSTRAINT ID_PED_CONTATO
PRIMARY KEY (PED_REF, CIA_COD, CONTATO_NOME);

CREATE TABLE CXRJ.PED_FORMA_PAGAMENTO (
             PED_REF VARCHAR2(13),
             OPERAÇÃO NUMBER (5,0),
             SEQ NUMBER (5,0),
             PERIODO VARCHAR2(20),
             PERC NUMBER (5,0),
             AMOUNT NUMBER,
             DIAS NUMBER (5,0),
             DATA DATE,
             VALUE NUMBER
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.PED_FORMA_PAGAMENTO ADD CONSTRAINT ID_PED_FORMA_PAGAMENTO
PRIMARY KEY (PED_REF, OPERAÇÃO, SEQ);

CREATE TABLE CXRJ.PED_ITEM (
             PED_REF VARCHAR2 (13),
             ITEM NUMBER (5,0),
             USUÁRIO_FINAL VARCHAR2 (30),
             USUÁRIO_REF VARCHAR2 (500),
             PED_UNID VARCHAR2 (10),
             NOMINAL_PED_UNID NUMBER,
             TOTAL_FECH NUMBER (5,0),
             TOTAL_EMB NUMBER (5,0),
             TOLERÂNCIA_MIN FLOAT,
             TOLERÂNCIA_MAX FLOAT,
             PROD VARCHAR2 (30),
             DESCARGA_PORTO VARCHAR2 (30),
             EMBALAGEM VARCHAR2 (20),
             EMBALAGEM_PESO_MIN FLOAT,
             EMBALAGEM_PESO_MAX FLOAT,
             PREÇO_UNITÁRIO_FORNECEDOR NUMBER,
             PREÇO_UNITÁRIO_EXP NUMBER,
             PREÇO_UNITÁRIO_IMP NUMBER,
             ESPESSURA_TIPO VARCHAR2 (3),
             ESPESSURA_MM FLOAT,
             LARGURA_MM FLOAT,
             COMPRIMENTO_MM FLOAT,
             ESPESSURA_POL FLOAT,
             LARGURA_POL FLOAT,
             COMPRIMENTO_POL FLOAT,
             NCM VARCHAR2 (20),
             NALADI VARCHAR2 (20),
             P VARCHAR2 (20),
             LOTE VARCHAR2 (20),
             OV VARCHAR2 (20),
             NE_ITEM VARCHAR2 (20),
             NE_ENVIO VARCHAR2 (20),
             TBN VARCHAR2 (20),
             FSE VARCHAR2 (20),
             PO VARCHAR2 (20),
             BL_CODE VARCHAR2 (20),
             USO_FINAL VARCHAR2 (50),
             DIÂMETRO_INTERNO FLOAT,
             DIÂMETRO_EXTERNO FLOAT,
             PESO_POR_FOLHA FLOAT,
             AÇO_TIPO VARCHAR2 (15),
             REVESTIMENTO VARCHAR2 (15),
             TÊMPERA VARCHAR2 (15),
             ACABAMENTO VARCHAR2 (15),
             NORMA_TOLERÂNCIA VARCHAR2 (15),
             NORMA_PRODUÇÃO VARCHAR2 (15),
             BORDAS VARCHAR2 (15),
             OLEAMENTO NUMBER (5,0),
             TRAT_TÉRMICO NUMBER (5,0),
             TRAT_QUÍMICO NUMBER (5,0),
             LA NUMBER (5,0),
             LE NUMBER (5,0),
             LÍNGUA NUMBER (5,0),
             PROD_DESCR VARCHAR2 (3000),
             COMPOSIÇÃO_QUÍMICA VARCHAR2 (3000),
             MARCAÇÃO_PRODUÇÃO VARCHAR2 (3000),
             COMENTÁRIO VARCHAR2 (3000),
             PED_USINA_DATA DATE,
             PED_USINA_ID VARCHAR2 (25),
             PED_USINA_CONFIRM DATE,
             LAYDAY_INÍCIO DATE,
             LAYDAY_FINAL DATE,
             QTD_VOL NUMBER (10,0),
             PESO_LÍQUIDO NUMBER,
             PESO_BRUTO NUMBER,
             FECH_REQUISITADO DATE,
             FECH_NOTIFICADO DATE,
             CANCEL_DATA DATE,
             CANCEL_MOTIVO VARCHAR2 (3000),
             SEGURO_PERCENT NUMBER,
             CUR_PERCENT NUMBER,
             SUPERFÍCIE VARCHAR2 (2),
             DIAMET_INT_MAX_TOLER NUMBER,
             DIAMET_INT_MIM_TOLER NUMBER,
             TQ VARCHAR2 (5),
             CERTIF_QUALIDADE VARCHAR2 (25),
             RABO_PEIXE NUMBER (5,0),
             RABO_PEIXE_MAX NUMBER,
             LÍNGUA_MAX NUMBER,
             MARCAÇÃO_ESPECIAL_DOC VARCHAR2 (3000),
             OBS VARCHAR2 (3000),
             MARCAÇÃO VARCHAR2 (3000),
             NOMINAL_MT NUMBER,
             DIMENSÃO VARCHAR2(100),
             TOL_CSN NUMBER,
             RECOZIDO_CSN VARCHAR2(20),
             TOL_ESPESSURA_CSN NUMBER,
             TOL_LARGURA_CSN NUMBER,
             TOL_COMPRIMENTO_CSN NUMBER,
             MARCAÇÃO_DIF_CSN VARCHAR2(22),
             FACE_PESADA_CSN VARCHAR2(30),
             APLAINAMENTO_CSN VARCHAR2(10),
             PASSIVAÇÃO_CSN VARCHAR2(30),
             ACABAMENTO_CSN VARCHAR2(25),
             FAIXA_PESO_CSN VARCHAR2(30),
             SOLDAS_CSN VARCHAR2(10),
             NUM_SOLDAS_CSN VARCHAR2(25),
             MARCAÇÃO_SOLDA_CSN VARCHAR2(10),
             VERNIZ_DOURADO_CSN VARCHAR2(10),
             POSIÇÃO_FOLHA_PALLET_CSN VARCHAR2(30),
             RUGOSIDADE_CSN VARCHAR2(30),
             ESQUADRIA_CSN VARCHAR2(30),
             NUM_CONSULTA_CSN VARCHAR2(25),
             TOLERÂNCIA_PADRÃO_CSN VARCHAR2(30),
             MARCAÇOES_ADICIONAIS_CSN VARCHAR2(50),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.PED_ITEM ADD CONSTRAINT ID_PED_ITEM
PRIMARY KEY (PED_REF, ITEM);

CREATE TABLE CXRJ.PED_LANÇ (
             PED_REF VARCHAR2 (13),
             SEQ NUMBER (5,0),
             LANÇ VARCHAR2 (20),
             VALOR NUMBER,
             VALOR_POR_MT NUMBER,
             TOTAL_PERCENT FLOAT,
             TOTAL_TIPO VARCHAR2 (10),
             EXP NUMBER (5,0),
             IMP NUMBER (5,0),
             BENEFICIÁRIO VARCHAR2 (30),
             COMISSÃO_MODALIDADE VARCHAR2 (1),
             INSTRUÇÃO_REMESSA VARCHAR2 (3000),
             EXP_CALC NUMBER,
             IMP_CALC NUMBER,
             OBS VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.PED_LANÇ ADD CONSTRAINT ID_PED_LANÇ
PRIMARY KEY (PED_REF, SEQ);

CREATE TABLE CXRJ.PED_RES (
             PED_REF VARCHAR2(13),
             USUÁRIO_FINAL VARCHAR2(30),
             PROD VARCHAR2(30),
             PO VARCHAR2(20),
             ABREVIATURA VARCHAR2(5),
             ITEM NUMBER(5),
             DESCARGA_PORTO VARCHAR2(30),
             NE_ITEM VARCHAR2(20),
             LOTE VARCHAR2(20),
             PROD_DESCR VARCHAR2(3000),
             PAÍS_DESTINO VARCHAR2(30),
             CARGA_PORTO VARCHAR2(30),
             PED_DATA DATE,
             FORNECEDOR VARCHAR2(30),
             CCOMPRA VARCHAR2(10),
             CVENDA VARCHAR2(10),
             EMB_PREV DATE,
             NOMINAL NUMBER,
             TOT_EMB NUMBER,
             TOT_PROD NUMBER,
             PREÇO_UNITÁRIO_IMP NUMBER,
             PREÇO_UNITÁRIO_FORNECEDOR NUMBER,
             ULT_DATA_BL DATE,
             ESPESSURA_MM FLOAT(126),
             ESPESSURA_TIPO VARCHAR2(3),
             LARGURA_MM FLOAT(126),
             COMPRIMENTO_MM FLOAT(126),
             DIMENSÃO VARCHAR2(100),
             TÊMPERA VARCHAR2(15),
             REVESTIMENTO VARCHAR2(15),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

CREATE TABLE CXRJ.PED_RESULT (
             PED_REF VARCHAR2 (13),
             SEQ NUMBER (5,0),
             LANÇ VARCHAR2 (20),
             VALOR NUMBER,
             VALOR_POR_MT NUMBER,
             TOTAL_PERCENT FLOAT,
             TOTAL_TIPO VARCHAR2 (10),
             COMPETÊNCIA VARCHAR2 (30),
             CALC NUMBER,
             OBS VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.PED_RESULT ADD CONSTRAINT ID_PED_RESULT
PRIMARY KEY (PED_REF, SEQ);

CREATE TABLE CXRJ.PLANILHA_DEF (
             WORKSHEET VARCHAR2(30),
             SEQ NUMBER,
             EMPRESA VARCHAR2(20),
             ARQUIVO VARCHAR2(100),
             TIPO VARCHAR2(20),
             HISTÓRICO VARCHAR2(20),
             DATAHIST NUMBER,
             COLUNACRT NUMBER,
             CRT VARCHAR2(50),
             COLUNADBCR NUMBER,
             DÉBITO VARCHAR2(50),
             CRÉDITO VARCHAR2(50),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.PLANILHA_DEF ADD CONSTRAINT ID_PLANILHA_DEF
PRIMARY KEY (WORKSHEET, SEQ);

CREATE TABLE CXRJ.PLANILHA_STC (
             WORKSHEET VARCHAR2 (30),
             EMPRESA VARCHAR2 (20),
             ARQUIVO VARCHAR2 (100),
             MAPA VARCHAR2 (100)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.PLANILHA_STC ADD CONSTRAINT ID_PLANILHA_STC
PRIMARY KEY (WORKSHEET);

CREATE TABLE CXRJ.PORTO (
             COD VARCHAR2 (30),
             NOME VARCHAR2 (3000),
             CIDADE VARCHAR2 (50),
             ESTADO VARCHAR2 (30),
             PAÍS VARCHAR2 (30),
             RESTRIÇÕES VARCHAR2 (3000),
             OBS VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.PORTO ADD CONSTRAINT ID_PORTO
PRIMARY KEY (COD);

CREATE TABLE CXRJ.PROCESSO (
             EMPRESA VARCHAR2(30),
             REF VARCHAR2(20),
             RELACIONADA VARCHAR2(30),
             SEQ NUMBER (5,0),
             OUTROS VARCHAR2(150),
             CONTRATO VARCHAR2(150),
             FORNECEDOR VARCHAR2(30),
             OV VARCHAR2(30),
             PO VARCHAR2(30),
             PRAZO VARCHAR2(30),
             CLIENTE VARCHAR2(30),
             NAVIO VARCHAR2(30),
             CARGA_PORTO VARCHAR2(3000),
             DESCARGA_PORTO VARCHAR2(3000),
             PAÍS_DESTINO VARCHAR2(30),
             BL_DATA DATE,
             EMB_DATA DATE,
             DOC_DATA DATE,
             GRUPO VARCHAR2(20),
             PESO_LÍQUIDO NUMBER,
             PESO_BRUTO NUMBER,
             FINANCEIRO NUMBER,
             FINANCEIRO_RELACIONADA NUMBER,
             OBS VARCHAR2 (3000)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.PROCESSO ADD CONSTRAINT ID_PROCESSO
PRIMARY KEY (EMPRESA, REF, SEQ);

CREATE TABLE CXRJ.PROCESSO_LANÇAMENTO (
             EMPRESA VARCHAR2(30),
             FINA_REF VARCHAR2(20),
             PROC_SEQ NUMBER (5,0),
             SEQ NUMBER (5,0),
             DATA DATE,
             HISTORICO VARCHAR2(150),
             COMPLEMENTO VARCHAR2(150),
             DÉBITO_RS NUMBER,
             CRÉDITO_RS NUMBER,
             DÉBITO_US NUMBER,
             CRÉDITO_US NUMBER,
             OK NUMBER(5,0),
             TAXA NUMBER,
             R NUMBER(5,0)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.PROCESSO_LANÇAMENTO ADD CONSTRAINT ID_PROCESSO_LANÇAMENTO
PRIMARY KEY (EMPRESA, FINA_REF, PROC_SEQ, SEQ,R);

CREATE TABLE CXRJ.PRODUTO (
             COD VARCHAR2 (30),
             NOME VARCHAR2 (3000),
             GRUPO VARCHAR2 (10),
             NCM VARCHAR2(20),
             NALADI VARCHAR2(20),
             NCM_OBS VARCHAR2 (3000),
             NALADI_OBS VARCHAR2 (3000),
             MEDIDAS VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.PRODUTO ADD CONSTRAINT ID_PRODUTO
PRIMARY KEY (COD);

CREATE TABLE CXRJ.PRODUTO_ESPECIF (
             COD VARCHAR2 (30),
             SEQ NUMBER (5,0),
             NCM VARCHAR2 (20),
             NALADI VARCHAR2 (20),
             MENOR_ESPESSURA FLOAT,
             MAIOR_ESPESSURA FLOAT,
             MENOR_LARGURA FLOAT,
             MAIOR_LARGURA FLOAT,
             MENOR_COMPRIMENTO FLOAT,
             MAIOR_COMPRIMENTO FLOAT,
             REVESTIMENTO VARCHAR2 (15),
             TÊMPERA VARCHAR2 (15),
             DESCR VARCHAR2 (3000),
             DESCR_NALADI VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.PRODUTO_ESPECIF ADD CONSTRAINT ID_PRODUTO_ESPECIF
PRIMARY KEY (COD, SEQ);

CREATE TABLE CXRJ.PROG (
             FECH_REF VARCHAR2 (13),
             POSICIONAMENTO_DATA DATE,
             ARMAZÉM VARCHAR2 (50),
             TERNO_NUM NUMBER (3,0),
             FLUXO VARCHAR2 (3000),
             OBS VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.PROG ADD CONSTRAINT ID_PROG
PRIMARY KEY (FECH_REF, POSICIONAMENTO_DATA);

CREATE TABLE CXRJ.PROG_CARGA (
             FECH_REF VARCHAR2 (13),
             POSICIONAMENTO_DATA DATE,
             PED_REF VARCHAR2 (13),
             PED_ITEM NUMBER (5,0),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.PROG_CARGA ADD CONSTRAINT ID_PROG_CARGA
PRIMARY KEY (FECH_REF, POSICIONAMENTO_DATA, PED_REF, PED_ITEM);

CREATE TABLE CXRJ.RAMO_ATIVIDADE (
             COD VARCHAR2 (20),
             NOME VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.RAMO_ATIVIDADE ADD CONSTRAINT ID_RAMO_ATIVIDADE
PRIMARY KEY (COD);

CREATE TABLE CXRJ.REL_CSC_PAÍS_FORN_EMBARQUE (
             CHAVE VARCHAR2(65),
             ORDEM VARCHAR2(4),
             ESCRIT VARCHAR2(4),
             DIV VARCHAR2(3),
             QTD1 FLOAT,
             QTD2 FLOAT,
             PR1 FLOAT,
             PR2 FLOAT,
             RES1 FLOAT,
             RES2 FLOAT
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.REL_CSC_PAÍS_FORN_EMBARQUE ADD CONSTRAINT ID_REL_CSC_PAÍS_FORN_EMBARQUE
PRIMARY KEY (CHAVE, ORDEM, ESCRIT, DIV);

CREATE TABLE CXRJ.REL_CSC_PAÍS_FORN_PEDIDO (
             CHAVE VARCHAR2(65),
             ORDEM VARCHAR2(4),
             ESCRIT VARCHAR2(4),
             DIV VARCHAR2(3),
             QTD1 FLOAT,
             QTD2 FLOAT,
             PR1 FLOAT,
             PR2 FLOAT,
             RES1 FLOAT,
             RES2 FLOAT
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.REL_CSC_PAÍS_FORN_PEDIDO ADD CONSTRAINT ID_REL_CSC_PAÍS_FORN_PEDIDO
PRIMARY KEY (CHAVE, ORDEM, ESCRIT, DIV);

CREATE TABLE CXRJ.REL_CSC_PAÍS_FORN_RESULT (
             CHAVE VARCHAR2(65),
             ORDEM VARCHAR2(4),
             ESCRIT VARCHAR2(4),
             DIV VARCHAR2(3),
             RES1 FLOAT,
             RES2 FLOAT
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.REL_CSC_PAÍS_FORN_RESULT ADD CONSTRAINT ID_REL_CSC_PAÍS_FORN_RESULT
PRIMARY KEY (CHAVE, ORDEM, ESCRIT, DIV);

CREATE TABLE CXRJ.RELACIONADA (
             REF VARCHAR2 (30)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.RELACIONADA ADD CONSTRAINT ID_RELACIONADA
PRIMARY KEY (REF);

CREATE TABLE CXRJ.RESULT (
             PED_REF VARCHAR2 (13),
             EMB_SEQ NUMBER (5,0),
             SEQ NUMBER (5,0),
             INV_DATA DATE,
             RESULT1 NUMBER,
             RESULT2 NUMBER,
             RESULT3 NUMBER,
             RESULT4 NUMBER,
             RESULT5 NUMBER,
             DATA1 DATE,
             DATA2 DATE,
             DATA3 DATE,
             DATA4 DATE,
             DATA5 DATE,
             POSIÇÃO CHAR,
             OBSERVAÇÃO VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.RESULT ADD CONSTRAINT ID_RESULT
PRIMARY KEY (PED_REF, EMB_SEQ, SEQ);

CREATE TABLE CXRJ.SUB_CONTA (
             EMPRESA VARCHAR2(30),
             SUB_CONTA NUMBER,
             CONTA NUMBER,
             NOME VARCHAR2(50),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.SUB_CONTA ADD CONSTRAINT ID_SUB_CONTA
PRIMARY KEY (EMPRESA, SUB_CONTA);

CREATE TABLE CXRJ.SYS_CAD_LOG (
             SEQ NUMBER (10,0),
             NOME_TABELA VARCHAR2 (50),
             CHAVE CLOB,
             MOMENTO DATE,
             USUÁRIO VARCHAR2 (20),
             LOCAL VARCHAR2 (20),
             AÇÃO VARCHAR2 (20)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.SYS_CAD_LOG ADD CONSTRAINT ID_SYS_CAD_LOG
PRIMARY KEY (SEQ);

CREATE TABLE CXRJ.SYS_CONFIG_GLOBAL (
             PARAM VARCHAR2 (30),
             CONFIG VARCHAR2 (4000)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.SYS_CONFIG_GLOBAL ADD CONSTRAINT ID_SYS_CONFIG_GLOBAL
PRIMARY KEY (PARAM);

CREATE TABLE CXRJ.SYS_DELETE (
             NOME_TABELA VARCHAR2 (50),
             CHAVE VARCHAR2 (150),
             MOMENTO DATE,
             USUÁRIO VARCHAR2 (20),
             LOCAL VARCHAR2 (20)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.SYS_DELETE ADD CONSTRAINT ID_SYS_DELETE
PRIMARY KEY (NOME_TABELA, CHAVE);

CREATE TABLE CXRJ.SYS_LOCALID (
             NOME VARCHAR2 (15),
             CORRENTE NUMBER (5,0),
             PACOTE NUMBER (5,0),
             PACOTE_REC NUMBER (5,0),
             MOMENTO DATE,
             MOMENTO_REC DATE,
             MODELO NUMBER (5,0),
             OBS VARCHAR2 (255)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.SYS_LOCALID ADD CONSTRAINT ID_SYS_LOCALID
PRIMARY KEY (NOME);

CREATE TABLE CXRJ.SYS_OCORRÊNCIA (
             SEQ NUMBER (10,0),
             APLICAÇÃO VARCHAR2 (30),
             OCORRÊNCIA VARCHAR2 (3000),
             USUÁRIO VARCHAR2 (20),
             MOMENTO DATE,
             LOCAL VARCHAR2 (20)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.SYS_OCORRÊNCIA ADD CONSTRAINT ID_SYS_OCORRÊNCIA
PRIMARY KEY (SEQ);

CREATE TABLE CXRJ.SYS_TABELA (
             NOME VARCHAR2 (50),
             CHAVE VARCHAR2 (3000),
             EXPR_PRIMÁRIA VARCHAR2 (3000),
             EXPR_APRESENTA VARCHAR2 (3000),
             CAMPOS VARCHAR2 (3000),
             RELAÇÕES_1_N VARCHAR2 (3000),
             NÍVEL NUMBER (5,0)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.SYS_TABELA ADD CONSTRAINT ID_SYS_TABELA
PRIMARY KEY (NOME);

CREATE TABLE CXRJ.SYS_USUÁRIO (
             USUÁRIO VARCHAR2 (20),
             NOME VARCHAR2 (50),
             SUPERVISOR VARCHAR2 (20),
             DEPTO VARCHAR2 (10),
             MSG VARCHAR2 (3000),
             ASSINATURA BLOB,
             TEMPO_ATUALIZA NUMBER (5,0),
             FUNÇÃO VARCHAR2 (30),
             ASSINATURA_BMP BLOB,
             EMAIL VARCHAR2(40)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.SYS_USUÁRIO ADD CONSTRAINT ID_SYS_USUÁRIO
PRIMARY KEY (USUÁRIO);

CREATE TABLE CXRJ.TIPO_REF (
             TIPO VARCHAR2 (4),
             DESCR VARCHAR2 (3000),
             DEPTO VARCHAR2 (10),
             ARQUIVO VARCHAR2 (40),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.TIPO_REF ADD CONSTRAINT ID_TIPO_REF
PRIMARY KEY (TIPO);

CREATE TABLE CXRJ.UNID_QUANTID (
             COD VARCHAR2 (10),
             NOME VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.UNID_QUANTID ADD CONSTRAINT ID_UNID_QUANTID
PRIMARY KEY (COD);

CREATE TABLE CXRJ.VIA_TRANSPORTE (
             COD VARCHAR2 (15),
             DESCR VARCHAR2 (3000),
             TIPO VARCHAR2 (3000),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.VIA_TRANSPORTE ADD CONSTRAINT ID_VIA_TRANSPORTE
PRIMARY KEY (COD);

CREATE TABLE CXRJ.VIAGEM (
             REF VARCHAR2 (13),
             NAVIO VARCHAR2 (30),
             NAVIO_ÚLTIMO VARCHAR2 (30),
             CORRENTE NUMBER (5,0),
             OBS VARCHAR2 (255),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.VIAGEM ADD CONSTRAINT ID_VIAGEM
PRIMARY KEY (REF);

CREATE TABLE CXRJ.VIAGEM_ESCALA (
             VIAGEM_REF VARCHAR2 (13),
             ESCALA NUMBER (5,0),
             PORTO VARCHAR2 (30),
             ETA DATE,
             ETS DATE,
             ATA DATE,
             ATS DATE,
             LD VARCHAR2 (1),
             OBS VARCHAR2 (50),
             SYS_MOMENTO_CRIA DATE,
             SYS_USUÁRIO_CRIA CHAR (20),
             SYS_LOCAL_CRIA CHAR (20),
             SYS_MOMENTO_ATUALIZA DATE,
             SYS_USUÁRIO_ATUALIZA CHAR (20),
             SYS_LOCAL_ATUALIZA CHAR(20),
             SYS_STATUS CHAR (1)
             ) TABLESPACE T_CXRJ_DAT;

ALTER TABLE CXRJ.VIAGEM_ESCALA ADD CONSTRAINT ID_VIAGEM_ESCALA
PRIMARY KEY (VIAGEM_REF, ESCALA);

ALTER TABLE CXRJ.DOC_ACORDO_COMPLEM_DET ADD CONSTRAINT ACOR_COMP$ACOR_COMP_DET$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_ACORDO_COMPLEM (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_ALADI_DET ADD CONSTRAINT ALADI$ALADI_DET$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_ALADI (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_ALADI_NORMA ADD CONSTRAINT ALADI$ALADI_NOR$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_ALADI (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.BL_CARGA ADD CONSTRAINT BL$BL_CARGA$01
FOREIGN KEY (VIAGEM_REF, BL_SEQ) REFERENCES CXRJ.BL (VIAGEM_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_ITEM ADD CONSTRAINT BL_CARGA$EMB_ITEM$01
FOREIGN KEY (PED_REF, PED_ITEM, VIAGEM_REF, BL_SEQ) REFERENCES CXRJ.BL_CARGA (PED_REF, PED_ITEM, VIAGEM_REF, BL_SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_CÂMARA_COMÉRCIO_DET ADD CONSTRAINT CAMAR_COM$CAMAR_COM_DET$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_CÂMARA_COMÉRCIO (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.CARTA_FECH ADD CONSTRAINT CARTA$CARTA_FECH$01
FOREIGN KEY (CARTA_REF) REFERENCES CXRJ.CARTA (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB ADD CONSTRAINT CARTA_CRÉDITO$EMB$01
FOREIGN KEY (CARTA_CRED_REF) REFERENCES CXRJ.CARTA_CRÉDITO (REF);

ALTER TABLE CXRJ.CARTA ADD CONSTRAINT CIA$CARTA$01
FOREIGN KEY (CIA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.CARTA ADD CONSTRAINT CIA$CARTA$02
FOREIGN KEY (CIA_SUB) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.CARTA ADD CONSTRAINT CIA$CARTA$03
FOREIGN KEY (EMPRESA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.CIA_RAMO_ATIVIDADE ADD CONSTRAINT CIA$CIA_ATIVIDAD$01
FOREIGN KEY (CIA_COD) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.CIA_CONTATO ADD CONSTRAINT CIA$CIA_CONTATO$01
FOREIGN KEY (CIA_COD) REFERENCES CXRJ.CIA (COD) ON DELETE CASCADE;

ALTER TABLE CXRJ.CONFIRM_VENDA ADD CONSTRAINT CIA$CONF_VENDA$01
FOREIGN KEY (COMPRADOR) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.CONFIRM_VENDA ADD CONSTRAINT CIA$CONF_VENDA$02
FOREIGN KEY (USUÁRIO_FINAL) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.CONFIRM_VENDA ADD CONSTRAINT CIA$CONF_VENDA$03
FOREIGN KEY (PRODUTOR) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.EMB ADD CONSTRAINT CIA$EMB$02
FOREIGN KEY (NEGOCIADOR) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.EMB_DOC_DESTINO ADD CONSTRAINT CIA$EMB_DOC_DEST$01
FOREIGN KEY (CIA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.EMB_LANÇ ADD CONSTRAINT CIA$EMB_LANÇ$01
FOREIGN KEY (BENEFICIÁRIO) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FATURA ADD CONSTRAINT CIA$FATURA$01
FOREIGN KEY (CIA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FATURA ADD CONSTRAINT CIA$FATURA$02
FOREIGN KEY (CIA_SUB) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FATURA ADD CONSTRAINT CIA$FATURA$03
FOREIGN KEY (EMPRESA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FAX_DESTINO ADD CONSTRAINT CIA$FAX_DESTINO$01
FOREIGN KEY (CIA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT CIA$FECH$01
FOREIGN KEY (CIA_PAGADORA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT CIA$FECH$02
FOREIGN KEY (DESCARGA_AGENTE) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT CIA$FECH$03
FOREIGN KEY (CORRETOR) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT CIA$FECH$04
FOREIGN KEY (PROPRIETÁRIO) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT CIA$FECH$05
FOREIGN KEY (NEGOCIANTE) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT CIA$FECH$06
FOREIGN KEY (CARGA_AGENTE) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT CIA$FECH$07
FOREIGN KEY (CONTRATANTE) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT CIA$FECH$08
FOREIGN KEY (CARGA_ESTIVA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT CIA$FECH$09
FOREIGN KEY (DESCARGA_ESTIVA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FRETE ADD CONSTRAINT CIA$FRETE$01
FOREIGN KEY (PROPRIETÁRIO) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.INSTRUÇÃO_PAG ADD CONSTRAINT CIA$INSTRUÇÃO_PAG$01
FOREIGN KEY (PAGADOR) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.INSTRUÇÃO_PAG ADD CONSTRAINT CIA$INSTRUÇÃO_PAG$02
FOREIGN KEY (RECEBEDOR) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.NOTA_CRÉDITO ADD CONSTRAINT CIA$NOTA_CRÉDITO$01
FOREIGN KEY (CIA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.NOTA_CRÉDITO ADD CONSTRAINT CIA$NOTA_CRÉDITO$02
FOREIGN KEY (CIA_SUB) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.NOTA_DÉBITO ADD CONSTRAINT CIA$NOTA_DÉBITO$01
FOREIGN KEY (CIA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.NOTA_DÉBITO ADD CONSTRAINT CIA$NOTA_DÉBITO$02
FOREIGN KEY (CIA_SUB) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT CIA$PED$01
FOREIGN KEY (FORNECEDOR) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT CIA$PED$02
FOREIGN KEY (EXP) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT CIA$PED$03
FOREIGN KEY (IMP) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT CIA$PED$04
FOREIGN KEY (DISTRIBUIDOR) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT CIA$PED$05
FOREIGN KEY (PAGADOR) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.PED_ITEM ADD CONSTRAINT CIA$PED_ITEM$01
FOREIGN KEY (USUÁRIO_FINAL) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.PED_LANÇ ADD CONSTRAINT CIA$PED_LANÇ$01
FOREIGN KEY (BENEFICIÁRIO) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.PED_RESULT ADD CONSTRAINT CIA$PED_RESULT$01
FOREIGN KEY (COMPETÊNCIA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT COND_PAG$PED$01
FOREIGN KEY (FORNECEDOR_COND_RECEB) REFERENCES CXRJ.COND_PAG (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT COND_PAG$PED$02
FOREIGN KEY (EXP_COND_RECEB) REFERENCES CXRJ.COND_PAG (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT COND_PAG$PED$03
FOREIGN KEY (IMP_COND_RECEB) REFERENCES CXRJ.COND_PAG (COD);

ALTER TABLE CXRJ.CONFIRM_VENDA_ITEM ADD CONSTRAINT CONF_VENDA$CONF_VENDA_IT$01
FOREIGN KEY (CONFIRM_VENDA_REF, SEQ) REFERENCES CXRJ.CONFIRM_VENDA (REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.FATURA_CONFIRM ADD CONSTRAINT CONFIRM_VENDA$FAT_CONF$01
FOREIGN KEY (REF, SEQ) REFERENCES CXRJ.CONFIRM_VENDA (REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_CONHECIMENT_ROD_DET ADD CONSTRAINT CONH_ROD$CONH_ROD_DET$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_CONHECIMENT_ROD (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.COSIPA_FOLHA_2 ADD CONSTRAINT COSIP_FL_2_PG$COSIP_FL_2$01
FOREIGN KEY (ORD_REF, FOLHA) REFERENCES CXRJ.COSIPA_FOLHA_2_PAG (ORD_REF, FOLHA) ON DELETE CASCADE;

ALTER TABLE CXRJ.COSIPA_FOLHA_1 ADD CONSTRAINT COSIP_NEG$COSIP_FL_1$01
FOREIGN KEY (ORD_REF) REFERENCES CXRJ.COSIPA_NEGOCIAÇÃO (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.COSIPA_FOLHA_2_PAG ADD CONSTRAINT COSIP_NEG$COSIP_FL_2_PG$01
FOREIGN KEY (ORD_REF) REFERENCES CXRJ.COSIPA_NEGOCIAÇÃO (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.TIPO_REF ADD CONSTRAINT DEPTO$TIPO_REF$01
FOREIGN KEY (DEPTO) REFERENCES CXRJ.DEPTO (COD);

ALTER TABLE CXRJ.DESPESA_PADRAO ADD CONSTRAINT DESPESA$DESPESA_PADRAO$01
FOREIGN KEY (DESPESA) REFERENCES CXRJ.DESPESA (DESPESA) ON DELETE CASCADE;

ALTER TABLE CXRJ.DIVISÃO_PRODUTO ADD CONSTRAINT DIVISÃO$DIVISÃO_PROD$01
FOREIGN KEY (ESCRITÓRIO, DIVISÃO) REFERENCES CXRJ.DIVISÃO (ESCRITÓRIO, DIVISÃO) ON DELETE CASCADE;

ALTER TABLE CXRJ.DIVISÃO_TIPO_REF ADD CONSTRAINT DIVISÃO$DIVISÃO_T_REF$01
FOREIGN KEY (ESCRITÓRIO, DIVISÃO) REFERENCES CXRJ.DIVISÃO (ESCRITÓRIO, DIVISÃO);

ALTER TABLE CXRJ.EMB_DOC ADD CONSTRAINT DOC$EMB_DOC$01
FOREIGN KEY (DOC) REFERENCES CXRJ.DOC (COD);

ALTER TABLE CXRJ.BL ADD CONSTRAINT EMB$BL$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_CHECK_LIST ADD CONSTRAINT EMB$EMB_CHK_LST$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_DOC ADD CONSTRAINT EMB$EMB_DOC$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_DOC_REL ADD CONSTRAINT EMB$EMB_DOC_REL$01
FOREIGN KEY (EMB_REL) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_FAMÍLIA_GENÉRICA ADD CONSTRAINT EMB$EMB_FAM_GENER$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_FAMÍLIA ADD CONSTRAINT EMB$EMB_FAMÍLIA$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_FILTRO ADD CONSTRAINT EMB$EMB_FILTRO$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_ITEM ADD CONSTRAINT EMB$EMB_ITEM$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_LANÇ ADD CONSTRAINT EMB$EMB_LANÇ$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_MENSAGEM ADD CONSTRAINT EMB$EMB_MENSAGEM$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_RE ADD CONSTRAINT EMB$EMB_RE$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_SD ADD CONSTRAINT EMB$EMB_SD$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_TOTALIZA ADD CONSTRAINT EMB$EMB_TOTALIZA$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_ACORDO_COMPLEM ADD CONSTRAINT EMB_DOC$ACOR_COMP$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_ALADI ADD CONSTRAINT EMB_DOC$ALADI$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_BORDERÔ_I ADD CONSTRAINT EMB_DOC$BORDERÔ_I$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_BORDERÔ_P ADD CONSTRAINT EMB_DOC$BORDERÔ_P$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_CÂMARA_COMÉRCIO ADD CONSTRAINT EMB_DOC$CAMAR_COM$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_CARTA_I ADD CONSTRAINT EMB_DOC$CARTA_DOC_I$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_CARTA_P ADD CONSTRAINT EMB_DOC$CARTA_DOC_P$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_CONHECIMENT_ROD ADD CONSTRAINT EMB_DOC$CONH_ROD$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_DOC_DESTINO ADD CONSTRAINT EMB_DOC$EMB_DOC_DEST$01
FOREIGN KEY (EMB_REF, SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_DOC_REL ADD CONSTRAINT EMB_DOC$EMB_DOC_REL$01
FOREIGN KEY (EMB_REF, DOC) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_FATURA ADD CONSTRAINT EMB_DOC$FATURA_DOC$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_FATURA_JUROS ADD CONSTRAINT EMB_DOC$FATURA_JUROS$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_FECHAMENTO_CÂMB ADD CONSTRAINT EMB_DOC$FECH_CAMB$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_FIRJAN ADD CONSTRAINT EMB_DOC$FIRJAN$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_SAQUE_JUROS_2V ADD CONSTRAINT EMB_DOC$JUROS_2V$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_SAQUE_JUROS_3V ADD CONSTRAINT EMB_DOC$JUROS_3V$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_MERCOSUL_BOLIV ADD CONSTRAINT EMB_DOC$MERC_BOL$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_MERCOSUL_CHILE ADD CONSTRAINT EMB_DOC$MERC_CHI$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_MERCOSUL ADD CONSTRAINT EMB_DOC$MERCOSUL$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_PLIST_WEIG_CERT ADD CONSTRAINT EMB_DOC$PLIST$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_SAQUE_2V ADD CONSTRAINT EMB_DOC$SAQUE_2V$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_SAQUE_3V ADD CONSTRAINT EMB_DOC$SAQUE_3V$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.RESULT ADD CONSTRAINT EMB_F$RESULT$01
FOREIGN KEY (PED_REF, EMB_SEQ) REFERENCES CXRJ.EMB_F (PED_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.BL_CARGA ADD CONSTRAINT EMB_FAM_GENER$BL_CARGA$01
FOREIGN KEY (EMB_REF, FAMÍLIA_GENÉRICA) REFERENCES CXRJ.EMB_FAMÍLIA_GENÉRICA (EMB_REF, SEQ);

ALTER TABLE CXRJ.BL_CARGA ADD CONSTRAINT EMB_FAMÍLIA$BL_CARGA$01
FOREIGN KEY (EMB_REF, FAMÍLIA) REFERENCES CXRJ.EMB_FAMÍLIA (EMB_REF, SEQ);

ALTER TABLE CXRJ.EMB_ITEM ADD CONSTRAINT EMB_RE$EMB_ITEM$01
FOREIGN KEY (EMB_REF, RE) REFERENCES CXRJ.EMB_RE (EMB_REF, RE);

ALTER TABLE CXRJ.PED_ITEM ADD CONSTRAINT EMBALAGEM$PED_ITEM$01
FOREIGN KEY (EMBALAGEM) REFERENCES CXRJ.EMBALAGEM (COD);

ALTER TABLE CXRJ.DESPESA_PADRAO ADD CONSTRAINT EMPRESA$DESPESA_PADRAO$01
FOREIGN KEY (EMPRESA) REFERENCES CXRJ.EMPRESA (EMPRESA) ON DELETE CASCADE;

ALTER TABLE CXRJ.PROC ADD CONSTRAINT EMPRESA$PROC$01
FOREIGN KEY (EMPRESA) REFERENCES CXRJ.EMPRESA (EMPRESA) ON DELETE CASCADE;

ALTER TABLE CXRJ.DIVISÃO ADD CONSTRAINT ESCRITÓRIO$DIVISÃO$01
FOREIGN KEY (ESCRITÓRIO) REFERENCES CXRJ.ESCRITÓRIO (ESCRITÓRIO) ON DELETE CASCADE;

ALTER TABLE CXRJ.FATURA_CONFIRM_ITEM ADD CONSTRAINT FAT_CONF$FAT_CONF_ITEM$01
FOREIGN KEY (CONFIRM_VENDA_REF, SEQ) REFERENCES CXRJ.FATURA_CONFIRM (REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_FATURA_DET ADD CONSTRAINT FATURA_DOC$FATURA_DET$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_FATURA (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_FATURA_TOT ADD CONSTRAINT FATURA_DOC$FATURA_TOT$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_FATURA (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.FAX_CHAVE ADD CONSTRAINT FAX$FAX_CHAVE$01
FOREIGN KEY (FAX_REF) REFERENCES CXRJ.FAX (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.FAX_DESTINO ADD CONSTRAINT FAX$FAX_DESTINO$01
FOREIGN KEY (FAX_REF) REFERENCES CXRJ.FAX (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.BL_CARGA ADD CONSTRAINT FECH$BL_CARGA$01
FOREIGN KEY (FECH_REF) REFERENCES CXRJ.FECH (REF);

ALTER TABLE CXRJ.CARTA_FECH ADD CONSTRAINT FECH$CARTA_FECH$01
FOREIGN KEY (FECH_REF) REFERENCES CXRJ.FECH (REF);

ALTER TABLE CXRJ.FATURA ADD CONSTRAINT FECH$FATURA$01
FOREIGN KEY (FECH_REF) REFERENCES CXRJ.FECH (REF);

ALTER TABLE CXRJ.FECH_CARGA ADD CONSTRAINT FECH$FECH_CARGA$01
FOREIGN KEY (FECH_REF) REFERENCES CXRJ.FECH (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.FECH_CONTATO ADD CONSTRAINT FECH$FECH_CONTATO$01
FOREIGN KEY (FECH_REF) REFERENCES CXRJ.FECH (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.FECH_SUBSTITUÍDO ADD CONSTRAINT FECH$FECH_SUBSTUÍD$01
FOREIGN KEY (SUBSTITUTO) REFERENCES CXRJ.FECH (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.FECH_SUBSTITUÍDO ADD CONSTRAINT FECH$FECH_SUBSTUÍD$02
FOREIGN KEY (SUBSTITUÍDO) REFERENCES CXRJ.FECH (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.INSTRUÇÃO_PAG_FECH ADD CONSTRAINT FECH$INSTR_PG_FECH$01
FOREIGN KEY (FECH_REF) REFERENCES CXRJ.FECH (REF);

ALTER TABLE CXRJ.NOTA_CRÉDITO_FECH ADD CONSTRAINT FECH$NT_CRÉD_FECH$01
FOREIGN KEY (FECH_REF) REFERENCES CXRJ.FECH (REF);

ALTER TABLE CXRJ.NOTA_DÉBITO_FECH ADD CONSTRAINT FECH$NT_DEB_FECH$01
FOREIGN KEY (FECH_REF) REFERENCES CXRJ.FECH (REF);

ALTER TABLE CXRJ.PROG ADD CONSTRAINT FECH$PROG$01
FOREIGN KEY (FECH_REF) REFERENCES CXRJ.FECH (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_FECHAMENTO_CÂMB_TOT ADD CONSTRAINT FECH_CAMB$FECH_CAMB_TOT$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_FECHAMENTO_CÂMB (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.PROG_CARGA ADD CONSTRAINT FECH_CARGA$PROG_CARGA$01
FOREIGN KEY (FECH_REF, PED_REF, PED_ITEM) REFERENCES CXRJ.FECH_CARGA (FECH_REF, PED_REF, PED_ITEM) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_FIRJAN_DET ADD CONSTRAINT FIRJAN$FIRJAN_DET$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_FIRJAN (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.PRODUTO ADD CONSTRAINT GRUPO_PROD$PRODUTO$01
FOREIGN KEY (GRUPO) REFERENCES CXRJ.GRUPO_PRODUTO (COD);

ALTER TABLE CXRJ.HIST_PADRAO_LANÇAMENTO ADD CONSTRAINT HIST_PADRAO$HIST_PADRAO_LANÇAMENTO$01
FOREIGN KEY (CLIENTE, PAÍS_DESTINO, FORNECEDOR, GRUPO) REFERENCES CXRJ.HIST_PADRAO (CLIENTE, PAÍS_DESTINO, FORNECEDOR, GRUPO) ON DELETE CASCADE;

ALTER TABLE CXRJ.CARTA ADD CONSTRAINT IDIOMA$CARTA$01
FOREIGN KEY (IDIOMA) REFERENCES CXRJ.IDIOMA (COD);

ALTER TABLE CXRJ.EMB ADD CONSTRAINT IDIOMA$EMB$01
FOREIGN KEY (IDIOMA) REFERENCES CXRJ.IDIOMA (COD);

ALTER TABLE CXRJ.PAÍS ADD CONSTRAINT IDIOMA$PAÍS$01
FOREIGN KEY (IDIOMA) REFERENCES CXRJ.IDIOMA (COD);

ALTER TABLE CXRJ.EMB_LANÇ ADD CONSTRAINT INCOTERM$EMB_LANÇ$01
FOREIGN KEY (TOTAL_TIPO) REFERENCES CXRJ.INCOTERM (COD);

ALTER TABLE CXRJ.INCOTERM_LANÇ ADD CONSTRAINT INCOTERM$INCOTERM_LNÇ$01
FOREIGN KEY (INCOTERM) REFERENCES CXRJ.INCOTERM (COD) ON DELETE CASCADE;

ALTER TABLE CXRJ.PED ADD CONSTRAINT INCOTERM$PED$01
FOREIGN KEY (FORNECEDOR_COND_VENDA) REFERENCES CXRJ.INCOTERM (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT INCOTERM$PED$02
FOREIGN KEY (EXP_COND_VENDA) REFERENCES CXRJ.INCOTERM (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT INCOTERM$PED$03
FOREIGN KEY (IMP_COND_VENDA) REFERENCES CXRJ.INCOTERM (COD);

ALTER TABLE CXRJ.PED_LANÇ ADD CONSTRAINT INCOTERM$PED_LANÇ$01
FOREIGN KEY (TOTAL_TIPO) REFERENCES CXRJ.INCOTERM (COD);

ALTER TABLE CXRJ.PED_RESULT ADD CONSTRAINT INCOTERM$PED_RESULT$01
FOREIGN KEY (TOTAL_TIPO) REFERENCES CXRJ.INCOTERM (COD);

ALTER TABLE CXRJ.INSTRUÇÃO_PAG_FECH ADD CONSTRAINT INSTRUÇÃO_PAG$INSTR_PG_FECH$01
FOREIGN KEY (INSTRUÇÃO_PAG_REF) REFERENCES CXRJ.INSTRUÇÃO_PAG (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_LANÇ ADD CONSTRAINT LANÇ$EMB_LANÇ$01
FOREIGN KEY (LANÇ) REFERENCES CXRJ.LANÇ (LANÇ);

ALTER TABLE CXRJ.EMB_TOTALIZA ADD CONSTRAINT LANÇ$EMB_TOTALIZA$01
FOREIGN KEY (LANÇ) REFERENCES CXRJ.LANÇ (LANÇ);

ALTER TABLE CXRJ.INCOTERM_LANÇ ADD CONSTRAINT LANÇ$INCOTERM_LNÇ$01
FOREIGN KEY (LANÇ) REFERENCES CXRJ.LANÇ (LANÇ);

ALTER TABLE CXRJ.PED_LANÇ ADD CONSTRAINT LANÇ$PED_LANÇ$01
FOREIGN KEY (LANÇ) REFERENCES CXRJ.LANÇ (LANÇ);

ALTER TABLE CXRJ.PED_RESULT ADD CONSTRAINT LANÇ$PED_RESULT$01
FOREIGN KEY (LANÇ) REFERENCES CXRJ.LANÇ (LANÇ);

ALTER TABLE CXRJ.DOC_MERCOSUL_BOLIV_DET ADD CONSTRAINT MERC_BOL$MERC_BOL_DET$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_MERCOSUL_BOLIV (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_MERCOSUL_BOLIV_NORMA ADD CONSTRAINT MERC_BOL$MERC_BOL_NOR$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_MERCOSUL_BOLIV (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_MERCOSUL_CHILE_DET ADD CONSTRAINT MERC_CHI$MERC_CHI_DET$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_MERCOSUL_CHILE (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_MERCOSUL_CHILE_NORMA ADD CONSTRAINT MERC_CHI$MERC_CHI_NOR$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_MERCOSUL_CHILE (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.MERCADO_PORTO ADD CONSTRAINT MERCADO$MERCADO_PORTO$01
FOREIGN KEY (ANO_MÊS, CONTRATANTE, FORNECEDOR, TRANSPORTADOR, PROD) REFERENCES CXRJ.MERCADO (ANO_MÊS, CONTRATANTE, FORNECEDOR, TRANSPORTADOR, PROD) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_MERCOSUL_DET ADD CONSTRAINT MERCOSUL$MERCOSUL_DET$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_MERCOSUL (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_MERCOSUL_NORMA ADD CONSTRAINT MERCOSUL$MERCOSUL_NOR$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_MERCOSUL (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.FECH ADD CONSTRAINT MOD_FRETE$FECH$01
FOREIGN KEY (FRETE_DETALHE) REFERENCES CXRJ.MODALIDADE_FRETE (COD);

ALTER TABLE CXRJ.FRETE ADD CONSTRAINT MOD_FRETE$FRETE$01
FOREIGN KEY (FRETE_DETALHE) REFERENCES CXRJ.MODALIDADE_FRETE (COD);

ALTER TABLE CXRJ.MERCADO ADD CONSTRAINT MOD_FRETE$MERCADO$01
FOREIGN KEY (FRETE_COND) REFERENCES CXRJ.MODALIDADE_FRETE (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT MOD_FRETE$PED$01
FOREIGN KEY (FRETE_COND) REFERENCES CXRJ.MODALIDADE_FRETE (COD);

ALTER TABLE CXRJ.EMB ADD CONSTRAINT MOEDA$EMB$01
FOREIGN KEY (MOEDA) REFERENCES CXRJ.MOEDA (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT MOEDA$FECH$01
FOREIGN KEY (MOEDA) REFERENCES CXRJ.MOEDA (COD);

ALTER TABLE CXRJ.INSTRUÇÃO_PAG ADD CONSTRAINT MOEDA$INSTRUÇÃO_PAG$01
FOREIGN KEY (MOEDA) REFERENCES CXRJ.MOEDA (COD);

ALTER TABLE CXRJ.NOTA_CRÉDITO ADD CONSTRAINT MOEDA$NOTA_CRÉDITO$01
FOREIGN KEY (MOEDA) REFERENCES CXRJ.MOEDA (COD);

ALTER TABLE CXRJ.NOTA_DÉBITO ADD CONSTRAINT MOEDA$NOTA_DÉBITO$01
FOREIGN KEY (MOEDA) REFERENCES CXRJ.MOEDA (COD);

ALTER TABLE CXRJ.NOTA_CRÉDITO_PAG ADD CONSTRAINT MOEDA$NT_CRED_PAG$01
FOREIGN KEY (MOEDA) REFERENCES CXRJ.MOEDA (COD);

ALTER TABLE CXRJ.NOTA_DÉBITO_RECEB ADD CONSTRAINT MOEDA$NT_DEB_RECEB$01
FOREIGN KEY (MOEDA) REFERENCES CXRJ.MOEDA (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT MOEDA$PED$01
FOREIGN KEY (MOEDA) REFERENCES CXRJ.MOEDA (COD);

ALTER TABLE CXRJ.VIAGEM ADD CONSTRAINT NAVIO$VIAGEM$01
FOREIGN KEY (NAVIO) REFERENCES CXRJ.NAVIO (COD);

ALTER TABLE CXRJ.VIAGEM ADD CONSTRAINT NAVIO$VIAGEM$02
FOREIGN KEY (NAVIO_ÚLTIMO) REFERENCES CXRJ.NAVIO (COD);

ALTER TABLE CXRJ.NOTA_CRÉDITO_FECH ADD CONSTRAINT NOTA_CRÉDITO$NT_CRÉD_FECH$01
FOREIGN KEY (NOTA_CRÉDITO_REF) REFERENCES CXRJ.NOTA_CRÉDITO (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.NOTA_CRÉDITO_PAG ADD CONSTRAINT NOTA_CRÉDITO$NT_CRED_PAG$01
FOREIGN KEY (NOTA_CRÉDITO_REF) REFERENCES CXRJ.NOTA_CRÉDITO (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.NOTA_DÉBITO_FECH ADD CONSTRAINT NOTA_DÉBITO$NT_DEB_FECH$01
FOREIGN KEY (NOTA_DÉBITO_REF) REFERENCES CXRJ.NOTA_DÉBITO (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.NOTA_DÉBITO_RECEB ADD CONSTRAINT NOTA_DÉBITO$NT_DEB_RECEB$01
FOREIGN KEY (NOTA_DÉBITO_REF) REFERENCES CXRJ.NOTA_DÉBITO (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.CIA ADD CONSTRAINT PAÍS$CIA$01
FOREIGN KEY (PAÍS) REFERENCES CXRJ.PAÍS (COD);

ALTER TABLE CXRJ.NAVIO ADD CONSTRAINT PAÍS$NAVIO$01
FOREIGN KEY (BANDEIRA) REFERENCES CXRJ.PAÍS (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT PAÍS$PED$01
FOREIGN KEY (PAÍS_DESTINO) REFERENCES CXRJ.PAÍS (COD);

ALTER TABLE CXRJ.PORTO ADD CONSTRAINT PAÍS$PORTO$01
FOREIGN KEY (PAÍS) REFERENCES CXRJ.PAÍS (COD);

ALTER TABLE CXRJ.CONFIRM_VENDA ADD CONSTRAINT PED$CONF_VENDA$01
FOREIGN KEY (PED_REF) REFERENCES CXRJ.PED (REF);

ALTER TABLE CXRJ.EMB_F ADD CONSTRAINT PED$EMB_F$01
FOREIGN KEY (PED_REF) REFERENCES CXRJ.PED (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.PED_CONTATO ADD CONSTRAINT PED$PED_CONTAT$01
FOREIGN KEY (PED_REF) REFERENCES CXRJ.PED (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.PED_ITEM ADD CONSTRAINT PED$PED_ITEM$01
FOREIGN KEY (PED_REF) REFERENCES CXRJ.PED (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.PED_LANÇ ADD CONSTRAINT PED$PED_LANÇ$01
FOREIGN KEY (PED_REF) REFERENCES CXRJ.PED (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.PED_RESULT ADD CONSTRAINT PED$PED_RESULT$01
FOREIGN KEY (PED_REF) REFERENCES CXRJ.PED (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.PED ADD CONSTRAINT PED_FORMA_PAGAMENTO$PED$01
FOREIGN KEY (REF) REFERENCES CXRJ.PED_FORMA_PAGAMENTO (PED_REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.BL_CARGA ADD CONSTRAINT PED_ITEM$BL_CARGA$01
FOREIGN KEY (PED_REF, PED_ITEM) REFERENCES CXRJ.PED_ITEM (PED_REF, ITEM);

ALTER TABLE CXRJ.FECH_CARGA ADD CONSTRAINT PED_ITEM$FECH_CARGA$01
FOREIGN KEY (PED_REF, PED_ITEM) REFERENCES CXRJ.PED_ITEM (PED_REF, ITEM) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_PLIST_WEIG_CERT_DET ADD CONSTRAINT PLIST$PLIST_DET$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_PLIST_WEIG_CERT (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.FRETE ADD CONSTRAINT PORTO$FRETE$01
FOREIGN KEY (DESCARGA_PORTO) REFERENCES CXRJ.PORTO (COD);

ALTER TABLE CXRJ.MERCADO_PORTO ADD CONSTRAINT PORTO$MERCADO_PORTO$01
FOREIGN KEY (PORTO) REFERENCES CXRJ.PORTO (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT PORTO$PED$01
FOREIGN KEY (CARGA_PORTO) REFERENCES CXRJ.PORTO (COD);

ALTER TABLE CXRJ.PED_ITEM ADD CONSTRAINT PORTO$PED_ITEM$01
FOREIGN KEY (DESCARGA_PORTO) REFERENCES CXRJ.PORTO (COD);

ALTER TABLE CXRJ.VIAGEM_ESCALA ADD CONSTRAINT PORTO$VIAGEM_ESCALA$01
FOREIGN KEY (PORTO) REFERENCES CXRJ.PORTO (COD);

ALTER TABLE CXRJ.PROCESSO_LANÇAMENTO ADD CONSTRAINT PROCESSO$PROCESSO_LANÇAMENTO$01
FOREIGN KEY (EMPRESA, FINA_REF, PROC_SEQ) REFERENCES CXRJ.PROCESSO (EMPRESA, REF, SEQ);

ALTER TABLE CXRJ.DIVISÃO_PRODUTO ADD CONSTRAINT PRODUTO$DIVISÃO_PROD$01
FOREIGN KEY (PROD) REFERENCES CXRJ.PRODUTO (COD);

ALTER TABLE CXRJ.MERCADO ADD CONSTRAINT PRODUTO$MERCADO$01
FOREIGN KEY (PROD) REFERENCES CXRJ.PRODUTO (COD);

ALTER TABLE CXRJ.PED_ITEM ADD CONSTRAINT PRODUTO$PED_ITEM$01
FOREIGN KEY (PROD) REFERENCES CXRJ.PRODUTO (COD);

ALTER TABLE CXRJ.PRODUTO_ESPECIF ADD CONSTRAINT PRODUTO$PROD_ESPECIF$01
FOREIGN KEY (COD) REFERENCES CXRJ.PRODUTO (COD) ON DELETE CASCADE;

ALTER TABLE CXRJ.PROG_CARGA ADD CONSTRAINT PROG$PROG_CARGA$01
FOREIGN KEY (FECH_REF, POSICIONAMENTO_DATA) REFERENCES CXRJ.PROG (FECH_REF, POSICIONAMENTO_DATA) ON DELETE CASCADE;

ALTER TABLE CXRJ.CIA_RAMO_ATIVIDADE ADD CONSTRAINT RAMO_ATIVIDAD$CIA_ATIVIDAD$01
FOREIGN KEY (RAMO_ATIVIDADE) REFERENCES CXRJ.RAMO_ATIVIDADE (COD) ON DELETE CASCADE;

ALTER TABLE CXRJ.DIVISÃO_TIPO_REF ADD CONSTRAINT TIPO_REF$DIVISÃO_T_REF$01
FOREIGN KEY (TIPO_REF) REFERENCES CXRJ.TIPO_REF (TIPO) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB ADD CONSTRAINT UNID_QUANTID$EMB$01
FOREIGN KEY (FRETE_UNID) REFERENCES CXRJ.UNID_QUANTID (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT UNID_QUANTID$FECH$01
FOREIGN KEY (FRETE_UNID) REFERENCES CXRJ.UNID_QUANTID (COD);

ALTER TABLE CXRJ.FRETE ADD CONSTRAINT UNID_QUANTID$FRETE$01
FOREIGN KEY (FRETE_UNID) REFERENCES CXRJ.UNID_QUANTID (COD);

ALTER TABLE CXRJ.PED_ITEM ADD CONSTRAINT UNID_QUANTID$PED_ITEM$01
FOREIGN KEY (PED_UNID) REFERENCES CXRJ.UNID_QUANTID (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT VIA_TRANSPORT$PED$01
FOREIGN KEY (VIA_TRANSPORTE) REFERENCES CXRJ.VIA_TRANSPORTE (COD);

ALTER TABLE CXRJ.BL ADD CONSTRAINT VIAGEM$BL$01
FOREIGN KEY (VIAGEM_REF) REFERENCES CXRJ.VIAGEM (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB ADD CONSTRAINT VIAGEM$EMB$01
FOREIGN KEY (VIAGEM) REFERENCES CXRJ.VIAGEM (REF);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT VIAGEM$FECH$01
FOREIGN KEY (VIAGEM_REF) REFERENCES CXRJ.VIAGEM (REF);

ALTER TABLE CXRJ.VIAGEM_ESCALA ADD CONSTRAINT VIAGEM$VIAGEM_ESCALA$01
FOREIGN KEY (VIAGEM_REF) REFERENCES CXRJ.VIAGEM (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.FECH ADD CONSTRAINT VIAGEM_ESCALA$FECH$01
FOREIGN KEY (VIAGEM_REF, CARGA_PORTO_ESCALA) REFERENCES CXRJ.VIAGEM_ESCALA (VIAGEM_REF, ESCALA);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT VIAGEM_ESCALA$FECH$02
FOREIGN KEY (VIAGEM_REF, DESCARGA_PORTO_ESCALA) REFERENCES CXRJ.VIAGEM_ESCALA (VIAGEM_REF, ESCALA);

CREATE OR REPLACE TRIGGER BEF_ANEXO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.ANEXO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'ANEXO' AND CHAVE = :OLD.NOME;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('ANEXO', :OLD.NOME, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'ANEXO' AND CHAVE = :OLD.NOME;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_BL BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.BL FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'BL' AND CHAVE = :OLD.VIAGEM_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('BL', :OLD.VIAGEM_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'BL' AND CHAVE = :OLD.VIAGEM_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_BL_CARGA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.BL_CARGA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'BL_CARGA' AND CHAVE = :OLD.PED_REF || :OLD.PED_ITEM || :OLD.VIAGEM_REF || :OLD.BL_SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('BL_CARGA', :OLD.PED_REF || :OLD.PED_ITEM || :OLD.VIAGEM_REF || :OLD.BL_SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'BL_CARGA' AND CHAVE = :OLD.PED_REF || :OLD.PED_ITEM || :OLD.VIAGEM_REF || :OLD.BL_SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CARTA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.CARTA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CARTA' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('CARTA', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'CARTA' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CARTA_CRÉDITO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.CARTA_CRÉDITO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CARTA_CRÉDITO' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('CARTA_CRÉDITO', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'CARTA_CRÉDITO' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CARTA_FECH BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.CARTA_FECH FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CARTA_FECH' AND CHAVE = :OLD.CARTA_REF || :OLD.FECH_REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('CARTA_FECH', :OLD.CARTA_REF || :OLD.FECH_REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'CARTA_FECH' AND CHAVE = :OLD.CARTA_REF || :OLD.FECH_REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CIA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.CIA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
   CHAVE_STR VARCHAR2(32000);
   TOT_MAX INTEGER;
BEGIN
SELECT NVL(MAX(SEQ),0)+1 INTO TOT_MAX FROM SYS_CAD_LOG;
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CIA' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('CIA', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'CIA' AND CHAVE = :OLD.COD;
      END IF;
     INSERT INTO CXRJ.SYS_CAD_LOG (SEQ,NOME_TABELA,CHAVE,MOMENTO,USUÁRIO,LOCAL,AÇÃO)  VALUES (TOT_MAX,'CIA', :OLD.COD, SYSDATE, USER, 'CXRJ','DELETADO');
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
            INSERT INTO CXRJ.SYS_CAD_LOG(SEQ,NOME_TABELA,CHAVE,MOMENTO,USUÁRIO,LOCAL,AÇÃO) VALUES (TOT_MAX,'CIA', :NEW.COD, SYSDATE, USER, 'CXRJ','INSERIDO');
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
IF :OLD.COD!=:NEW.COD THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> COD: </font></b> '|| :OLD.COD ||' <font color=#FF0000>Para:</font> ' || :NEW.COD || '<br>'; ELSE CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> COD: </font></b> '|| :OLD.COD ||' <font color=#FF0000></font>'; END IF;
         IF :OLD.CGC!=:NEW.CGC THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> CGC: </font></b> '|| :OLD.CGC ||' <font color=#FF0000>Para:</font> ' || :NEW.CGC || '<br>'; END IF;IF :OLD.NOME!=:NEW.NOME THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> NOME: </font></b> '|| :OLD.NOME ||' <font color=#FF0000>Para:</font> ' || :NEW.NOME || '<br>'; END IF;IF :OLD.ENDEREÇO!=:NEW.ENDEREÇO THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> ENDEREÇO: </font></b> '|| :OLD.ENDEREÇO ||' <font color=#FF0000>Para:</font> ' || :NEW.ENDEREÇO || '<br>'; END IF;IF :OLD.BAIRRO!=:NEW.BAIRRO THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> BAIRRO: </font></b> '|| :OLD.BAIRRO ||' <font color=#FF0000>Para:</font> ' || :NEW.BAIRRO || '<br>'; END IF;IF :OLD.CIDADE!=:NEW.CIDADE THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> CIDADE: </font></b> '|| :OLD.CIDADE ||' <font color=#FF0000>Para:</font> ' || :NEW.CIDADE || '<br>'; END IF;IF :OLD.ESTADO!=:NEW.ESTADO THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> ESTADO: </font></b> '|| :OLD.ESTADO ||' <font color=#FF0000>Para:</font> ' || :NEW.ESTADO || '<br>'; END IF;IF :OLD.PAÍS!=:NEW.PAÍS THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> PAÍS: </font></b> '|| :OLD.PAÍS ||' <font color=#FF0000>Para:</font> ' || :NEW.PAÍS || '<br>'; END IF;IF :OLD.CEP!=:NEW.CEP THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> CEP: </font></b> '|| :OLD.CEP ||' <font 
         color=#FF0000>Para:</font> ' || :NEW.CEP || '<br>'; END IF;IF :OLD.CAIXA_POSTAL!=:NEW.CAIXA_POSTAL THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> CAIXA_POSTAL: </font></b> '|| :OLD.CAIXA_POSTAL ||' <font color=#FF0000>Para:</font> ' || :NEW.CAIXA_POSTAL || '<br>'; END IF;IF :OLD.TELEFONE!=:NEW.TELEFONE THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> TELEFONE: </font></b> '|| :OLD.TELEFONE ||' <font color=#FF0000>Para:</font> ' || :NEW.TELEFONE || '<br>'; END IF;IF :OLD.FAX!=:NEW.FAX THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> FAX: </font></b> '|| :OLD.FAX ||' <font color=#FF0000>Para:</font> ' || :NEW.FAX || '<br>'; END IF;IF :OLD.TELEX!=:NEW.TELEX THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> TELEX: </font></b> '|| :OLD.TELEX ||' <font color=#FF0000>Para:</font> ' || :NEW.TELEX || '<br>'; END IF;IF :OLD.E_MAIL!=:NEW.E_MAIL THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> E_MAIL: </font></b> '|| :OLD.E_MAIL ||' <font color=#FF0000>Para:</font> ' || :NEW.E_MAIL || '<br>'; END IF;IF :OLD.F_COD!=:NEW.F_COD THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> F_COD: </font></b> '|| :OLD.F_COD ||' <font color=#FF0000>Para:</font> ' || :NEW.F_COD || '<br>'; END IF;IF :OLD.MARCAÇÃO!=:NEW.MARCAÇÃO THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> MARCAÇÃO: </font></b> '|| :OLD.MARCAÇÃO ||' <font color=#FF0000>Para:</font> ' || :NEW.MARCAÇÃO || '<br>'; END IF;IF :OLD.OBS!=:NEW.OBS THEN 
         CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> OBS: </font></b> '|| :OLD.OBS ||' <font color=#FF0000>Para:</font> ' || :NEW.OBS || '<br>'; END IF;IF :OLD.LOCAL_RESULT!=:NEW.LOCAL_RESULT THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> LOCAL_RESULT: </font></b> '|| :OLD.LOCAL_RESULT ||' <font color=#FF0000>Para:</font> ' || :NEW.LOCAL_RESULT || '<br>'; END IF;
             INSERT INTO CXRJ.SYS_CAD_LOG(SEQ,NOME_TABELA,CHAVE,MOMENTO,USUÁRIO,LOCAL,AÇÃO) VALUES (TOT_MAX,'CIA', CHAVE_STR , SYSDATE, USER, 'CXRJ','ALTERADO');
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CIA_CONTATO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.CIA_CONTATO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
   CHAVE_STR VARCHAR2(32000);
   TOT_MAX INTEGER;
BEGIN
SELECT NVL(MAX(SEQ),0)+1 INTO TOT_MAX FROM SYS_CAD_LOG;
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CIA_CONTATO' AND CHAVE = :OLD.CIA_COD || :OLD.CONTATO_NOME;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('CIA_CONTATO', :OLD.CIA_COD || :OLD.CONTATO_NOME, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'CIA_CONTATO' AND CHAVE = :OLD.CIA_COD || :OLD.CONTATO_NOME;
      END IF;
     INSERT INTO CXRJ.SYS_CAD_LOG (SEQ,NOME_TABELA,CHAVE,MOMENTO,USUÁRIO,LOCAL,AÇÃO)  VALUES (TOT_MAX,'CIA_CONTATO', :OLD.CIA_COD || '  ' || :OLD.CONTATO_NOME, SYSDATE, USER, 'CXRJ','DELETADO');
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
            INSERT INTO CXRJ.SYS_CAD_LOG(SEQ,NOME_TABELA,CHAVE,MOMENTO,USUÁRIO,LOCAL,AÇÃO) VALUES (TOT_MAX,'CIA_CONTATO', :NEW.CIA_COD || ' ** ' || :NEW.CONTATO_NOME, SYSDATE, USER, 'CXRJ','INSERIDO');
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
IF :OLD.CIA_COD!=:NEW.CIA_COD THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> CIA_COD: </font></b> '|| :OLD.CIA_COD ||' <font color=#FF0000>Para:</font> ' || :NEW.CIA_COD || '<br>'; ELSE CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> CIA_COD: </font></b> '|| :OLD.CIA_COD ||' <font color=#FF0000></font>'; END IF;
IF :OLD.CONTATO_NOME!=:NEW.CONTATO_NOME THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> CONTATO_NOME: </font></b> '|| :OLD.CONTATO_NOME ||' <font color=#FF0000>Para:</font> ' || :NEW.CONTATO_NOME || '<br>'; ELSE CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> CONTATO_NOME: </font></b> '|| :OLD.CONTATO_NOME ||' <font color=#FF0000></font>'; END IF;
         IF :OLD.TELEFONE!=:NEW.TELEFONE THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> TELEFONE: </font></b> '|| :OLD.TELEFONE ||' <font color=#FF0000>Para:</font> ' || :NEW.TELEFONE || '<br>'; END IF;IF :OLD.FUNÇÃO!=:NEW.FUNÇÃO THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> FUNÇÃO: </font></b> '|| :OLD.FUNÇÃO ||' <font color=#FF0000>Para:</font> ' || :NEW.FUNÇÃO || '<br>'; END IF;
             INSERT INTO CXRJ.SYS_CAD_LOG(SEQ,NOME_TABELA,CHAVE,MOMENTO,USUÁRIO,LOCAL,AÇÃO) VALUES (TOT_MAX,'CIA_CONTATO', CHAVE_STR , SYSDATE, USER, 'CXRJ','ALTERADO');
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CIA_RAMO_ATIVIDADE BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.CIA_RAMO_ATIVIDADE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
   CHAVE_STR VARCHAR2(32000);
   TOT_MAX INTEGER;
BEGIN
SELECT NVL(MAX(SEQ),0)+1 INTO TOT_MAX FROM SYS_CAD_LOG;
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CIA_RAMO_ATIVIDADE' AND CHAVE = :OLD.CIA_COD || :OLD.RAMO_ATIVIDADE;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('CIA_RAMO_ATIVIDADE', :OLD.CIA_COD || :OLD.RAMO_ATIVIDADE, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'CIA_RAMO_ATIVIDADE' AND CHAVE = :OLD.CIA_COD || :OLD.RAMO_ATIVIDADE;
      END IF;
     INSERT INTO CXRJ.SYS_CAD_LOG (SEQ,NOME_TABELA,CHAVE,MOMENTO,USUÁRIO,LOCAL,AÇÃO)  VALUES (TOT_MAX,'CIA_RAMO_ATIVIDADE', :OLD.CIA_COD || '  ' || :OLD.RAMO_ATIVIDADE, SYSDATE, USER, 'CXRJ','DELETADO');
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
            INSERT INTO CXRJ.SYS_CAD_LOG(SEQ,NOME_TABELA,CHAVE,MOMENTO,USUÁRIO,LOCAL,AÇÃO) VALUES (TOT_MAX,'CIA_RAMO_ATIVIDADE', :NEW.CIA_COD || ' ** ' || :NEW.RAMO_ATIVIDADE, SYSDATE, USER, 'CXRJ','INSERIDO');
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
IF :OLD.CIA_COD!=:NEW.CIA_COD THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> CIA_COD: </font></b> '|| :OLD.CIA_COD ||' <font color=#FF0000>Para:</font> ' || :NEW.CIA_COD || '<br>'; ELSE CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> CIA_COD: </font></b> '|| :OLD.CIA_COD ||' <font color=#FF0000></font>'; END IF;
IF :OLD.RAMO_ATIVIDADE!=:NEW.RAMO_ATIVIDADE THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> RAMO_ATIVIDADE: </font></b> '|| :OLD.RAMO_ATIVIDADE ||' <font color=#FF0000>Para:</font> ' || :NEW.RAMO_ATIVIDADE || '<br>'; ELSE CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> RAMO_ATIVIDADE: </font></b> '|| :OLD.RAMO_ATIVIDADE ||' <font color=#FF0000></font>'; END IF;

             INSERT INTO CXRJ.SYS_CAD_LOG(SEQ,NOME_TABELA,CHAVE,MOMENTO,USUÁRIO,LOCAL,AÇÃO) VALUES (TOT_MAX,'CIA_RAMO_ATIVIDADE', CHAVE_STR , SYSDATE, USER, 'CXRJ','ALTERADO');
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_COND_PAG BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.COND_PAG FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'COND_PAG' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('COND_PAG', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'COND_PAG' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CONFIRM_VENDA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.CONFIRM_VENDA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CONFIRM_VENDA' AND CHAVE = :OLD.REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('CONFIRM_VENDA', :OLD.REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'CONFIRM_VENDA' AND CHAVE = :OLD.REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CONFIRM_VENDA_ITEM BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.CONFIRM_VENDA_ITEM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CONFIRM_VENDA_ITEM' AND CHAVE = :OLD.CONFIRM_VENDA_REF || :OLD.SEQ || :OLD.ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('CONFIRM_VENDA_ITEM', :OLD.CONFIRM_VENDA_REF || :OLD.SEQ || :OLD.ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'CONFIRM_VENDA_ITEM' AND CHAVE = :OLD.CONFIRM_VENDA_REF || :OLD.SEQ || :OLD.ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CONTA_CORRENTE BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.CONTA_CORRENTE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CONTA_CORRENTE' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('CONTA_CORRENTE', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'CONTA_CORRENTE' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_COSIPA_FOLHA_1 BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.COSIPA_FOLHA_1 FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'COSIPA_FOLHA_1' AND CHAVE = :OLD.ORD_REF || :OLD.ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('COSIPA_FOLHA_1', :OLD.ORD_REF || :OLD.ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'COSIPA_FOLHA_1' AND CHAVE = :OLD.ORD_REF || :OLD.ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_COSIPA_FOLHA_2 BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.COSIPA_FOLHA_2 FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'COSIPA_FOLHA_2' AND CHAVE = :OLD.ORD_REF || :OLD.FOLHA || :OLD.ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('COSIPA_FOLHA_2', :OLD.ORD_REF || :OLD.FOLHA || :OLD.ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'COSIPA_FOLHA_2' AND CHAVE = :OLD.ORD_REF || :OLD.FOLHA || :OLD.ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_COSIPA_FOLHA_2_PAG BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.COSIPA_FOLHA_2_PAG FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'COSIPA_FOLHA_2_PAG' AND CHAVE = :OLD.ORD_REF || :OLD.FOLHA;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('COSIPA_FOLHA_2_PAG', :OLD.ORD_REF || :OLD.FOLHA, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'COSIPA_FOLHA_2_PAG' AND CHAVE = :OLD.ORD_REF || :OLD.FOLHA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_COSIPA_NEGOCIAÇÃO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.COSIPA_NEGOCIAÇÃO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'COSIPA_NEGOCIAÇÃO' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('COSIPA_NEGOCIAÇÃO', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'COSIPA_NEGOCIAÇÃO' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DEPTO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DEPTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DEPTO' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DEPTO', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DEPTO' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DIVISÃO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DIVISÃO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DIVISÃO' AND CHAVE = :OLD.ESCRITÓRIO || :OLD.DIVISÃO;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DIVISÃO', :OLD.ESCRITÓRIO || :OLD.DIVISÃO, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DIVISÃO' AND CHAVE = :OLD.ESCRITÓRIO || :OLD.DIVISÃO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DIVISÃO_PRODUTO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DIVISÃO_PRODUTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DIVISÃO_PRODUTO' AND CHAVE = :OLD.ESCRITÓRIO || :OLD.DIVISÃO || :OLD.PROD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DIVISÃO_PRODUTO', :OLD.ESCRITÓRIO || :OLD.DIVISÃO || :OLD.PROD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DIVISÃO_PRODUTO' AND CHAVE = :OLD.ESCRITÓRIO || :OLD.DIVISÃO || :OLD.PROD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DIVISÃO_TIPO_REF BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DIVISÃO_TIPO_REF FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DIVISÃO_TIPO_REF' AND CHAVE = :OLD.ESCRITÓRIO || :OLD.DIVISÃO || :OLD.TIPO_REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DIVISÃO_TIPO_REF', :OLD.ESCRITÓRIO || :OLD.DIVISÃO || :OLD.TIPO_REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DIVISÃO_TIPO_REF' AND CHAVE = :OLD.ESCRITÓRIO || :OLD.DIVISÃO || :OLD.TIPO_REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_ALADI BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_ALADI FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_ALADI' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_ALADI', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_ALADI' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_ALADI_DET BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_ALADI_DET FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_ALADI_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_ALADI_DET', :OLD.DOC_SEQ || :OLD.SEQ_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_ALADI_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_ALADI_NORMA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_ALADI_NORMA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_ALADI_NORMA' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_NORMA;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_ALADI_NORMA', :OLD.DOC_SEQ || :OLD.SEQ_NORMA, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_ALADI_NORMA' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_NORMA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_BORDERÔ_P BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_BORDERÔ_P FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_BORDERÔ_P' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_BORDERÔ_P', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_BORDERÔ_P' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_CÂMARA_COMÉRCIO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_CÂMARA_COMÉRCIO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_CÂMARA_COMÉRCIO' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_CÂMARA_COMÉRCIO', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_CÂMARA_COMÉRCIO' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_CÂMARA_COMÉRCIO_DET BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_CÂMARA_COMÉRCIO_DET FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_CÂMARA_COMÉRCIO_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_CÂMARA_COMÉRCIO_DET', :OLD.DOC_SEQ || :OLD.SEQ_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_CÂMARA_COMÉRCIO_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_CARTA_I BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_CARTA_I FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_CARTA_I' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_CARTA_I', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_CARTA_I' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_CARTA_P BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_CARTA_P FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_CARTA_P' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_CARTA_P', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_CARTA_P' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_CONHECIMENT_ROD BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_CONHECIMENT_ROD FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_CONHECIMENT_ROD' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_CONHECIMENT_ROD', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_CONHECIMENT_ROD' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_CONHECIMENT_ROD_DET BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_CONHECIMENT_ROD_DET FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_CONHECIMENT_ROD_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_CONHECIMENT_ROD_DET', :OLD.DOC_SEQ || :OLD.SEQ_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_CONHECIMENT_ROD_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_FATURA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_FATURA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_FATURA' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_FATURA', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_FATURA' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_FATURA_DET BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_FATURA_DET FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_FATURA_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_FATURA_DET', :OLD.DOC_SEQ || :OLD.SEQ_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_FATURA_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_FATURA_JUROS BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_FATURA_JUROS FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_FATURA_JUROS' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_FATURA_JUROS', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_FATURA_JUROS' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_FATURA_TOT BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_FATURA_TOT FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_FATURA_TOT' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_LANC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_FATURA_TOT', :OLD.DOC_SEQ || :OLD.SEQ_LANC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_FATURA_TOT' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_LANC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_FECHAMENTO_CÂMB BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_FECHAMENTO_CÂMB FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_FECHAMENTO_CÂMB' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_FECHAMENTO_CÂMB', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_FECHAMENTO_CÂMB' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_FECHAMENTO_CÂMB_TOT BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_FECHAMENTO_CÂMB_TOT FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_FECHAMENTO_CÂMB_TOT' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_LANC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_FECHAMENTO_CÂMB_TOT', :OLD.DOC_SEQ || :OLD.SEQ_LANC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_FECHAMENTO_CÂMB_TOT' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_LANC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_FIRJAN BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_FIRJAN FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_FIRJAN' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_FIRJAN', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_FIRJAN' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_FIRJAN_DET BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_FIRJAN_DET FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_FIRJAN_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_FIRJAN_DET', :OLD.DOC_SEQ || :OLD.SEQ_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_FIRJAN_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_MERCOSUL BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_MERCOSUL FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_MERCOSUL' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_MERCOSUL', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_MERCOSUL' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_MERCOSUL_BOLIV BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_MERCOSUL_BOLIV FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_MERCOSUL_BOLIV' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_MERCOSUL_BOLIV', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_MERCOSUL_BOLIV' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_MERCOSUL_BOLIV_DET BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_MERCOSUL_BOLIV_DET FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_MERCOSUL_BOLIV_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_MERCOSUL_BOLIV_DET', :OLD.DOC_SEQ || :OLD.SEQ_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_MERCOSUL_BOLIV_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_MERCOSUL_BOLIV_NORMA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_MERCOSUL_BOLIV_NORMA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_MERCOSUL_BOLIV_NORMA' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_NORMA;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_MERCOSUL_BOLIV_NORMA', :OLD.DOC_SEQ || :OLD.SEQ_NORMA, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_MERCOSUL_BOLIV_NORMA' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_NORMA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_MERCOSUL_CHILE BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_MERCOSUL_CHILE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_MERCOSUL_CHILE' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_MERCOSUL_CHILE', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_MERCOSUL_CHILE' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_MERCOSUL_CHILE_DET BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_MERCOSUL_CHILE_DET FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_MERCOSUL_CHILE_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_MERCOSUL_CHILE_DET', :OLD.DOC_SEQ || :OLD.SEQ_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_MERCOSUL_CHILE_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_MERCOSUL_CHILE_NORMA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_MERCOSUL_CHILE_NORMA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_MERCOSUL_CHILE_NORMA' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_NORMA;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_MERCOSUL_CHILE_NORMA', :OLD.DOC_SEQ || :OLD.SEQ_NORMA, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_MERCOSUL_CHILE_NORMA' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_NORMA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_MERCOSUL_DET BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_MERCOSUL_DET FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_MERCOSUL_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_MERCOSUL_DET', :OLD.DOC_SEQ || :OLD.SEQ_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_MERCOSUL_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_MERCOSUL_NORMA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_MERCOSUL_NORMA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_MERCOSUL_NORMA' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_NORMA;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_MERCOSUL_NORMA', :OLD.DOC_SEQ || :OLD.SEQ_NORMA, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_MERCOSUL_NORMA' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_NORMA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_PLIST_WEIG_CERT BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_PLIST_WEIG_CERT FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_PLIST_WEIG_CERT' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_PLIST_WEIG_CERT', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_PLIST_WEIG_CERT' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_PLIST_WEIG_CERT_DET BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_PLIST_WEIG_CERT_DET FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_PLIST_WEIG_CERT_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_PLIST_WEIG_CERT_DET', :OLD.DOC_SEQ || :OLD.SEQ_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_PLIST_WEIG_CERT_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_SAQUE_2V BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_SAQUE_2V FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_SAQUE_2V' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_SAQUE_2V', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_SAQUE_2V' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_SAQUE_3V BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_SAQUE_3V FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_SAQUE_3V' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_SAQUE_3V', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_SAQUE_3V' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_SAQUE_JUROS_2V BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_SAQUE_JUROS_2V FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_SAQUE_JUROS_2V' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_SAQUE_JUROS_2V', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_SAQUE_JUROS_2V' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_SAQUE_JUROS_3V BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_SAQUE_JUROS_3V FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_SAQUE_JUROS_3V' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_SAQUE_JUROS_3V', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_SAQUE_JUROS_3V' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_TEMPLATE BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_TEMPLATE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_TEMPLATE' AND CHAVE = :OLD.NOME_TABELA || :OLD.CAMPO;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_TEMPLATE', :OLD.NOME_TABELA || :OLD.CAMPO, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_TEMPLATE' AND CHAVE = :OLD.NOME_TABELA || :OLD.CAMPO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_CHECK_LIST BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_CHECK_LIST FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_CHECK_LIST' AND CHAVE = :OLD.EMB_REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_CHECK_LIST', :OLD.EMB_REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_CHECK_LIST' AND CHAVE = :OLD.EMB_REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_DOC_DESTINO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_DOC_DESTINO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_DOC_DESTINO' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ || :OLD.CIA;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_DOC_DESTINO', :OLD.EMB_REF || :OLD.SEQ || :OLD.CIA, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_DOC_DESTINO' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ || :OLD.CIA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_DOC_REL BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_DOC_REL FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_DOC_REL' AND CHAVE = :OLD.EMB_REF || :OLD.DOC || :OLD.EMB_REL;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_DOC_REL', :OLD.EMB_REF || :OLD.DOC || :OLD.EMB_REL, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_DOC_REL' AND CHAVE = :OLD.EMB_REF || :OLD.DOC || :OLD.EMB_REL;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_F BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_F FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_F' AND CHAVE = :OLD.PED_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_F', :OLD.PED_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_F' AND CHAVE = :OLD.PED_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_FAMÍLIA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_FAMÍLIA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_FAMÍLIA' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_FAMÍLIA', :OLD.EMB_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_FAMÍLIA' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_FAMÍLIA_GENÉRICA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_FAMÍLIA_GENÉRICA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_FAMÍLIA_GENÉRICA' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_FAMÍLIA_GENÉRICA', :OLD.EMB_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_FAMÍLIA_GENÉRICA' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_FILTRO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_FILTRO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_FILTRO' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_FILTRO', :OLD.EMB_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_FILTRO' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_LANÇ BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_LANÇ FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_LANÇ' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_LANÇ', :OLD.EMB_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_LANÇ' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_MENSAGEM BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_MENSAGEM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_MENSAGEM' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_MENSAGEM', :OLD.EMB_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_MENSAGEM' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_RE BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_RE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_RE' AND CHAVE = :OLD.EMB_REF || :OLD.RE;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_RE', :OLD.EMB_REF || :OLD.RE, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_RE' AND CHAVE = :OLD.EMB_REF || :OLD.RE;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_SD BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_SD FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_SD' AND CHAVE = :OLD.EMB_REF || :OLD.SD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_SD', :OLD.EMB_REF || :OLD.SD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_SD' AND CHAVE = :OLD.EMB_REF || :OLD.SD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_TOTALIZA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_TOTALIZA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_TOTALIZA' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_TOTALIZA', :OLD.EMB_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_TOTALIZA' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMBALAGEM BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMBALAGEM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMBALAGEM' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMBALAGEM', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMBALAGEM' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMPRESA_APUR BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMPRESA_APUR FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMPRESA_APUR' AND CHAVE = :OLD.EMPRESA;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMPRESA_APUR', :OLD.EMPRESA, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMPRESA_APUR' AND CHAVE = :OLD.EMPRESA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ESCRITÓRIO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.ESCRITÓRIO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'ESCRITÓRIO' AND CHAVE = :OLD.ESCRITÓRIO;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('ESCRITÓRIO', :OLD.ESCRITÓRIO, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'ESCRITÓRIO' AND CHAVE = :OLD.ESCRITÓRIO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FATURA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FATURA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FATURA' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FATURA', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FATURA' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FATURA_CONFIRM BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FATURA_CONFIRM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FATURA_CONFIRM' AND CHAVE = :OLD.REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FATURA_CONFIRM', :OLD.REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FATURA_CONFIRM' AND CHAVE = :OLD.REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FATURA_CONFIRM_ITEM BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FATURA_CONFIRM_ITEM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FATURA_CONFIRM_ITEM' AND CHAVE = :OLD.CONFIRM_VENDA_REF || :OLD.SEQ || :OLD.ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FATURA_CONFIRM_ITEM', :OLD.CONFIRM_VENDA_REF || :OLD.SEQ || :OLD.ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FATURA_CONFIRM_ITEM' AND CHAVE = :OLD.CONFIRM_VENDA_REF || :OLD.SEQ || :OLD.ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FATURA_CONFIRM_TOT BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FATURA_CONFIRM_TOT FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FATURA_CONFIRM_TOT' AND CHAVE = :OLD.CONFIRM_FATURA_REF || :OLD.CONFIRM_FATURA_SEQ || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FATURA_CONFIRM_TOT', :OLD.CONFIRM_FATURA_REF || :OLD.CONFIRM_FATURA_SEQ || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FATURA_CONFIRM_TOT' AND CHAVE = :OLD.CONFIRM_FATURA_REF || :OLD.CONFIRM_FATURA_SEQ || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FAX BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FAX FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FAX' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FAX', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FAX' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FAX_CHAVE BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FAX_CHAVE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FAX_CHAVE' AND CHAVE = :OLD.FAX_REF || :OLD.CHAVE;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FAX_CHAVE', :OLD.FAX_REF || :OLD.CHAVE, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FAX_CHAVE' AND CHAVE = :OLD.FAX_REF || :OLD.CHAVE;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FAX_DESTINO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FAX_DESTINO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FAX_DESTINO' AND CHAVE = :OLD.FAX_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FAX_DESTINO', :OLD.FAX_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FAX_DESTINO' AND CHAVE = :OLD.FAX_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FECH BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FECH FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FECH' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FECH', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FECH' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FECH_CARGA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FECH_CARGA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FECH_CARGA' AND CHAVE = :OLD.FECH_REF || :OLD.PED_REF || :OLD.PED_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FECH_CARGA', :OLD.FECH_REF || :OLD.PED_REF || :OLD.PED_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FECH_CARGA' AND CHAVE = :OLD.FECH_REF || :OLD.PED_REF || :OLD.PED_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FECH_CONTATO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FECH_CONTATO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FECH_CONTATO' AND CHAVE = :OLD.FECH_REF || :OLD.CIA_COD || :OLD.CONTATO_NOME;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FECH_CONTATO', :OLD.FECH_REF || :OLD.CIA_COD || :OLD.CONTATO_NOME, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FECH_CONTATO' AND CHAVE = :OLD.FECH_REF || :OLD.CIA_COD || :OLD.CONTATO_NOME;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FECH_SUBSTITUÍDO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FECH_SUBSTITUÍDO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FECH_SUBSTITUÍDO' AND CHAVE = :OLD.SUBSTITUÍDO || :OLD.SUBSTITUTO;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FECH_SUBSTITUÍDO', :OLD.SUBSTITUÍDO || :OLD.SUBSTITUTO, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FECH_SUBSTITUÍDO' AND CHAVE = :OLD.SUBSTITUÍDO || :OLD.SUBSTITUTO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FRETE BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FRETE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FRETE' AND CHAVE = :OLD.CARGA_PORTO || :OLD.DESCARGA_PORTO || :OLD.PROPRIETÁRIO || :OLD.FRETE_DETALHE;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FRETE', :OLD.CARGA_PORTO || :OLD.DESCARGA_PORTO || :OLD.PROPRIETÁRIO || :OLD.FRETE_DETALHE, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FRETE' AND CHAVE = :OLD.CARGA_PORTO || :OLD.DESCARGA_PORTO || :OLD.PROPRIETÁRIO || :OLD.FRETE_DETALHE;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_GRUPO_PRODUTO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.GRUPO_PRODUTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'GRUPO_PRODUTO' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('GRUPO_PRODUTO', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'GRUPO_PRODUTO' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_IDIOMA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.IDIOMA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'IDIOMA' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('IDIOMA', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'IDIOMA' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_INCOTERM BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.INCOTERM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'INCOTERM' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('INCOTERM', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'INCOTERM' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_INCOTERM_LANÇ BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.INCOTERM_LANÇ FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'INCOTERM_LANÇ' AND CHAVE = :OLD.INCOTERM || :OLD.LANÇ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('INCOTERM_LANÇ', :OLD.INCOTERM || :OLD.LANÇ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'INCOTERM_LANÇ' AND CHAVE = :OLD.INCOTERM || :OLD.LANÇ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_INSTRUÇÃO_PAG BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.INSTRUÇÃO_PAG FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'INSTRUÇÃO_PAG' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('INSTRUÇÃO_PAG', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'INSTRUÇÃO_PAG' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_INSTRUÇÃO_PAG_FECH BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.INSTRUÇÃO_PAG_FECH FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'INSTRUÇÃO_PAG_FECH' AND CHAVE = :OLD.INSTRUÇÃO_PAG_REF || :OLD.FECH_REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('INSTRUÇÃO_PAG_FECH', :OLD.INSTRUÇÃO_PAG_REF || :OLD.FECH_REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'INSTRUÇÃO_PAG_FECH' AND CHAVE = :OLD.INSTRUÇÃO_PAG_REF || :OLD.FECH_REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_INTR_EMB BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.INTR_EMB FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'INTR_EMB' AND CHAVE = :OLD.;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('INTR_EMB', :OLD., SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'INTR_EMB' AND CHAVE = :OLD.;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_LANÇ BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.LANÇ FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'LANÇ' AND CHAVE = :OLD.LANÇ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('LANÇ', :OLD.LANÇ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'LANÇ' AND CHAVE = :OLD.LANÇ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_LOCAL_RESULT BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.LOCAL_RESULT FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'LOCAL_RESULT' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('LOCAL_RESULT', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'LOCAL_RESULT' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_LOG_IMPORT BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.LOG_IMPORT FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'LOG_IMPORT' AND CHAVE = :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('LOG_IMPORT', :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'LOG_IMPORT' AND CHAVE = :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_MAPA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.MAPA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'MAPA' AND CHAVE = :OLD.WORKSHEET || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('MAPA', :OLD.WORKSHEET || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'MAPA' AND CHAVE = :OLD.WORKSHEET || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_MODALIDADE_FRETE BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.MODALIDADE_FRETE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'MODALIDADE_FRETE' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('MODALIDADE_FRETE', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'MODALIDADE_FRETE' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_MOEDA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.MOEDA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'MOEDA' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('MOEDA', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'MOEDA' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_NAVIO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.NAVIO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'NAVIO' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('NAVIO', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'NAVIO' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_NEG_USIMINAS BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.NEG_USIMINAS FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'NEG_USIMINAS' AND CHAVE = :OLD.PED_REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('NEG_USIMINAS', :OLD.PED_REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'NEG_USIMINAS' AND CHAVE = :OLD.PED_REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_NEG_USIMINAS_ITEM BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.NEG_USIMINAS_ITEM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'NEG_USIMINAS_ITEM' AND CHAVE = :OLD.PED_REF || :OLD.ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('NEG_USIMINAS_ITEM', :OLD.PED_REF || :OLD.ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'NEG_USIMINAS_ITEM' AND CHAVE = :OLD.PED_REF || :OLD.ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_NOTA_CRÉDITO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.NOTA_CRÉDITO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'NOTA_CRÉDITO' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('NOTA_CRÉDITO', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'NOTA_CRÉDITO' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_NOTA_CRÉDITO_FECH BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.NOTA_CRÉDITO_FECH FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'NOTA_CRÉDITO_FECH' AND CHAVE = :OLD.NOTA_CRÉDITO_REF || :OLD.FECH_REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('NOTA_CRÉDITO_FECH', :OLD.NOTA_CRÉDITO_REF || :OLD.FECH_REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'NOTA_CRÉDITO_FECH' AND CHAVE = :OLD.NOTA_CRÉDITO_REF || :OLD.FECH_REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_NOTA_CRÉDITO_PAG BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.NOTA_CRÉDITO_PAG FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'NOTA_CRÉDITO_PAG' AND CHAVE = :OLD.NOTA_CRÉDITO_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('NOTA_CRÉDITO_PAG', :OLD.NOTA_CRÉDITO_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'NOTA_CRÉDITO_PAG' AND CHAVE = :OLD.NOTA_CRÉDITO_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_NOTA_DÉBITO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.NOTA_DÉBITO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'NOTA_DÉBITO' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('NOTA_DÉBITO', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'NOTA_DÉBITO' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_NOTA_DÉBITO_FECH BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.NOTA_DÉBITO_FECH FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'NOTA_DÉBITO_FECH' AND CHAVE = :OLD.NOTA_DÉBITO_REF || :OLD.FECH_REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('NOTA_DÉBITO_FECH', :OLD.NOTA_DÉBITO_REF || :OLD.FECH_REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'NOTA_DÉBITO_FECH' AND CHAVE = :OLD.NOTA_DÉBITO_REF || :OLD.FECH_REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_NOTA_DÉBITO_RECEB BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.NOTA_DÉBITO_RECEB FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'NOTA_DÉBITO_RECEB' AND CHAVE = :OLD.NOTA_DÉBITO_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('NOTA_DÉBITO_RECEB', :OLD.NOTA_DÉBITO_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'NOTA_DÉBITO_RECEB' AND CHAVE = :OLD.NOTA_DÉBITO_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PAÍS BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PAÍS FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PAÍS' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PAÍS', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PAÍS' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PARAM BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PARAM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PARAM' AND CHAVE = :OLD.GRUPO || :OLD.PARAM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PARAM', :OLD.GRUPO || :OLD.PARAM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PARAM' AND CHAVE = :OLD.GRUPO || :OLD.PARAM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PED BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PED FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PED' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PED', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PED' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PED_CONTATO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PED_CONTATO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PED_CONTATO' AND CHAVE = :OLD.PED_REF || :OLD.CIA_COD || :OLD.CONTATO_NOME;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PED_CONTATO', :OLD.PED_REF || :OLD.CIA_COD || :OLD.CONTATO_NOME, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PED_CONTATO' AND CHAVE = :OLD.PED_REF || :OLD.CIA_COD || :OLD.CONTATO_NOME;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PED_ITEM BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PED_ITEM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PED_ITEM' AND CHAVE = :OLD.PED_REF || :OLD.ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PED_ITEM', :OLD.PED_REF || :OLD.ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PED_ITEM' AND CHAVE = :OLD.PED_REF || :OLD.ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PED_LANÇ BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PED_LANÇ FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PED_LANÇ' AND CHAVE = :OLD.PED_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PED_LANÇ', :OLD.PED_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PED_LANÇ' AND CHAVE = :OLD.PED_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PED_RES BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PED_RES FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PED_RES' AND CHAVE = :OLD.;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PED_RES', :OLD., SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PED_RES' AND CHAVE = :OLD.;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PED_RESULT BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PED_RESULT FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PED_RESULT' AND CHAVE = :OLD.PED_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PED_RESULT', :OLD.PED_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PED_RESULT' AND CHAVE = :OLD.PED_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PLANILHA_DEF BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PLANILHA_DEF FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PLANILHA_DEF' AND CHAVE = :OLD.WORKSHEET || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PLANILHA_DEF', :OLD.WORKSHEET || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PLANILHA_DEF' AND CHAVE = :OLD.WORKSHEET || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PORTO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PORTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PORTO' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PORTO', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PORTO' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PRODUTO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PRODUTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PRODUTO' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PRODUTO', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PRODUTO' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PRODUTO_ESPECIF BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PRODUTO_ESPECIF FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PRODUTO_ESPECIF' AND CHAVE = :OLD.COD || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PRODUTO_ESPECIF', :OLD.COD || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PRODUTO_ESPECIF' AND CHAVE = :OLD.COD || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PROG BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PROG FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PROG' AND CHAVE = :OLD.FECH_REF || :OLD.POSICIONAMENTO_DATA;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PROG', :OLD.FECH_REF || :OLD.POSICIONAMENTO_DATA, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PROG' AND CHAVE = :OLD.FECH_REF || :OLD.POSICIONAMENTO_DATA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PROG_CARGA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PROG_CARGA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PROG_CARGA' AND CHAVE = :OLD.FECH_REF || :OLD.POSICIONAMENTO_DATA || :OLD.PED_REF || :OLD.PED_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PROG_CARGA', :OLD.FECH_REF || :OLD.POSICIONAMENTO_DATA || :OLD.PED_REF || :OLD.PED_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PROG_CARGA' AND CHAVE = :OLD.FECH_REF || :OLD.POSICIONAMENTO_DATA || :OLD.PED_REF || :OLD.PED_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_RAMO_ATIVIDADE BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.RAMO_ATIVIDADE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'RAMO_ATIVIDADE' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('RAMO_ATIVIDADE', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'RAMO_ATIVIDADE' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_RESULT BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.RESULT FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'RESULT' AND CHAVE = :OLD.PED_REF || :OLD.EMB_SEQ || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('RESULT', :OLD.PED_REF || :OLD.EMB_SEQ || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'RESULT' AND CHAVE = :OLD.PED_REF || :OLD.EMB_SEQ || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_SUB_CONTA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.SUB_CONTA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'SUB_CONTA' AND CHAVE = :OLD.EMPRESA || :OLD.SUB_CONTA;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('SUB_CONTA', :OLD.EMPRESA || :OLD.SUB_CONTA, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'SUB_CONTA' AND CHAVE = :OLD.EMPRESA || :OLD.SUB_CONTA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_TIPO_REF BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.TIPO_REF FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'TIPO_REF' AND CHAVE = :OLD.TIPO;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('TIPO_REF', :OLD.TIPO, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'TIPO_REF' AND CHAVE = :OLD.TIPO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_UNID_QUANTID BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.UNID_QUANTID FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'UNID_QUANTID' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('UNID_QUANTID', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'UNID_QUANTID' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_VIA_TRANSPORTE BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.VIA_TRANSPORTE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'VIA_TRANSPORTE' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('VIA_TRANSPORTE', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'VIA_TRANSPORTE' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_VIAGEM BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.VIAGEM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'VIAGEM' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('VIAGEM', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'VIAGEM' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_VIAGEM_ESCALA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.VIAGEM_ESCALA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'VIAGEM_ESCALA' AND CHAVE = :OLD.VIAGEM_REF || :OLD.ESCALA;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('VIAGEM_ESCALA', :OLD.VIAGEM_REF || :OLD.ESCALA, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'VIAGEM_ESCALA' AND CHAVE = :OLD.VIAGEM_REF || :OLD.ESCALA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE USER ALAIR IDENTIFIED BY XXXXXX
DEFAULT TABLESPACE T_CXRJ_DAT
TEMPORARY TABLESPACE TEMP
PROFILE DEFAULT
ACCOUNT UNLOCK;
GRANT CREATE SESSION, EXECUTE ANY LIBRARY, EXECUTE ANY PROCEDURE TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.BL TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.BL_CARGA TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.BL_CONTINENTAL TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.CARTA TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.CARTA_CRÉDITO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.CARTA_FECH TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.CIA TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.CIA_CONTATO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.CIA_RAMO_ATIVIDADE TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.COND_PAG TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.CONFIRM_VENDA TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.CONFIRM_VENDA_ITEM TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.CONTA_CORRENTE TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.COSIPA_FOLHA_1 TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.COSIPA_FOLHA_2 TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.COSIPA_FOLHA_2_PAG TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.COSIPA_NEGOCIAÇÃO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DEPTO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DIVISÃO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DIVISÃO_PRODUTO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DIVISÃO_TIPO_REF TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_ACORDO_COMPLEM TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_ACORDO_COMPLEM_DET TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_ALADI TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_ALADI_DET TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_ALADI_NORMA TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_BORDERÔ_I TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_BORDERÔ_P TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_CÂMARA_COMÉRCIO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_CÂMARA_COMÉRCIO_DET TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_CARTA_I TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_CARTA_P TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_CONHECIMENT_ROD TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_CONHECIMENT_ROD_DET TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_FATURA TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_FATURA_DET TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_FATURA_JUROS TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_FATURA_TOT TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_FECHAMENTO_CÂMB TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_FECHAMENTO_CÂMB_TOT TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_FIRJAN TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_FIRJAN_DET TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_MERCOSUL TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_MERCOSUL_BOLIV TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_MERCOSUL_BOLIV_DET TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_MERCOSUL_BOLIV_NORMA TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_MERCOSUL_CHILE TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_MERCOSUL_CHILE_DET TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_MERCOSUL_CHILE_NORMA TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_MERCOSUL_DET TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_MERCOSUL_NORMA TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_PLIST_WEIG_CERT TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_PLIST_WEIG_CERT_DET TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_SAQUE_2V TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_SAQUE_3V TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_SAQUE_JUROS_2V TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.DOC_SAQUE_JUROS_3V TO ALAIR;
GRANT SELECT ON CXRJ.DOC_TEMPLATE TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.EMB TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.EMB_CHECK_LIST TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.EMB_DOC TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.EMB_DOC_DESTINO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.EMB_DOC_REL TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.EMB_F TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.EMB_FAMÍLIA TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.EMB_FAMÍLIA_GENÉRICA TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.EMB_FILTRO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.EMB_ITEM_TEMP TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.EMB_LANÇ TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.EMB_MENSAGEM TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.EMB_RE TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.EMB_SD TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.EMB_TOTALIZA TO ALAIR;
GRANT SELECT ON CXRJ.EMBALAGEM TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.ESCRITÓRIO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.ETIQ_MALA_DIRETA TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.FATURA TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.FATURA_CONFIRM TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.FATURA_CONFIRM_ITEM TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.FATURA_CONFIRM_TOT TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.FAX TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.FAX_CHAVE TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.FAX_DESTINO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.FECH TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.FECH_CARGA TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.FECH_CONTATO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.FECH_SUBSTITUÍDO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.FRETE TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.GRUPO_PRODUTO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.IDIOMA TO ALAIR;
GRANT SELECT ON CXRJ.INCOTERM TO ALAIR;
GRANT SELECT ON CXRJ.INCOTERM_LANÇ TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.INSTRUÇÃO_PAG TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.INSTRUÇÃO_PAG_FECH TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.INTR_EMB TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.LANÇ TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.LOCAL_RESULT TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.MERCADO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.MERCADO_PORTO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.MODALIDADE_FRETE TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.MOEDA TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.NAVIO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.NEG_COMERCIAL TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.NEG_FECH_ANA TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.NEG_FECH_SINT_PAIS TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.NEG_USIMINAS TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.NEG_USIMINAS_ITEM TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.NOTA_CRÉDITO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.NOTA_CRÉDITO_FECH TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.NOTA_CRÉDITO_PAG TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.NOTA_DÉBITO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.NOTA_DÉBITO_FECH TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.NOTA_DÉBITO_RECEB TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.PAÍS TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.PARAM TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.PED TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.PED_CONTATO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.PED_ITEM TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.PED_LANÇ TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.PED_RES TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.PED_RESULT TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.PORTO TO ALAIR;
GRANT SELECT ON CXRJ.PRODUTO TO ALAIR;
GRANT SELECT ON CXRJ.PRODUTO_ESPECIF TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.PROG TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.PROG_CARGA TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.RAMO_ATIVIDADE TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.REF TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.REL_CSC_PAÍS_FORN_EMBARQUE TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.REL_CSC_PAÍS_FORN_PEDIDO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.REL_CSC_PAÍS_FORN_RESULT TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.RESULT TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.SYS_CAD_LOG TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.SYS_CONFIG_GLOBAL TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.SYS_DELETE TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.SYS_LOCALID TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.SYS_OCORRÊNCIA TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.SYS_TABELA TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.SYS_USUÁRIO TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.TIPO_REF TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.UNID_QUANTID TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.VIA_TRANSPORTE TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.VIAGEM TO ALAIR;
GRANT SELECT, INSERT, UPDATE, DELETE ON CXRJ.VIAGEM_ESCALA TO ALAIR;
GRANT SELECT ON CXRJ.ACORDO_COMPLEMENTAÇÃO TO ALAIR;
GRANT SELECT ON CXRJ.ALADI_EXP TO ALAIR;
GRANT SELECT ON CXRJ.ALADI_IMP TO ALAIR;
GRANT SELECT ON CXRJ.ALADI_SUB TO ALAIR;
GRANT SELECT ON CXRJ.BL_CARGA_OK TO ALAIR;
GRANT SELECT ON CXRJ.BORDERO TO ALAIR;
GRANT SELECT ON CXRJ.BORDERO_EMB_DOC_REL TO ALAIR;
GRANT SELECT ON CXRJ.BORDERO_EXP TO ALAIR;
GRANT SELECT ON CXRJ.BORDERO_EXP_SUB TO ALAIR;
GRANT SELECT ON CXRJ.BORDERO_IMP TO ALAIR;
GRANT SELECT ON CXRJ.CAM_COM_EMB_DOC_REL TO ALAIR;
GRANT SELECT ON CXRJ.CAMARA_COMERCIO_EXP TO ALAIR;
GRANT SELECT ON CXRJ.CAMARA_COMERCIO_EXP_SUB TO ALAIR;
GRANT SELECT ON CXRJ.CAMARA_COMERCIO_IMP TO ALAIR;
GRANT SELECT ON CXRJ.CAMARA_COMERCIO_IMP_SUB TO ALAIR;
GRANT SELECT ON CXRJ.CAPA TO ALAIR;
GRANT SELECT ON CXRJ.CAPA_PACKING_LIST TO ALAIR;
GRANT SELECT ON CXRJ.CARGO_LEVANT TO ALAIR;
GRANT SELECT ON CXRJ.CARGO_LEVANT_SUB TO ALAIR;
GRANT SELECT ON CXRJ.CARTA_DEOP_INGLES TO ALAIR;
GRANT SELECT ON CXRJ.CARTA_DEOP_PORTUGUES TO ALAIR;
GRANT SELECT ON CXRJ.CHECK_LIST_SUB TO ALAIR;
GRANT SELECT ON CXRJ.CONHECIM_RODOV_EXP TO ALAIR;
GRANT SELECT ON CXRJ.CONHECIM_RODOV_IMP TO ALAIR;
GRANT SELECT ON CXRJ.EMB_COM_SOMA_QUANT TO ALAIR;
GRANT SELECT ON CXRJ.EMB_DESP_EXP TO ALAIR;
GRANT SELECT ON CXRJ.EMB_DESP_IMP TO ALAIR;
GRANT SELECT ON CXRJ.EMB_PARAM TO ALAIR;
GRANT SELECT ON CXRJ.EMB_PARAM_FIX TO ALAIR;
GRANT SELECT ON CXRJ.EMB_QTD TO ALAIR;
GRANT SELECT ON CXRJ.EMB_TOT_EXP TO ALAIR;
GRANT SELECT ON CXRJ.EMB_TOT_IMP TO ALAIR;
GRANT SELECT ON CXRJ.FATURA_EXP TO ALAIR;
GRANT SELECT ON CXRJ.FATURA_EXP_SUB TO ALAIR;
GRANT SELECT ON CXRJ.FATURA_IMP TO ALAIR;
GRANT SELECT ON CXRJ.FATURA_IMP_SUB TO ALAIR;
GRANT SELECT ON CXRJ.FATURA_ITF_1_SUB TO ALAIR;
GRANT SELECT ON CXRJ.FATURA_JUROS_EMB_DOC_REL TO ALAIR;
GRANT SELECT ON CXRJ.FATURA_JUROS_EXP TO ALAIR;
GRANT SELECT ON CXRJ.FATURA_JUROS_IMP TO ALAIR;
GRANT SELECT ON CXRJ.FATURA_JUROS_VALORES TO ALAIR;
GRANT SELECT ON CXRJ.FATURA_TOTAL_GERAL_VALORES TO ALAIR;
GRANT SELECT ON CXRJ.FAX_2 TO ALAIR;
GRANT SELECT ON CXRJ.FAX_2_CSN TO ALAIR;
GRANT SELECT ON CXRJ.FAX_CHAVE_REF TO ALAIR;
GRANT SELECT ON CXRJ.FAX_CONT_EST_D TO ALAIR;
GRANT SELECT ON CXRJ.FAX_CONT_EST_L TO ALAIR;
GRANT SELECT ON CXRJ.FAX_FECH TO ALAIR;
GRANT SELECT ON CXRJ.FAX_FECH_2 TO ALAIR;
GRANT SELECT ON CXRJ.FAX_NOM_EST_AG_D TO ALAIR;
GRANT SELECT ON CXRJ.FAX_NOM_NAV_CONT TO ALAIR;
GRANT SELECT ON CXRJ.FAX_NOM_NAV_CSN TO ALAIR;
GRANT SELECT ON CXRJ.FAX_NOM_NAV_CSN_FC TO ALAIR;
GRANT SELECT ON CXRJ.FAX_NOM_NAV_FOR TO ALAIR;
GRANT SELECT ON CXRJ.FAX_NOM_NAV_FOR_FC TO ALAIR;
GRANT SELECT ON CXRJ.FAX_NOM_TER_EST TO ALAIR;
GRANT SELECT ON CXRJ.FAX_SOL_POS_CAR_EMB TO ALAIR;
GRANT SELECT ON CXRJ.FECH_CAMBIO_SUB TO ALAIR;
GRANT SELECT ON CXRJ.FECH_CARGA_OK TO ALAIR;
GRANT SELECT ON CXRJ.FECH_DET TO ALAIR;
GRANT SELECT ON CXRJ.FECH_DET_1 TO ALAIR;
GRANT SELECT ON CXRJ.FECH_DET_4 TO ALAIR;
GRANT SELECT ON CXRJ.FECH_DET_6 TO ALAIR;
GRANT SELECT ON CXRJ.FECH_DET_7 TO ALAIR;
GRANT SELECT ON CXRJ.FECH_NCANCEL TO ALAIR;
GRANT SELECT ON CXRJ.FECHAM_CAMBIO TO ALAIR;
GRANT SELECT ON CXRJ.FIRJAN_EXP TO ALAIR;
GRANT SELECT ON CXRJ.FIRJAN_EXP_SUB TO ALAIR;
GRANT SELECT ON CXRJ.FIRJAN_IMP TO ALAIR;
GRANT SELECT ON CXRJ.FIRJAN_IMP_SUB TO ALAIR;
GRANT SELECT ON CXRJ.INS_EMB TO ALAIR;
GRANT SELECT ON CXRJ.INS_EMB_NAV TO ALAIR;
GRANT SELECT ON CXRJ.INS_PAG_1 TO ALAIR;
GRANT SELECT ON CXRJ.INSTRUÇÃO_DE_EMBARQUE TO ALAIR;
GRANT SELECT ON CXRJ.INSTRUÇÃO_PAG_1 TO ALAIR;
GRANT SELECT ON CXRJ.ITEM_FECHADO TO ALAIR;
GRANT SELECT ON CXRJ.MAP_CAR TO ALAIR;
GRANT SELECT ON CXRJ.MAP_CAR_1 TO ALAIR;
GRANT SELECT ON CXRJ.MAP_CAR_2 TO ALAIR;
GRANT SELECT ON CXRJ.MERCOSUL_BOLIVIA_EXP TO ALAIR;
GRANT SELECT ON CXRJ.MERCOSUL_BOLIVIA_EXP_SUB TO ALAIR;
GRANT SELECT ON CXRJ.MERCOSUL_BOLIVIA_IMP TO ALAIR;
GRANT SELECT ON CXRJ.MERCOSUL_BOLIVIA_IMP_SUB TO ALAIR;
GRANT SELECT ON CXRJ.MERCOSUL_CHILE_EXP TO ALAIR;
GRANT SELECT ON CXRJ.MERCOSUL_CHILE_EXP_SUB TO ALAIR;
GRANT SELECT ON CXRJ.MERCOSUL_CHILE_IMP TO ALAIR;
GRANT SELECT ON CXRJ.MERCOSUL_CHILE_IMP_SUB TO ALAIR;
GRANT SELECT ON CXRJ.MERCOSUL_EXP TO ALAIR;
GRANT SELECT ON CXRJ.MERCOSUL_EXP_SUB TO ALAIR;
GRANT SELECT ON CXRJ.MERCOSUL_IMP TO ALAIR;
GRANT SELECT ON CXRJ.MERCOSUL_IMP_SUB TO ALAIR;
GRANT SELECT ON CXRJ.NEG_FECH_ANA_QUANT TO ALAIR;
GRANT SELECT ON CXRJ.NEG_FECH_ANA_SUBFIN TO ALAIR;
GRANT SELECT ON CXRJ.NEGOCIO_COMERCIAL_NAVIO TO ALAIR;
GRANT SELECT ON CXRJ.PACKING_LIST_EXP TO ALAIR;
GRANT SELECT ON CXRJ.PACKING_LIST_IMP TO ALAIR;
GRANT SELECT ON CXRJ.PED_AFR_4 TO ALAIR;
GRANT SELECT ON CXRJ.PED_AFR_6 TO ALAIR;
GRANT SELECT ON CXRJ.PED_AFR_7 TO ALAIR;
GRANT SELECT ON CXRJ.PED_AFR_8 TO ALAIR;
GRANT SELECT ON CXRJ.PED_DETAL_10 TO ALAIR;
GRANT SELECT ON CXRJ.PED_ITEM_OK TO ALAIR;
GRANT SELECT ON CXRJ.PED_ITEM_SALDO TO ALAIR;
GRANT SELECT ON CXRJ.RESULT_VERTICAL TO ALAIR;
GRANT SELECT ON CXRJ.SAQUE_EMB_DOC_REL TO ALAIR;
GRANT SELECT ON CXRJ.SAQUE_EXP_2_VIAS TO ALAIR;
GRANT SELECT ON CXRJ.SAQUE_EXP_3_VIAS TO ALAIR;
GRANT SELECT ON CXRJ.SAQUE_IMP_2_VIAS TO ALAIR;
GRANT SELECT ON CXRJ.SAQUE_IMP_3_VIAS TO ALAIR;
GRANT SELECT ON CXRJ.SAQUE_JUROS_EMB_DOC_REL TO ALAIR;
GRANT SELECT ON CXRJ.SAQUE_JUROS_EXP_2_VIAS TO ALAIR;
GRANT SELECT ON CXRJ.SAQUE_JUROS_EXP_3_VIAS TO ALAIR;
GRANT SELECT ON CXRJ.SAQUE_JUROS_IMP_2_VIAS TO ALAIR;
GRANT SELECT ON CXRJ.SAQUE_JUROS_IMP_3_VIAS TO ALAIR;
GRANT SELECT ON CXRJ.SOL_POS_CARGA TO ALAIR;
GRANT SELECT ON CXRJ.TBS TO ALAIR;
GRANT SELECT ON CXRJ.TBS_SUB TO ALAIR;
GRANT SELECT ON CXRJ.TESTE TO ALAIR;
GRANT SELECT ON CXRJ.VALIDA_NOMEA_CSN TO ALAIR;
GRANT SELECT ON CXRJ.VALIDA_NOMEA_NAV_FALTA TO ALAIR;
GRANT SELECT ON CXRJ.VIAGEM_SEL TO ALAIR;
GRANT SELECT ON CXRJ.WEIGHT_CERTIFICATE_EXP TO ALAIR;
GRANT SELECT ON CXRJ.WEIGHT_CERTIFICATE_IMP TO ALAIR;
GRANT SELECT ON CXRJ.SYS_USUARIO_MENU TO ALAIR;

