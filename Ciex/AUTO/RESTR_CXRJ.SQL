-------------------------------------------------------------------------------------
-- CRIAÇÃO DE SCRIPT PARA REGERAR RESTRIÇÕES DE CHAVE PRIMÁRIA, RELACIONAMENTOS E TRIGGERS DE CXRJ
-------------------------------------------------------------------------------------
DECLARE
        CURSOR RESTR IS SELECT TABLE_NAME, CONSTRAINT_NAME FROM USER_CONSTRAINTS WHERE OWNER = 'CXRJ' ORDER BY DECODE(CONSTRAINT_TYPE,'P', 3, 'R', 2, 1);
        SQLCURSOR PLS_INTEGER;
BEGIN
        SQLCURSOR := DBMS_SQL.OPEN_CURSOR;
        FOR CUR IN RESTR LOOP
                BEGIN
                        DBMS_SQL.PARSE(SQLCURSOR, 'ALTER TABLE CXRJ.' || CUR.TABLE_NAME || ' DROP CONSTRAINT ' || CUR.CONSTRAINT_NAME, DBMS_SQL.V7);
                EXCEPTION
                        WHEN OTHERS THEN
                                NULL;
                END;
        END LOOP;
        DBMS_SQL.CLOSE_CURSOR(SQLCURSOR);
END;
/

ALTER TABLE CXRJ.BL ADD CONSTRAINT ID_BL
PRIMARY KEY (VIAGEM_REF, SEQ);

ALTER TABLE CXRJ.BL_CARGA ADD CONSTRAINT ID_BL_CARGA
PRIMARY KEY (PED_REF, PED_ITEM, VIAGEM_REF, BL_SEQ);

ALTER TABLE CXRJ.BL_CONTINENTAL ADD CONSTRAINT ID_BL_CONTINENTA
PRIMARY KEY (REF);

ALTER TABLE CXRJ.CARTA ADD CONSTRAINT ID_CARTA
PRIMARY KEY (REF);

ALTER TABLE CXRJ.CARTA_CRÉDITO ADD CONSTRAINT ID_CARTA_CRÉDITO
PRIMARY KEY (REF);

ALTER TABLE CXRJ.CARTA_FECH ADD CONSTRAINT ID_CARTA_FECH
PRIMARY KEY (CARTA_REF, FECH_REF);

ALTER TABLE CXRJ.CIA ADD CONSTRAINT ID_CIA
PRIMARY KEY (COD);

ALTER TABLE CXRJ.CIA_CONTATO ADD CONSTRAINT ID_CIA_CONTATO
PRIMARY KEY (CIA_COD, CONTATO_NOME);

ALTER TABLE CXRJ.CIA_RAMO_ATIVIDADE ADD CONSTRAINT ID_CIA_ATIVIDAD
PRIMARY KEY (CIA_COD, RAMO_ATIVIDADE);

ALTER TABLE CXRJ.COND_PAG ADD CONSTRAINT ID_COND_PAG
PRIMARY KEY (COD);

ALTER TABLE CXRJ.CONFIRM_VENDA ADD CONSTRAINT ID_CONF_VENDA
PRIMARY KEY (REF, SEQ);

ALTER TABLE CXRJ.CONFIRM_VENDA_ITEM ADD CONSTRAINT ID_CONF_VENDA_IT
PRIMARY KEY (CONFIRM_VENDA_REF, SEQ, ITEM);

ALTER TABLE CXRJ.CONTA_CORRENTE ADD CONSTRAINT ID_CONTA_CORRENT
PRIMARY KEY (COD);

ALTER TABLE CXRJ.COSIPA_FOLHA_1 ADD CONSTRAINT ID_COSIP_FL_1
PRIMARY KEY (ORD_REF, ITEM);

ALTER TABLE CXRJ.COSIPA_FOLHA_2 ADD CONSTRAINT ID_COSIP_FL_2
PRIMARY KEY (ORD_REF, FOLHA, ITEM);

ALTER TABLE CXRJ.COSIPA_FOLHA_2_PAG ADD CONSTRAINT ID_COSIP_FL_2_PG
PRIMARY KEY (ORD_REF, FOLHA);

ALTER TABLE CXRJ.COSIPA_NEGOCIAÇÃO ADD CONSTRAINT ID_COSIP_NEG
PRIMARY KEY (REF);

ALTER TABLE CXRJ.DEPTO ADD CONSTRAINT ID_DEPTO
PRIMARY KEY (COD);

ALTER TABLE CXRJ.DIVISÃO ADD CONSTRAINT ID_DIVISÃO
PRIMARY KEY (ESCRITÓRIO, DIVISÃO);

ALTER TABLE CXRJ.DIVISÃO_PRODUTO ADD CONSTRAINT ID_DIVISÃO_PROD
PRIMARY KEY (ESCRITÓRIO, DIVISÃO, PROD);

ALTER TABLE CXRJ.DIVISÃO_TIPO_REF ADD CONSTRAINT ID_DIVISÃO_T_REF
PRIMARY KEY (ESCRITÓRIO, DIVISÃO, TIPO_REF);

ALTER TABLE CXRJ.DOC ADD CONSTRAINT ID_DOC
PRIMARY KEY (COD);

ALTER TABLE CXRJ.DOC_ACORDO_COMPLEM ADD CONSTRAINT ID_ACOR_COMP
PRIMARY KEY (DOC);

ALTER TABLE CXRJ.DOC_ACORDO_COMPLEM_DET ADD CONSTRAINT ID_ACOR_COMP_DET
PRIMARY KEY (DOC_SEQ, SEQ_ITEM);

ALTER TABLE CXRJ.DOC_ALADI ADD CONSTRAINT ID_ALADI
PRIMARY KEY (DOC);

ALTER TABLE CXRJ.DOC_ALADI_DET ADD CONSTRAINT ID_ALADI_DET
PRIMARY KEY (DOC_SEQ, SEQ_ITEM);

ALTER TABLE CXRJ.DOC_ALADI_NORMA ADD CONSTRAINT ID_ALADI_NOR
PRIMARY KEY (DOC_SEQ, SEQ_NORMA);

ALTER TABLE CXRJ.DOC_BORDERÔ_I ADD CONSTRAINT ID_BORDERÔ_I
PRIMARY KEY (DOC);

ALTER TABLE CXRJ.DOC_BORDERÔ_P ADD CONSTRAINT ID_BORDERÔ_P
PRIMARY KEY (DOC);

ALTER TABLE CXRJ.DOC_CÂMARA_COMÉRCIO ADD CONSTRAINT ID_CAMAR_COM
PRIMARY KEY (DOC);

ALTER TABLE CXRJ.DOC_CÂMARA_COMÉRCIO_DET ADD CONSTRAINT ID_CAMAR_COM_DET
PRIMARY KEY (DOC_SEQ, SEQ_ITEM);

ALTER TABLE CXRJ.DOC_CARTA_I ADD CONSTRAINT ID_CARTA_DOC_I
PRIMARY KEY (DOC);

ALTER TABLE CXRJ.DOC_CARTA_P ADD CONSTRAINT ID_CARTA_DOC_P
PRIMARY KEY (DOC);

ALTER TABLE CXRJ.DOC_CONHECIMENT_ROD ADD CONSTRAINT ID_CONH_ROD
PRIMARY KEY (DOC);

ALTER TABLE CXRJ.DOC_CONHECIMENT_ROD_DET ADD CONSTRAINT ID_CONH_ROD_DET
PRIMARY KEY (DOC_SEQ, SEQ_ITEM);

ALTER TABLE CXRJ.DOC_FATURA ADD CONSTRAINT ID_FATURA_DOC
PRIMARY KEY (DOC);

ALTER TABLE CXRJ.DOC_FATURA_DET ADD CONSTRAINT ID_FATURA_DET
PRIMARY KEY (DOC_SEQ, SEQ_ITEM);

ALTER TABLE CXRJ.DOC_FATURA_JUROS ADD CONSTRAINT ID_FATURA_JUROS
PRIMARY KEY (DOC);

ALTER TABLE CXRJ.DOC_FATURA_TOT ADD CONSTRAINT ID_FATURA_TOT
PRIMARY KEY (DOC_SEQ, SEQ_LANC);

ALTER TABLE CXRJ.DOC_FECHAMENTO_CÂMB ADD CONSTRAINT ID_FECH_CAMB
PRIMARY KEY (DOC);

ALTER TABLE CXRJ.DOC_FECHAMENTO_CÂMB_TOT ADD CONSTRAINT ID_FECH_CAMB_TOT
PRIMARY KEY (DOC_SEQ, SEQ_LANC);

ALTER TABLE CXRJ.DOC_FIRJAN ADD CONSTRAINT ID_FIRJAN
PRIMARY KEY (DOC);

ALTER TABLE CXRJ.DOC_FIRJAN_DET ADD CONSTRAINT ID_FIRJAN_DET
PRIMARY KEY (DOC_SEQ, SEQ_ITEM);

ALTER TABLE CXRJ.DOC_MERCOSUL ADD CONSTRAINT ID_MERCOSUL
PRIMARY KEY (DOC);

ALTER TABLE CXRJ.DOC_MERCOSUL_BOLIV ADD CONSTRAINT ID_MERC_BOL
PRIMARY KEY (DOC);

ALTER TABLE CXRJ.DOC_MERCOSUL_BOLIV_DET ADD CONSTRAINT ID_MERC_BOL_DET
PRIMARY KEY (DOC_SEQ, SEQ_ITEM);

ALTER TABLE CXRJ.DOC_MERCOSUL_BOLIV_NORMA ADD CONSTRAINT ID_MERC_BOL_NOR
PRIMARY KEY (DOC_SEQ, SEQ_NORMA);

ALTER TABLE CXRJ.DOC_MERCOSUL_CHILE ADD CONSTRAINT ID_MERC_CHI
PRIMARY KEY (DOC);

ALTER TABLE CXRJ.DOC_MERCOSUL_CHILE_DET ADD CONSTRAINT ID_MERC_CHI_DET
PRIMARY KEY (DOC_SEQ, SEQ_ITEM);

ALTER TABLE CXRJ.DOC_MERCOSUL_CHILE_NORMA ADD CONSTRAINT ID_MERC_CHI_NOR
PRIMARY KEY (DOC_SEQ, SEQ_NORMA);

ALTER TABLE CXRJ.DOC_MERCOSUL_DET ADD CONSTRAINT ID_MERCOSUL_DET
PRIMARY KEY (DOC_SEQ, SEQ_ITEM);

ALTER TABLE CXRJ.DOC_MERCOSUL_NORMA ADD CONSTRAINT ID_MERCOSUL_NOR
PRIMARY KEY (DOC_SEQ, SEQ_NORMA);

ALTER TABLE CXRJ.DOC_PLIST_WEIG_CERT ADD CONSTRAINT ID_PLIST
PRIMARY KEY (DOC);

ALTER TABLE CXRJ.DOC_PLIST_WEIG_CERT_DET ADD CONSTRAINT ID_PLIST_DET
PRIMARY KEY (DOC_SEQ, SEQ_ITEM);

ALTER TABLE CXRJ.DOC_SAQUE_2V ADD CONSTRAINT ID_SAQUE_2V
PRIMARY KEY (DOC);

ALTER TABLE CXRJ.DOC_SAQUE_3V ADD CONSTRAINT ID_SAQUE_3V
PRIMARY KEY (DOC);

ALTER TABLE CXRJ.DOC_SAQUE_JUROS_2V ADD CONSTRAINT ID_JUROS_2V
PRIMARY KEY (DOC);

ALTER TABLE CXRJ.DOC_SAQUE_JUROS_3V ADD CONSTRAINT ID_JUROS_3V
PRIMARY KEY (DOC);

ALTER TABLE CXRJ.DOC_TEMPLATE ADD CONSTRAINT ID_DOC_TEMPL
PRIMARY KEY (NOME_TABELA, CAMPO);

ALTER TABLE CXRJ.EMB ADD CONSTRAINT ID_EMB
PRIMARY KEY (REF);

ALTER TABLE CXRJ.EMB_CHECK_LIST ADD CONSTRAINT ID_EMB_CHK_LST
PRIMARY KEY (EMB_REF);

ALTER TABLE CXRJ.EMB_DOC ADD CONSTRAINT ID_EMB_DOC
PRIMARY KEY (EMB_REF, SEQ);

ALTER TABLE CXRJ.EMB_DOC_DESTINO ADD CONSTRAINT ID_EMB_DOC_DEST
PRIMARY KEY (EMB_REF, SEQ, CIA);

ALTER TABLE CXRJ.EMB_DOC_REL ADD CONSTRAINT ID_EMB_DOC_REL
PRIMARY KEY (EMB_REF, DOC, EMB_REL);

ALTER TABLE CXRJ.EMB_F ADD CONSTRAINT ID_EMB_F
PRIMARY KEY (PED_REF, SEQ);

ALTER TABLE CXRJ.EMB_FAMÍLIA ADD CONSTRAINT ID_EMB_FAMÍLIA
PRIMARY KEY (EMB_REF, SEQ);

ALTER TABLE CXRJ.EMB_FAMÍLIA_GENÉRICA ADD CONSTRAINT ID_EMB_FAM_GENER
PRIMARY KEY (EMB_REF, SEQ);

ALTER TABLE CXRJ.EMB_FILTRO ADD CONSTRAINT ID_EMB_FILTRO
PRIMARY KEY (EMB_REF, SEQ);

ALTER TABLE CXRJ.EMB_ITEM_TEMP ADD CONSTRAINT ID_EMB_ITEM_TEMP
PRIMARY KEY (EMB_REF, SEQ);

ALTER TABLE CXRJ.EMB_LANÇ ADD CONSTRAINT ID_EMB_LANÇ
PRIMARY KEY (EMB_REF, SEQ);

ALTER TABLE CXRJ.EMB_MENSAGEM ADD CONSTRAINT ID_EMB_MENSAGEM
PRIMARY KEY (EMB_REF, SEQ);

ALTER TABLE CXRJ.EMB_RE ADD CONSTRAINT ID_EMB_RE
PRIMARY KEY (EMB_REF, RE);

ALTER TABLE CXRJ.EMB_SD ADD CONSTRAINT ID_EMB_SD
PRIMARY KEY (EMB_REF, SD);

ALTER TABLE CXRJ.EMB_TOTALIZA ADD CONSTRAINT ID_EMB_TOTALIZA
PRIMARY KEY (EMB_REF, SEQ);

ALTER TABLE CXRJ.EMBALAGEM ADD CONSTRAINT ID_EMBALAGEM
PRIMARY KEY (COD);

ALTER TABLE CXRJ.ESCRITÓRIO ADD CONSTRAINT ID_ESCRITÓRIO
PRIMARY KEY (ESCRITÓRIO);

ALTER TABLE CXRJ.ETIQ_MALA_DIRETA ADD CONSTRAINT ID_ETIQ_MALA_DIR
PRIMARY KEY (USUÁRIO, CRIAÇÃO_DATA, SEQ);

ALTER TABLE CXRJ.FATURA ADD CONSTRAINT ID_FATURA
PRIMARY KEY (REF);

ALTER TABLE CXRJ.FATURA_CONFIRM ADD CONSTRAINT ID_FATURA_CONFIRM
PRIMARY KEY (REF, SEQ);

ALTER TABLE CXRJ.FATURA_CONFIRM_ITEM ADD CONSTRAINT ID_FATURA_CONFIRM_ITEM
PRIMARY KEY (CONFIRM_VENDA_REF, SEQ, ITEM);

ALTER TABLE CXRJ.FAX ADD CONSTRAINT ID_FAX
PRIMARY KEY (REF);

ALTER TABLE CXRJ.FAX_CHAVE ADD CONSTRAINT ID_FAX_CHAVE
PRIMARY KEY (FAX_REF, CHAVE);

ALTER TABLE CXRJ.FAX_DESTINO ADD CONSTRAINT ID_FAX_DESTINO
PRIMARY KEY (FAX_REF, SEQ);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT ID_FECH
PRIMARY KEY (REF);

ALTER TABLE CXRJ.FECH_CARGA ADD CONSTRAINT ID_FECH_CARGA
PRIMARY KEY (FECH_REF, PED_REF, PED_ITEM);

ALTER TABLE CXRJ.FECH_CONTATO ADD CONSTRAINT ID_FECH_CONTATO
PRIMARY KEY (FECH_REF, CIA_COD, CONTATO_NOME);

ALTER TABLE CXRJ.FECH_SUBSTITUÍDO ADD CONSTRAINT ID_FECH_SUBSTUÍD
PRIMARY KEY (SUBSTITUÍDO, SUBSTITUTO);

ALTER TABLE CXRJ.FRETE ADD CONSTRAINT ID_FRETE
PRIMARY KEY (CARGA_PORTO, DESCARGA_PORTO, PROPRIETÁRIO, FRETE_DETALHE);

ALTER TABLE CXRJ.GRUPO_PRODUTO ADD CONSTRAINT ID_GRUPO_PROD
PRIMARY KEY (COD);

ALTER TABLE CXRJ.IDIOMA ADD CONSTRAINT ID_IDIOMA
PRIMARY KEY (COD);

ALTER TABLE CXRJ.INCOTERM ADD CONSTRAINT ID_INCOTERM
PRIMARY KEY (COD);

ALTER TABLE CXRJ.INCOTERM_LANÇ ADD CONSTRAINT ID_INCOTERM_LNÇ
PRIMARY KEY (INCOTERM, LANÇ);

ALTER TABLE CXRJ.INSTRUÇÃO_PAG ADD CONSTRAINT ID_INSTRUÇÃO_PAG
PRIMARY KEY (REF);

ALTER TABLE CXRJ.INSTRUÇÃO_PAG_FECH ADD CONSTRAINT ID_INSTR_PG_FECH
PRIMARY KEY (INSTRUÇÃO_PAG_REF, FECH_REF);

ALTER TABLE CXRJ.LANÇ ADD CONSTRAINT ID_LANÇ
PRIMARY KEY (LANÇ);

ALTER TABLE CXRJ.LOCAL_RESULT ADD CONSTRAINT ID_LOCAL_RESULT
PRIMARY KEY (COD);

ALTER TABLE CXRJ.MERCADO ADD CONSTRAINT ID_MERCADO
PRIMARY KEY (ANO_MÊS, CONTRATANTE, FORNECEDOR, TRANSPORTADOR, PROD);

ALTER TABLE CXRJ.MERCADO_PORTO ADD CONSTRAINT ID_MERCADO_PORTO
PRIMARY KEY (ANO_MÊS, CONTRATANTE, FORNECEDOR, TRANSPORTADOR, PROD, QTD, PORTO);

ALTER TABLE CXRJ.MODALIDADE_FRETE ADD CONSTRAINT ID_MOD_FRETE
PRIMARY KEY (COD);

ALTER TABLE CXRJ.MOEDA ADD CONSTRAINT ID_MOEDA
PRIMARY KEY (COD);

ALTER TABLE CXRJ.NAVIO ADD CONSTRAINT ID_NAVIO
PRIMARY KEY (COD);

ALTER TABLE CXRJ.NOTA_CRÉDITO ADD CONSTRAINT ID_NOTA_CRÉDITO
PRIMARY KEY (REF);

ALTER TABLE CXRJ.NOTA_CRÉDITO_FECH ADD CONSTRAINT ID_NT_CRÉD_FECH
PRIMARY KEY (NOTA_CRÉDITO_REF, FECH_REF);

ALTER TABLE CXRJ.NOTA_CRÉDITO_PAG ADD CONSTRAINT ID_NT_CRED_PAG
PRIMARY KEY (NOTA_CRÉDITO_REF, SEQ);

ALTER TABLE CXRJ.NOTA_DÉBITO ADD CONSTRAINT ID_NOTA_DÉBITO
PRIMARY KEY (REF);

ALTER TABLE CXRJ.NOTA_DÉBITO_FECH ADD CONSTRAINT ID_NT_DEB_FECH
PRIMARY KEY (NOTA_DÉBITO_REF, FECH_REF);

ALTER TABLE CXRJ.NOTA_DÉBITO_RECEB ADD CONSTRAINT ID_NT_DEB_RECEB
PRIMARY KEY (NOTA_DÉBITO_REF, SEQ);

ALTER TABLE CXRJ.PAÍS ADD CONSTRAINT ID_PAÍS
PRIMARY KEY (COD);

ALTER TABLE CXRJ.PARAM ADD CONSTRAINT ID_PARAM
PRIMARY KEY (GRUPO, PARAM);

ALTER TABLE CXRJ.PED ADD CONSTRAINT ID_PED
PRIMARY KEY (REF);

ALTER TABLE CXRJ.PED_CONTATO ADD CONSTRAINT ID_PED_CONTAT
PRIMARY KEY (PED_REF, CIA_COD, CONTATO_NOME);

ALTER TABLE CXRJ.PED_ITEM ADD CONSTRAINT ID_PED_ITEM
PRIMARY KEY (PED_REF, ITEM);

ALTER TABLE CXRJ.PED_LANÇ ADD CONSTRAINT ID_PED_LANÇ
PRIMARY KEY (PED_REF, SEQ);

ALTER TABLE CXRJ.PED_RESULT ADD CONSTRAINT ID_PED_RESULT
PRIMARY KEY (PED_REF, SEQ);

ALTER TABLE CXRJ.PORTO ADD CONSTRAINT ID_PORTO
PRIMARY KEY (COD);

ALTER TABLE CXRJ.PRODUTO ADD CONSTRAINT ID_PRODUTO
PRIMARY KEY (COD);

ALTER TABLE CXRJ.PRODUTO_ESPECIF ADD CONSTRAINT ID_PROD_ESPECIF
PRIMARY KEY (COD, SEQ);

ALTER TABLE CXRJ.PROG ADD CONSTRAINT ID_PROG
PRIMARY KEY (FECH_REF, POSICIONAMENTO_DATA);

ALTER TABLE CXRJ.PROG_CARGA ADD CONSTRAINT ID_PROG_CARGA
PRIMARY KEY (FECH_REF, POSICIONAMENTO_DATA, PED_REF, PED_ITEM);

ALTER TABLE CXRJ.RAMO_ATIVIDADE ADD CONSTRAINT ID_RAMO_ATIVIDAD
PRIMARY KEY (COD);

ALTER TABLE CXRJ.REF ADD CONSTRAINT ID_REF
PRIMARY KEY (REF);

ALTER TABLE CXRJ.REL_CSC_PAÍS_FORN_EMBARQUE ADD CONSTRAINT ID_REL_CSC_PAÍS_FORN_EMBARQUE
PRIMARY KEY (CHAVE, ORDEM, ESCRIT, DIV);

ALTER TABLE CXRJ.REL_CSC_PAÍS_FORN_PEDIDO ADD CONSTRAINT ID_REL_CSC_PAÍS_FORN_PEDIDO
PRIMARY KEY (CHAVE, ORDEM, ESCRIT, DIV);

ALTER TABLE CXRJ.REL_CSC_PAÍS_FORN_RESULT ADD CONSTRAINT ID_REL_CSC_PAÍS_FORN_RESULT
PRIMARY KEY (CHAVE, ORDEM, ESCRIT, DIV);

ALTER TABLE CXRJ.RESULT ADD CONSTRAINT ID_RESULT
PRIMARY KEY (PED_REF, EMB_SEQ, SEQ);

ALTER TABLE CXRJ.SYS_CAD_LOG ADD CONSTRAINT ID_CAD_LOG
PRIMARY KEY (SEQ);

ALTER TABLE CXRJ.SYS_CONFIG_GLOBAL ADD CONSTRAINT ID_CONFIG_GLOBAL
PRIMARY KEY (PARAM);

ALTER TABLE CXRJ.SYS_DELETE ADD CONSTRAINT ID_DELETE
PRIMARY KEY (NOME_TABELA, CHAVE);

ALTER TABLE CXRJ.SYS_LOCALID ADD CONSTRAINT ID_SYS_LOCAL
PRIMARY KEY (NOME);

ALTER TABLE CXRJ.SYS_OCORRÊNCIA ADD CONSTRAINT ID_OCORRÊNCIA
PRIMARY KEY (SEQ);

ALTER TABLE CXRJ.SYS_TABELA ADD CONSTRAINT ID_SYS_TABELA
PRIMARY KEY (NOME);

ALTER TABLE CXRJ.SYS_USUÁRIO ADD CONSTRAINT ID_USUÁRIO
PRIMARY KEY (USUÁRIO);

ALTER TABLE CXRJ.TIPO_REF ADD CONSTRAINT ID_TIPO_REF
PRIMARY KEY (TIPO);

ALTER TABLE CXRJ.UNID_QUANTID ADD CONSTRAINT ID_UNID_QUANTID
PRIMARY KEY (COD);

ALTER TABLE CXRJ.VIA_TRANSPORTE ADD CONSTRAINT ID_VIA_TRANSPORT
PRIMARY KEY (COD);

ALTER TABLE CXRJ.VIAGEM ADD CONSTRAINT ID_VIAGEM
PRIMARY KEY (REF);

ALTER TABLE CXRJ.VIAGEM_ESCALA ADD CONSTRAINT ID_VIAGEM_ESCALA
PRIMARY KEY (VIAGEM_REF, ESCALA);

ALTER TABLE CXRJ.DOC_ACORDO_COMPLEM_DET ADD CONSTRAINT ACOR_COMP$ACOR_COMP_DET$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_ACORDO_COMPLEM (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_ALADI_DET ADD CONSTRAINT ALADI$ALADI_DET$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_ALADI (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_ALADI_NORMA ADD CONSTRAINT ALADI$ALADI_NOR$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_ALADI (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.BL_CARGA ADD CONSTRAINT BL$BL_CARGA$01
FOREIGN KEY (VIAGEM_REF, BL_SEQ) REFERENCES CXRJ.BL (VIAGEM_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_ITEM ADD CONSTRAINT BL_CARGA$EMB_ITEM$01
FOREIGN KEY (PED_REF, PED_ITEM, VIAGEM_REF, BL_SEQ) REFERENCES CXRJ.BL_CARGA (PED_REF, PED_ITEM, VIAGEM_REF, BL_SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_CÂMARA_COMÉRCIO_DET ADD CONSTRAINT CAMAR_COM$CAMAR_COM_DET$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_CÂMARA_COMÉRCIO (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.CARTA_FECH ADD CONSTRAINT CARTA$CARTA_FECH$01
FOREIGN KEY (CARTA_REF) REFERENCES CXRJ.CARTA (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB ADD CONSTRAINT CARTA_CRÉDITO$EMB$01
FOREIGN KEY (CARTA_CRED_REF) REFERENCES CXRJ.CARTA_CRÉDITO (REF);

ALTER TABLE CXRJ.CARTA ADD CONSTRAINT CIA$CARTA$01
FOREIGN KEY (CIA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.CARTA ADD CONSTRAINT CIA$CARTA$02
FOREIGN KEY (CIA_SUB) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.CARTA ADD CONSTRAINT CIA$CARTA$03
FOREIGN KEY (EMPRESA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.CIA_RAMO_ATIVIDADE ADD CONSTRAINT CIA$CIA_ATIVIDAD$01
FOREIGN KEY (CIA_COD) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.CIA_CONTATO ADD CONSTRAINT CIA$CIA_CONTATO$01
FOREIGN KEY (CIA_COD) REFERENCES CXRJ.CIA (COD) ON DELETE CASCADE;

ALTER TABLE CXRJ.CONFIRM_VENDA ADD CONSTRAINT CIA$CONF_VENDA$01
FOREIGN KEY (COMPRADOR) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.CONFIRM_VENDA ADD CONSTRAINT CIA$CONF_VENDA$02
FOREIGN KEY (USUÁRIO_FINAL) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.CONFIRM_VENDA ADD CONSTRAINT CIA$CONF_VENDA$03
FOREIGN KEY (PRODUTOR) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.EMB ADD CONSTRAINT CIA$EMB$02
FOREIGN KEY (NEGOCIADOR) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.EMB_DOC_DESTINO ADD CONSTRAINT CIA$EMB_DOC_DEST$01
FOREIGN KEY (CIA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.EMB_LANÇ ADD CONSTRAINT CIA$EMB_LANÇ$01
FOREIGN KEY (BENEFICIÁRIO) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FATURA ADD CONSTRAINT CIA$FATURA$01
FOREIGN KEY (CIA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FATURA ADD CONSTRAINT CIA$FATURA$02
FOREIGN KEY (CIA_SUB) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FATURA ADD CONSTRAINT CIA$FATURA$03
FOREIGN KEY (EMPRESA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FAX_DESTINO ADD CONSTRAINT CIA$FAX_DESTINO$01
FOREIGN KEY (CIA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT CIA$FECH$01
FOREIGN KEY (CIA_PAGADORA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT CIA$FECH$02
FOREIGN KEY (DESCARGA_AGENTE) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT CIA$FECH$03
FOREIGN KEY (CORRETOR) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT CIA$FECH$04
FOREIGN KEY (PROPRIETÁRIO) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT CIA$FECH$05
FOREIGN KEY (NEGOCIANTE) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT CIA$FECH$06
FOREIGN KEY (CARGA_AGENTE) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT CIA$FECH$07
FOREIGN KEY (CONTRATANTE) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT CIA$FECH$08
FOREIGN KEY (CARGA_ESTIVA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT CIA$FECH$09
FOREIGN KEY (DESCARGA_ESTIVA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.FRETE ADD CONSTRAINT CIA$FRETE$01
FOREIGN KEY (PROPRIETÁRIO) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.INSTRUÇÃO_PAG ADD CONSTRAINT CIA$INSTRUÇÃO_PAG$01
FOREIGN KEY (PAGADOR) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.INSTRUÇÃO_PAG ADD CONSTRAINT CIA$INSTRUÇÃO_PAG$02
FOREIGN KEY (RECEBEDOR) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.NOTA_CRÉDITO ADD CONSTRAINT CIA$NOTA_CRÉDITO$01
FOREIGN KEY (CIA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.NOTA_CRÉDITO ADD CONSTRAINT CIA$NOTA_CRÉDITO$02
FOREIGN KEY (CIA_SUB) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.NOTA_DÉBITO ADD CONSTRAINT CIA$NOTA_DÉBITO$01
FOREIGN KEY (CIA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.NOTA_DÉBITO ADD CONSTRAINT CIA$NOTA_DÉBITO$02
FOREIGN KEY (CIA_SUB) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT CIA$PED$01
FOREIGN KEY (FORNECEDOR) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT CIA$PED$02
FOREIGN KEY (EXP) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT CIA$PED$03
FOREIGN KEY (IMP) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT CIA$PED$04
FOREIGN KEY (DISTRIBUIDOR) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT CIA$PED$05
FOREIGN KEY (PAGADOR) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.PED_ITEM ADD CONSTRAINT CIA$PED_ITEM$01
FOREIGN KEY (USUÁRIO_FINAL) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.PED_LANÇ ADD CONSTRAINT CIA$PED_LANÇ$01
FOREIGN KEY (BENEFICIÁRIO) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.PED_RESULT ADD CONSTRAINT CIA$PED_RESULT$01
FOREIGN KEY (COMPETÊNCIA) REFERENCES CXRJ.CIA (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT COND_PAG$PED$01
FOREIGN KEY (FORNECEDOR_COND_RECEB) REFERENCES CXRJ.COND_PAG (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT COND_PAG$PED$02
FOREIGN KEY (EXP_COND_RECEB) REFERENCES CXRJ.COND_PAG (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT COND_PAG$PED$03
FOREIGN KEY (IMP_COND_RECEB) REFERENCES CXRJ.COND_PAG (COD);

ALTER TABLE CXRJ.CONFIRM_VENDA_ITEM ADD CONSTRAINT CONF_VENDA$CONF_VENDA_IT$01
FOREIGN KEY (CONFIRM_VENDA_REF, SEQ) REFERENCES CXRJ.CONFIRM_VENDA (REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.FATURA_CONFIRM ADD CONSTRAINT CONFIRM_VENDA$FAT_CONF$01
FOREIGN KEY (REF, SEQ) REFERENCES CXRJ.CONFIRM_VENDA (REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_CONHECIMENT_ROD_DET ADD CONSTRAINT CONH_ROD$CONH_ROD_DET$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_CONHECIMENT_ROD (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.COSIPA_FOLHA_2 ADD CONSTRAINT COSIP_FL_2_PG$COSIP_FL_2$01
FOREIGN KEY (ORD_REF, FOLHA) REFERENCES CXRJ.COSIPA_FOLHA_2_PAG (ORD_REF, FOLHA) ON DELETE CASCADE;

ALTER TABLE CXRJ.COSIPA_FOLHA_1 ADD CONSTRAINT COSIP_NEG$COSIP_FL_1$01
FOREIGN KEY (ORD_REF) REFERENCES CXRJ.COSIPA_NEGOCIAÇÃO (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.COSIPA_FOLHA_2_PAG ADD CONSTRAINT COSIP_NEG$COSIP_FL_2_PG$01
FOREIGN KEY (ORD_REF) REFERENCES CXRJ.COSIPA_NEGOCIAÇÃO (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.TIPO_REF ADD CONSTRAINT DEPTO$TIPO_REF$01
FOREIGN KEY (DEPTO) REFERENCES CXRJ.DEPTO (COD);

ALTER TABLE CXRJ.DIVISÃO_PRODUTO ADD CONSTRAINT DIVISÃO$DIVISÃO_PROD$01
FOREIGN KEY (ESCRITÓRIO, DIVISÃO) REFERENCES CXRJ.DIVISÃO (ESCRITÓRIO, DIVISÃO) ON DELETE CASCADE;

ALTER TABLE CXRJ.DIVISÃO_TIPO_REF ADD CONSTRAINT DIVISÃO$DIVISÃO_T_REF$01
FOREIGN KEY (ESCRITÓRIO, DIVISÃO) REFERENCES CXRJ.DIVISÃO (ESCRITÓRIO, DIVISÃO);

ALTER TABLE CXRJ.EMB_DOC ADD CONSTRAINT DOC$EMB_DOC$01
FOREIGN KEY (DOC) REFERENCES CXRJ.DOC (COD);

ALTER TABLE CXRJ.BL ADD CONSTRAINT EMB$BL$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_CHECK_LIST ADD CONSTRAINT EMB$EMB_CHK_LST$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_DOC ADD CONSTRAINT EMB$EMB_DOC$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_DOC_REL ADD CONSTRAINT EMB$EMB_DOC_REL$01
FOREIGN KEY (EMB_REL) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_FAMÍLIA_GENÉRICA ADD CONSTRAINT EMB$EMB_FAM_GENER$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_FAMÍLIA ADD CONSTRAINT EMB$EMB_FAMÍLIA$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_FILTRO ADD CONSTRAINT EMB$EMB_FILTRO$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_ITEM ADD CONSTRAINT EMB$EMB_ITEM$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_LANÇ ADD CONSTRAINT EMB$EMB_LANÇ$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_MENSAGEM ADD CONSTRAINT EMB$EMB_MENSAGEM$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_RE ADD CONSTRAINT EMB$EMB_RE$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_SD ADD CONSTRAINT EMB$EMB_SD$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_TOTALIZA ADD CONSTRAINT EMB$EMB_TOTALIZA$01
FOREIGN KEY (EMB_REF) REFERENCES CXRJ.EMB (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_ACORDO_COMPLEM ADD CONSTRAINT EMB_DOC$ACOR_COMP$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_ALADI ADD CONSTRAINT EMB_DOC$ALADI$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_BORDERÔ_I ADD CONSTRAINT EMB_DOC$BORDERÔ_I$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_BORDERÔ_P ADD CONSTRAINT EMB_DOC$BORDERÔ_P$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_CÂMARA_COMÉRCIO ADD CONSTRAINT EMB_DOC$CAMAR_COM$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_CARTA_I ADD CONSTRAINT EMB_DOC$CARTA_DOC_I$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_CARTA_P ADD CONSTRAINT EMB_DOC$CARTA_DOC_P$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_CONHECIMENT_ROD ADD CONSTRAINT EMB_DOC$CONH_ROD$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_DOC_DESTINO ADD CONSTRAINT EMB_DOC$EMB_DOC_DEST$01
FOREIGN KEY (EMB_REF, SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_DOC_REL ADD CONSTRAINT EMB_DOC$EMB_DOC_REL$01
FOREIGN KEY (EMB_REF, DOC) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_FATURA ADD CONSTRAINT EMB_DOC$FATURA_DOC$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_FATURA_JUROS ADD CONSTRAINT EMB_DOC$FATURA_JUROS$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_FECHAMENTO_CÂMB ADD CONSTRAINT EMB_DOC$FECH_CAMB$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_FIRJAN ADD CONSTRAINT EMB_DOC$FIRJAN$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_SAQUE_JUROS_2V ADD CONSTRAINT EMB_DOC$JUROS_2V$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_SAQUE_JUROS_3V ADD CONSTRAINT EMB_DOC$JUROS_3V$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_MERCOSUL_BOLIV ADD CONSTRAINT EMB_DOC$MERC_BOL$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_MERCOSUL_CHILE ADD CONSTRAINT EMB_DOC$MERC_CHI$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_MERCOSUL ADD CONSTRAINT EMB_DOC$MERCOSUL$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_PLIST_WEIG_CERT ADD CONSTRAINT EMB_DOC$PLIST$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_SAQUE_2V ADD CONSTRAINT EMB_DOC$SAQUE_2V$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_SAQUE_3V ADD CONSTRAINT EMB_DOC$SAQUE_3V$01
FOREIGN KEY (EMB_REF, EMB_DOC_SEQ) REFERENCES CXRJ.EMB_DOC (EMB_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.RESULT ADD CONSTRAINT EMB_F$RESULT$01
FOREIGN KEY (PED_REF, EMB_SEQ) REFERENCES CXRJ.EMB_F (PED_REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.BL_CARGA ADD CONSTRAINT EMB_FAM_GENER$BL_CARGA$01
FOREIGN KEY (EMB_REF, FAMÍLIA_GENÉRICA) REFERENCES CXRJ.EMB_FAMÍLIA_GENÉRICA (EMB_REF, SEQ);

ALTER TABLE CXRJ.BL_CARGA ADD CONSTRAINT EMB_FAMÍLIA$BL_CARGA$01
FOREIGN KEY (EMB_REF, FAMÍLIA) REFERENCES CXRJ.EMB_FAMÍLIA (EMB_REF, SEQ);

ALTER TABLE CXRJ.EMB_ITEM ADD CONSTRAINT EMB_RE$EMB_ITEM$01
FOREIGN KEY (EMB_REF, RE) REFERENCES CXRJ.EMB_RE (EMB_REF, RE);

ALTER TABLE CXRJ.PED_ITEM ADD CONSTRAINT EMBALAGEM$PED_ITEM$01
FOREIGN KEY (EMBALAGEM) REFERENCES CXRJ.EMBALAGEM (COD);

ALTER TABLE CXRJ.DIVISÃO ADD CONSTRAINT ESCRITÓRIO$DIVISÃO$01
FOREIGN KEY (ESCRITÓRIO) REFERENCES CXRJ.ESCRITÓRIO (ESCRITÓRIO) ON DELETE CASCADE;

ALTER TABLE CXRJ.FATURA_CONFIRM_ITEM ADD CONSTRAINT FAT_CONF$FAT_CONF_ITEM$01
FOREIGN KEY (CONFIRM_VENDA_REF, SEQ) REFERENCES CXRJ.FATURA_CONFIRM (REF, SEQ) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_FATURA_DET ADD CONSTRAINT FATURA_DOC$FATURA_DET$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_FATURA (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_FATURA_TOT ADD CONSTRAINT FATURA_DOC$FATURA_TOT$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_FATURA (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.FAX_CHAVE ADD CONSTRAINT FAX$FAX_CHAVE$01
FOREIGN KEY (FAX_REF) REFERENCES CXRJ.FAX (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.FAX_DESTINO ADD CONSTRAINT FAX$FAX_DESTINO$01
FOREIGN KEY (FAX_REF) REFERENCES CXRJ.FAX (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.BL_CARGA ADD CONSTRAINT FECH$BL_CARGA$01
FOREIGN KEY (FECH_REF) REFERENCES CXRJ.FECH (REF);

ALTER TABLE CXRJ.CARTA_FECH ADD CONSTRAINT FECH$CARTA_FECH$01
FOREIGN KEY (FECH_REF) REFERENCES CXRJ.FECH (REF);

ALTER TABLE CXRJ.FATURA ADD CONSTRAINT FECH$FATURA$01
FOREIGN KEY (FECH_REF) REFERENCES CXRJ.FECH (REF);

ALTER TABLE CXRJ.FECH_CARGA ADD CONSTRAINT FECH$FECH_CARGA$01
FOREIGN KEY (FECH_REF) REFERENCES CXRJ.FECH (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.FECH_CONTATO ADD CONSTRAINT FECH$FECH_CONTATO$01
FOREIGN KEY (FECH_REF) REFERENCES CXRJ.FECH (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.FECH_SUBSTITUÍDO ADD CONSTRAINT FECH$FECH_SUBSTUÍD$01
FOREIGN KEY (SUBSTITUTO) REFERENCES CXRJ.FECH (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.FECH_SUBSTITUÍDO ADD CONSTRAINT FECH$FECH_SUBSTUÍD$02
FOREIGN KEY (SUBSTITUÍDO) REFERENCES CXRJ.FECH (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.INSTRUÇÃO_PAG_FECH ADD CONSTRAINT FECH$INSTR_PG_FECH$01
FOREIGN KEY (FECH_REF) REFERENCES CXRJ.FECH (REF);

ALTER TABLE CXRJ.NOTA_CRÉDITO_FECH ADD CONSTRAINT FECH$NT_CRÉD_FECH$01
FOREIGN KEY (FECH_REF) REFERENCES CXRJ.FECH (REF);

ALTER TABLE CXRJ.NOTA_DÉBITO_FECH ADD CONSTRAINT FECH$NT_DEB_FECH$01
FOREIGN KEY (FECH_REF) REFERENCES CXRJ.FECH (REF);

ALTER TABLE CXRJ.PROG ADD CONSTRAINT FECH$PROG$01
FOREIGN KEY (FECH_REF) REFERENCES CXRJ.FECH (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_FECHAMENTO_CÂMB_TOT ADD CONSTRAINT FECH_CAMB$FECH_CAMB_TOT$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_FECHAMENTO_CÂMB (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.PROG_CARGA ADD CONSTRAINT FECH_CARGA$PROG_CARGA$01
FOREIGN KEY (FECH_REF, PED_REF, PED_ITEM) REFERENCES CXRJ.FECH_CARGA (FECH_REF, PED_REF, PED_ITEM) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_FIRJAN_DET ADD CONSTRAINT FIRJAN$FIRJAN_DET$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_FIRJAN (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.PRODUTO ADD CONSTRAINT GRUPO_PROD$PRODUTO$01
FOREIGN KEY (GRUPO) REFERENCES CXRJ.GRUPO_PRODUTO (COD);

ALTER TABLE CXRJ.CARTA ADD CONSTRAINT IDIOMA$CARTA$01
FOREIGN KEY (IDIOMA) REFERENCES CXRJ.IDIOMA (COD);

ALTER TABLE CXRJ.EMB ADD CONSTRAINT IDIOMA$EMB$01
FOREIGN KEY (IDIOMA) REFERENCES CXRJ.IDIOMA (COD);

ALTER TABLE CXRJ.PAÍS ADD CONSTRAINT IDIOMA$PAÍS$01
FOREIGN KEY (IDIOMA) REFERENCES CXRJ.IDIOMA (COD);

ALTER TABLE CXRJ.EMB_LANÇ ADD CONSTRAINT INCOTERM$EMB_LANÇ$01
FOREIGN KEY (TOTAL_TIPO) REFERENCES CXRJ.INCOTERM (COD);

ALTER TABLE CXRJ.INCOTERM_LANÇ ADD CONSTRAINT INCOTERM$INCOTERM_LNÇ$01
FOREIGN KEY (INCOTERM) REFERENCES CXRJ.INCOTERM (COD) ON DELETE CASCADE;

ALTER TABLE CXRJ.PED ADD CONSTRAINT INCOTERM$PED$01
FOREIGN KEY (FORNECEDOR_COND_VENDA) REFERENCES CXRJ.INCOTERM (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT INCOTERM$PED$02
FOREIGN KEY (EXP_COND_VENDA) REFERENCES CXRJ.INCOTERM (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT INCOTERM$PED$03
FOREIGN KEY (IMP_COND_VENDA) REFERENCES CXRJ.INCOTERM (COD);

ALTER TABLE CXRJ.PED_LANÇ ADD CONSTRAINT INCOTERM$PED_LANÇ$01
FOREIGN KEY (TOTAL_TIPO) REFERENCES CXRJ.INCOTERM (COD);

ALTER TABLE CXRJ.PED_RESULT ADD CONSTRAINT INCOTERM$PED_RESULT$01
FOREIGN KEY (TOTAL_TIPO) REFERENCES CXRJ.INCOTERM (COD);

ALTER TABLE CXRJ.INSTRUÇÃO_PAG_FECH ADD CONSTRAINT INSTRUÇÃO_PAG$INSTR_PG_FECH$01
FOREIGN KEY (INSTRUÇÃO_PAG_REF) REFERENCES CXRJ.INSTRUÇÃO_PAG (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB_LANÇ ADD CONSTRAINT LANÇ$EMB_LANÇ$01
FOREIGN KEY (LANÇ) REFERENCES CXRJ.LANÇ (LANÇ);

ALTER TABLE CXRJ.EMB_TOTALIZA ADD CONSTRAINT LANÇ$EMB_TOTALIZA$01
FOREIGN KEY (LANÇ) REFERENCES CXRJ.LANÇ (LANÇ);

ALTER TABLE CXRJ.INCOTERM_LANÇ ADD CONSTRAINT LANÇ$INCOTERM_LNÇ$01
FOREIGN KEY (LANÇ) REFERENCES CXRJ.LANÇ (LANÇ);

ALTER TABLE CXRJ.PED_LANÇ ADD CONSTRAINT LANÇ$PED_LANÇ$01
FOREIGN KEY (LANÇ) REFERENCES CXRJ.LANÇ (LANÇ);

ALTER TABLE CXRJ.PED_RESULT ADD CONSTRAINT LANÇ$PED_RESULT$01
FOREIGN KEY (LANÇ) REFERENCES CXRJ.LANÇ (LANÇ);

ALTER TABLE CXRJ.DOC_MERCOSUL_BOLIV_DET ADD CONSTRAINT MERC_BOL$MERC_BOL_DET$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_MERCOSUL_BOLIV (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_MERCOSUL_BOLIV_NORMA ADD CONSTRAINT MERC_BOL$MERC_BOL_NOR$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_MERCOSUL_BOLIV (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_MERCOSUL_CHILE_DET ADD CONSTRAINT MERC_CHI$MERC_CHI_DET$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_MERCOSUL_CHILE (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_MERCOSUL_CHILE_NORMA ADD CONSTRAINT MERC_CHI$MERC_CHI_NOR$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_MERCOSUL_CHILE (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.MERCADO_PORTO ADD CONSTRAINT MERCADO$MERCADO_PORTO$01
FOREIGN KEY (ANO_MÊS, CONTRATANTE, FORNECEDOR, TRANSPORTADOR, PROD) REFERENCES CXRJ.MERCADO (ANO_MÊS, CONTRATANTE, FORNECEDOR, TRANSPORTADOR, PROD) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_MERCOSUL_DET ADD CONSTRAINT MERCOSUL$MERCOSUL_DET$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_MERCOSUL (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_MERCOSUL_NORMA ADD CONSTRAINT MERCOSUL$MERCOSUL_NOR$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_MERCOSUL (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.FECH ADD CONSTRAINT MOD_FRETE$FECH$01
FOREIGN KEY (FRETE_DETALHE) REFERENCES CXRJ.MODALIDADE_FRETE (COD);

ALTER TABLE CXRJ.FRETE ADD CONSTRAINT MOD_FRETE$FRETE$01
FOREIGN KEY (FRETE_DETALHE) REFERENCES CXRJ.MODALIDADE_FRETE (COD);

ALTER TABLE CXRJ.MERCADO ADD CONSTRAINT MOD_FRETE$MERCADO$01
FOREIGN KEY (FRETE_COND) REFERENCES CXRJ.MODALIDADE_FRETE (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT MOD_FRETE$PED$01
FOREIGN KEY (FRETE_COND) REFERENCES CXRJ.MODALIDADE_FRETE (COD);

ALTER TABLE CXRJ.EMB ADD CONSTRAINT MOEDA$EMB$01
FOREIGN KEY (MOEDA) REFERENCES CXRJ.MOEDA (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT MOEDA$FECH$01
FOREIGN KEY (MOEDA) REFERENCES CXRJ.MOEDA (COD);

ALTER TABLE CXRJ.INSTRUÇÃO_PAG ADD CONSTRAINT MOEDA$INSTRUÇÃO_PAG$01
FOREIGN KEY (MOEDA) REFERENCES CXRJ.MOEDA (COD);

ALTER TABLE CXRJ.NOTA_CRÉDITO ADD CONSTRAINT MOEDA$NOTA_CRÉDITO$01
FOREIGN KEY (MOEDA) REFERENCES CXRJ.MOEDA (COD);

ALTER TABLE CXRJ.NOTA_DÉBITO ADD CONSTRAINT MOEDA$NOTA_DÉBITO$01
FOREIGN KEY (MOEDA) REFERENCES CXRJ.MOEDA (COD);

ALTER TABLE CXRJ.NOTA_CRÉDITO_PAG ADD CONSTRAINT MOEDA$NT_CRED_PAG$01
FOREIGN KEY (MOEDA) REFERENCES CXRJ.MOEDA (COD);

ALTER TABLE CXRJ.NOTA_DÉBITO_RECEB ADD CONSTRAINT MOEDA$NT_DEB_RECEB$01
FOREIGN KEY (MOEDA) REFERENCES CXRJ.MOEDA (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT MOEDA$PED$01
FOREIGN KEY (MOEDA) REFERENCES CXRJ.MOEDA (COD);

ALTER TABLE CXRJ.VIAGEM ADD CONSTRAINT NAVIO$VIAGEM$01
FOREIGN KEY (NAVIO) REFERENCES CXRJ.NAVIO (COD);

ALTER TABLE CXRJ.VIAGEM ADD CONSTRAINT NAVIO$VIAGEM$02
FOREIGN KEY (NAVIO_ÚLTIMO) REFERENCES CXRJ.NAVIO (COD);

ALTER TABLE CXRJ.NOTA_CRÉDITO_FECH ADD CONSTRAINT NOTA_CRÉDITO$NT_CRÉD_FECH$01
FOREIGN KEY (NOTA_CRÉDITO_REF) REFERENCES CXRJ.NOTA_CRÉDITO (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.NOTA_CRÉDITO_PAG ADD CONSTRAINT NOTA_CRÉDITO$NT_CRED_PAG$01
FOREIGN KEY (NOTA_CRÉDITO_REF) REFERENCES CXRJ.NOTA_CRÉDITO (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.NOTA_DÉBITO_FECH ADD CONSTRAINT NOTA_DÉBITO$NT_DEB_FECH$01
FOREIGN KEY (NOTA_DÉBITO_REF) REFERENCES CXRJ.NOTA_DÉBITO (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.NOTA_DÉBITO_RECEB ADD CONSTRAINT NOTA_DÉBITO$NT_DEB_RECEB$01
FOREIGN KEY (NOTA_DÉBITO_REF) REFERENCES CXRJ.NOTA_DÉBITO (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.CIA ADD CONSTRAINT PAÍS$CIA$01
FOREIGN KEY (PAÍS) REFERENCES CXRJ.PAÍS (COD);

ALTER TABLE CXRJ.NAVIO ADD CONSTRAINT PAÍS$NAVIO$01
FOREIGN KEY (BANDEIRA) REFERENCES CXRJ.PAÍS (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT PAÍS$PED$01
FOREIGN KEY (PAÍS_DESTINO) REFERENCES CXRJ.PAÍS (COD);

ALTER TABLE CXRJ.PORTO ADD CONSTRAINT PAÍS$PORTO$01
FOREIGN KEY (PAÍS) REFERENCES CXRJ.PAÍS (COD);

ALTER TABLE CXRJ.CONFIRM_VENDA ADD CONSTRAINT PED$CONF_VENDA$01
FOREIGN KEY (PED_REF) REFERENCES CXRJ.PED (REF);

ALTER TABLE CXRJ.EMB_F ADD CONSTRAINT PED$EMB_F$01
FOREIGN KEY (PED_REF) REFERENCES CXRJ.PED (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.PED_CONTATO ADD CONSTRAINT PED$PED_CONTAT$01
FOREIGN KEY (PED_REF) REFERENCES CXRJ.PED (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.PED_ITEM ADD CONSTRAINT PED$PED_ITEM$01
FOREIGN KEY (PED_REF) REFERENCES CXRJ.PED (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.PED_LANÇ ADD CONSTRAINT PED$PED_LANÇ$01
FOREIGN KEY (PED_REF) REFERENCES CXRJ.PED (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.PED_RESULT ADD CONSTRAINT PED$PED_RESULT$01
FOREIGN KEY (PED_REF) REFERENCES CXRJ.PED (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.BL_CARGA ADD CONSTRAINT PED_ITEM$BL_CARGA$01
FOREIGN KEY (PED_REF, PED_ITEM) REFERENCES CXRJ.PED_ITEM (PED_REF, ITEM);

ALTER TABLE CXRJ.FECH_CARGA ADD CONSTRAINT PED_ITEM$FECH_CARGA$01
FOREIGN KEY (PED_REF, PED_ITEM) REFERENCES CXRJ.PED_ITEM (PED_REF, ITEM) ON DELETE CASCADE;

ALTER TABLE CXRJ.DOC_PLIST_WEIG_CERT_DET ADD CONSTRAINT PLIST$PLIST_DET$01
FOREIGN KEY (DOC_SEQ) REFERENCES CXRJ.DOC_PLIST_WEIG_CERT (DOC) ON DELETE CASCADE;

ALTER TABLE CXRJ.FRETE ADD CONSTRAINT PORTO$FRETE$01
FOREIGN KEY (DESCARGA_PORTO) REFERENCES CXRJ.PORTO (COD);

ALTER TABLE CXRJ.MERCADO_PORTO ADD CONSTRAINT PORTO$MERCADO_PORTO$01
FOREIGN KEY (PORTO) REFERENCES CXRJ.PORTO (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT PORTO$PED$01
FOREIGN KEY (CARGA_PORTO) REFERENCES CXRJ.PORTO (COD);

ALTER TABLE CXRJ.PED_ITEM ADD CONSTRAINT PORTO$PED_ITEM$01
FOREIGN KEY (DESCARGA_PORTO) REFERENCES CXRJ.PORTO (COD);

ALTER TABLE CXRJ.VIAGEM_ESCALA ADD CONSTRAINT PORTO$VIAGEM_ESCALA$01
FOREIGN KEY (PORTO) REFERENCES CXRJ.PORTO (COD);

ALTER TABLE CXRJ.DIVISÃO_PRODUTO ADD CONSTRAINT PRODUTO$DIVISÃO_PROD$01
FOREIGN KEY (PROD) REFERENCES CXRJ.PRODUTO (COD);

ALTER TABLE CXRJ.MERCADO ADD CONSTRAINT PRODUTO$MERCADO$01
FOREIGN KEY (PROD) REFERENCES CXRJ.PRODUTO (COD);

ALTER TABLE CXRJ.PED_ITEM ADD CONSTRAINT PRODUTO$PED_ITEM$01
FOREIGN KEY (PROD) REFERENCES CXRJ.PRODUTO (COD);

ALTER TABLE CXRJ.PRODUTO_ESPECIF ADD CONSTRAINT PRODUTO$PROD_ESPECIF$01
FOREIGN KEY (COD) REFERENCES CXRJ.PRODUTO (COD) ON DELETE CASCADE;

ALTER TABLE CXRJ.PROG_CARGA ADD CONSTRAINT PROG$PROG_CARGA$01
FOREIGN KEY (FECH_REF, POSICIONAMENTO_DATA) REFERENCES CXRJ.PROG (FECH_REF, POSICIONAMENTO_DATA) ON DELETE CASCADE;

ALTER TABLE CXRJ.CIA_RAMO_ATIVIDADE ADD CONSTRAINT RAMO_ATIVIDAD$CIA_ATIVIDAD$01
FOREIGN KEY (RAMO_ATIVIDADE) REFERENCES CXRJ.RAMO_ATIVIDADE (COD) ON DELETE CASCADE;

ALTER TABLE CXRJ.DIVISÃO_TIPO_REF ADD CONSTRAINT TIPO_REF$DIVISÃO_T_REF$01
FOREIGN KEY (TIPO_REF) REFERENCES CXRJ.TIPO_REF (TIPO) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB ADD CONSTRAINT UNID_QUANTID$EMB$01
FOREIGN KEY (FRETE_UNID) REFERENCES CXRJ.UNID_QUANTID (COD);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT UNID_QUANTID$FECH$01
FOREIGN KEY (FRETE_UNID) REFERENCES CXRJ.UNID_QUANTID (COD);

ALTER TABLE CXRJ.FRETE ADD CONSTRAINT UNID_QUANTID$FRETE$01
FOREIGN KEY (FRETE_UNID) REFERENCES CXRJ.UNID_QUANTID (COD);

ALTER TABLE CXRJ.PED_ITEM ADD CONSTRAINT UNID_QUANTID$PED_ITEM$01
FOREIGN KEY (PED_UNID) REFERENCES CXRJ.UNID_QUANTID (COD);

ALTER TABLE CXRJ.PED ADD CONSTRAINT VIA_TRANSPORT$PED$01
FOREIGN KEY (VIA_TRANSPORTE) REFERENCES CXRJ.VIA_TRANSPORTE (COD);

ALTER TABLE CXRJ.BL ADD CONSTRAINT VIAGEM$BL$01
FOREIGN KEY (VIAGEM_REF) REFERENCES CXRJ.VIAGEM (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.EMB ADD CONSTRAINT VIAGEM$EMB$01
FOREIGN KEY (VIAGEM) REFERENCES CXRJ.VIAGEM (REF);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT VIAGEM$FECH$01
FOREIGN KEY (VIAGEM_REF) REFERENCES CXRJ.VIAGEM (REF);

ALTER TABLE CXRJ.VIAGEM_ESCALA ADD CONSTRAINT VIAGEM$VIAGEM_ESCALA$01
FOREIGN KEY (VIAGEM_REF) REFERENCES CXRJ.VIAGEM (REF) ON DELETE CASCADE;

ALTER TABLE CXRJ.FECH ADD CONSTRAINT VIAGEM_ESCALA$FECH$01
FOREIGN KEY (VIAGEM_REF, CARGA_PORTO_ESCALA) REFERENCES CXRJ.VIAGEM_ESCALA (VIAGEM_REF, ESCALA);

ALTER TABLE CXRJ.FECH ADD CONSTRAINT VIAGEM_ESCALA$FECH$02
FOREIGN KEY (VIAGEM_REF, DESCARGA_PORTO_ESCALA) REFERENCES CXRJ.VIAGEM_ESCALA (VIAGEM_REF, ESCALA);

CREATE OR REPLACE TRIGGER BEF_BL BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.BL FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'BL' AND CHAVE = :OLD.VIAGEM_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('BL', :OLD.VIAGEM_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'BL' AND CHAVE = :OLD.VIAGEM_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_BL_CARGA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.BL_CARGA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'BL_CARGA' AND CHAVE = :OLD.PED_REF || :OLD.PED_ITEM || :OLD.VIAGEM_REF || :OLD.BL_SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('BL_CARGA', :OLD.PED_REF || :OLD.PED_ITEM || :OLD.VIAGEM_REF || :OLD.BL_SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'BL_CARGA' AND CHAVE = :OLD.PED_REF || :OLD.PED_ITEM || :OLD.VIAGEM_REF || :OLD.BL_SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_BL_CONTINENTA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.BL_CONTINENTAL FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'BL_CONTINENTAL' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('BL_CONTINENTAL', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'BL_CONTINENTAL' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CARTA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.CARTA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CARTA' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('CARTA', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'CARTA' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CARTA_CRÉDITO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.CARTA_CRÉDITO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CARTA_CRÉDITO' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('CARTA_CRÉDITO', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'CARTA_CRÉDITO' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CARTA_FECH BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.CARTA_FECH FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CARTA_FECH' AND CHAVE = :OLD.CARTA_REF || :OLD.FECH_REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('CARTA_FECH', :OLD.CARTA_REF || :OLD.FECH_REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'CARTA_FECH' AND CHAVE = :OLD.CARTA_REF || :OLD.FECH_REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CIA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.CIA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
   CHAVE_STR VARCHAR2(32000);
   TOT_MAX INTEGER;
BEGIN
SELECT NVL(MAX(SEQ),0)+1 INTO TOT_MAX FROM SYS_CAD_LOG;
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CIA' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('CIA', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'CIA' AND CHAVE = :OLD.COD;
      END IF;
     INSERT INTO CXRJ.SYS_CAD_LOG (SEQ,NOME_TABELA,CHAVE,MOMENTO,USUÁRIO,LOCAL,AÇÃO)  VALUES (TOT_MAX,'CIA', :OLD.COD, SYSDATE, USER, 'CXRJ','DELETADO');
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
            INSERT INTO CXRJ.SYS_CAD_LOG(SEQ,NOME_TABELA,CHAVE,MOMENTO,USUÁRIO,LOCAL,AÇÃO) VALUES (TOT_MAX,'CIA', :NEW.COD, SYSDATE, USER, 'CXRJ','INSERIDO');
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
IF :OLD.COD!=:NEW.COD THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> COD: </font></b> '|| :OLD.COD ||' <font color=#FF0000>Para:</font> ' || :NEW.COD || '<br>'; ELSE CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> COD: </font></b> '|| :OLD.COD ||' <font color=#FF0000></font>'; END IF;
         IF :OLD.CGC!=:NEW.CGC THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> CGC: </font></b> '|| :OLD.CGC ||' <font color=#FF0000>Para:</font> ' || :NEW.CGC || '<br>'; END IF;IF :OLD.NOME!=:NEW.NOME THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> NOME: </font></b> '|| :OLD.NOME ||' <font color=#FF0000>Para:</font> ' || :NEW.NOME || '<br>'; END IF;IF :OLD.ENDEREÇO!=:NEW.ENDEREÇO THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> ENDEREÇO: </font></b> '|| :OLD.ENDEREÇO ||' <font color=#FF0000>Para:</font> ' || :NEW.ENDEREÇO || '<br>'; END IF;IF :OLD.BAIRRO!=:NEW.BAIRRO THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> BAIRRO: </font></b> '|| :OLD.BAIRRO ||' <font color=#FF0000>Para:</font> ' || :NEW.BAIRRO || '<br>'; END IF;IF :OLD.CIDADE!=:NEW.CIDADE THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> CIDADE: </font></b> '|| :OLD.CIDADE ||' <font color=#FF0000>Para:</font> ' || :NEW.CIDADE || '<br>'; END IF;IF :OLD.ESTADO!=:NEW.ESTADO THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> ESTADO: </font></b> '|| :OLD.ESTADO ||' <font color=#FF0000>Para:</font> ' || :NEW.ESTADO || '<br>'; END IF;IF :OLD.PAÍS!=:NEW.PAÍS THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> PAÍS: </font></b> '|| :OLD.PAÍS ||' <font color=#FF0000>Para:</font> ' || :NEW.PAÍS || '<br>'; END IF;IF :OLD.CEP!=:NEW.CEP THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> CEP: </font></b> '|| :OLD.CEP ||' <font 
         color=#FF0000>Para:</font> ' || :NEW.CEP || '<br>'; END IF;IF :OLD.CAIXA_POSTAL!=:NEW.CAIXA_POSTAL THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> CAIXA_POSTAL: </font></b> '|| :OLD.CAIXA_POSTAL ||' <font color=#FF0000>Para:</font> ' || :NEW.CAIXA_POSTAL || '<br>'; END IF;IF :OLD.TELEFONE!=:NEW.TELEFONE THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> TELEFONE: </font></b> '|| :OLD.TELEFONE ||' <font color=#FF0000>Para:</font> ' || :NEW.TELEFONE || '<br>'; END IF;IF :OLD.FAX!=:NEW.FAX THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> FAX: </font></b> '|| :OLD.FAX ||' <font color=#FF0000>Para:</font> ' || :NEW.FAX || '<br>'; END IF;IF :OLD.TELEX!=:NEW.TELEX THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> TELEX: </font></b> '|| :OLD.TELEX ||' <font color=#FF0000>Para:</font> ' || :NEW.TELEX || '<br>'; END IF;IF :OLD.E_MAIL!=:NEW.E_MAIL THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> E_MAIL: </font></b> '|| :OLD.E_MAIL ||' <font color=#FF0000>Para:</font> ' || :NEW.E_MAIL || '<br>'; END IF;IF :OLD.F_COD!=:NEW.F_COD THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> F_COD: </font></b> '|| :OLD.F_COD ||' <font color=#FF0000>Para:</font> ' || :NEW.F_COD || '<br>'; END IF;IF :OLD.MARCAÇÃO!=:NEW.MARCAÇÃO THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> MARCAÇÃO: </font></b> '|| :OLD.MARCAÇÃO ||' <font color=#FF0000>Para:</font> ' || :NEW.MARCAÇÃO || '<br>'; END IF;IF :OLD.OBS!=:NEW.OBS THEN 
         CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> OBS: </font></b> '|| :OLD.OBS ||' <font color=#FF0000>Para:</font> ' || :NEW.OBS || '<br>'; END IF;IF :OLD.LOCAL_RESULT!=:NEW.LOCAL_RESULT THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> LOCAL_RESULT: </font></b> '|| :OLD.LOCAL_RESULT ||' <font color=#FF0000>Para:</font> ' || :NEW.LOCAL_RESULT || '<br>'; END IF;
             INSERT INTO CXRJ.SYS_CAD_LOG(SEQ,NOME_TABELA,CHAVE,MOMENTO,USUÁRIO,LOCAL,AÇÃO) VALUES (TOT_MAX,'CIA', CHAVE_STR , SYSDATE, USER, 'CXRJ','ALTERADO');
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CIA_CONTATO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.CIA_CONTATO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
   CHAVE_STR VARCHAR2(32000);
   TOT_MAX INTEGER;
BEGIN
SELECT NVL(MAX(SEQ),0)+1 INTO TOT_MAX FROM SYS_CAD_LOG;
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CIA_CONTATO' AND CHAVE = :OLD.CIA_COD || :OLD.CONTATO_NOME;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('CIA_CONTATO', :OLD.CIA_COD || :OLD.CONTATO_NOME, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'CIA_CONTATO' AND CHAVE = :OLD.CIA_COD || :OLD.CONTATO_NOME;
      END IF;
     INSERT INTO CXRJ.SYS_CAD_LOG (SEQ,NOME_TABELA,CHAVE,MOMENTO,USUÁRIO,LOCAL,AÇÃO)  VALUES (TOT_MAX,'CIA_CONTATO', :OLD.CIA_COD || '  ' || :OLD.CONTATO_NOME, SYSDATE, USER, 'CXRJ','DELETADO');
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
            INSERT INTO CXRJ.SYS_CAD_LOG(SEQ,NOME_TABELA,CHAVE,MOMENTO,USUÁRIO,LOCAL,AÇÃO) VALUES (TOT_MAX,'CIA_CONTATO', :NEW.CIA_COD || ' ** ' || :NEW.CONTATO_NOME, SYSDATE, USER, 'CXRJ','INSERIDO');
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
IF :OLD.CIA_COD!=:NEW.CIA_COD THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> CIA_COD: </font></b> '|| :OLD.CIA_COD ||' <font color=#FF0000>Para:</font> ' || :NEW.CIA_COD || '<br>'; ELSE CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> CIA_COD: </font></b> '|| :OLD.CIA_COD ||' <font color=#FF0000></font>'; END IF;
IF :OLD.CONTATO_NOME!=:NEW.CONTATO_NOME THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> CONTATO_NOME: </font></b> '|| :OLD.CONTATO_NOME ||' <font color=#FF0000>Para:</font> ' || :NEW.CONTATO_NOME || '<br>'; ELSE CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> CONTATO_NOME: </font></b> '|| :OLD.CONTATO_NOME ||' <font color=#FF0000></font>'; END IF;
         IF :OLD.TELEFONE!=:NEW.TELEFONE THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> TELEFONE: </font></b> '|| :OLD.TELEFONE ||' <font color=#FF0000>Para:</font> ' || :NEW.TELEFONE || '<br>'; END IF;IF :OLD.FUNÇÃO!=:NEW.FUNÇÃO THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> FUNÇÃO: </font></b> '|| :OLD.FUNÇÃO ||' <font color=#FF0000>Para:</font> ' || :NEW.FUNÇÃO || '<br>'; END IF;
             INSERT INTO CXRJ.SYS_CAD_LOG(SEQ,NOME_TABELA,CHAVE,MOMENTO,USUÁRIO,LOCAL,AÇÃO) VALUES (TOT_MAX,'CIA_CONTATO', CHAVE_STR , SYSDATE, USER, 'CXRJ','ALTERADO');
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CIA_ATIVIDAD BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.CIA_RAMO_ATIVIDADE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
   CHAVE_STR VARCHAR2(32000);
   TOT_MAX INTEGER;
BEGIN
SELECT NVL(MAX(SEQ),0)+1 INTO TOT_MAX FROM SYS_CAD_LOG;
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CIA_RAMO_ATIVIDADE' AND CHAVE = :OLD.CIA_COD || :OLD.RAMO_ATIVIDADE;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('CIA_RAMO_ATIVIDADE', :OLD.CIA_COD || :OLD.RAMO_ATIVIDADE, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'CIA_RAMO_ATIVIDADE' AND CHAVE = :OLD.CIA_COD || :OLD.RAMO_ATIVIDADE;
      END IF;
     INSERT INTO CXRJ.SYS_CAD_LOG (SEQ,NOME_TABELA,CHAVE,MOMENTO,USUÁRIO,LOCAL,AÇÃO)  VALUES (TOT_MAX,'CIA_RAMO_ATIVIDADE', :OLD.CIA_COD || '  ' || :OLD.RAMO_ATIVIDADE, SYSDATE, USER, 'CXRJ','DELETADO');
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
            INSERT INTO CXRJ.SYS_CAD_LOG(SEQ,NOME_TABELA,CHAVE,MOMENTO,USUÁRIO,LOCAL,AÇÃO) VALUES (TOT_MAX,'CIA_RAMO_ATIVIDADE', :NEW.CIA_COD || ' ** ' || :NEW.RAMO_ATIVIDADE, SYSDATE, USER, 'CXRJ','INSERIDO');
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
IF :OLD.CIA_COD!=:NEW.CIA_COD THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> CIA_COD: </font></b> '|| :OLD.CIA_COD ||' <font color=#FF0000>Para:</font> ' || :NEW.CIA_COD || '<br>'; ELSE CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> CIA_COD: </font></b> '|| :OLD.CIA_COD ||' <font color=#FF0000></font>'; END IF;
IF :OLD.RAMO_ATIVIDADE!=:NEW.RAMO_ATIVIDADE THEN CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> RAMO_ATIVIDADE: </font></b> '|| :OLD.RAMO_ATIVIDADE ||' <font color=#FF0000>Para:</font> ' || :NEW.RAMO_ATIVIDADE || '<br>'; ELSE CHAVE_STR := CHAVE_STR ||'<b><font color=#FF0000> RAMO_ATIVIDADE: </font></b> '|| :OLD.RAMO_ATIVIDADE ||' <font color=#FF0000></font>'; END IF;

             INSERT INTO CXRJ.SYS_CAD_LOG(SEQ,NOME_TABELA,CHAVE,MOMENTO,USUÁRIO,LOCAL,AÇÃO) VALUES (TOT_MAX,'CIA_RAMO_ATIVIDADE', CHAVE_STR , SYSDATE, USER, 'CXRJ','ALTERADO');
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_COND_PAG BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.COND_PAG FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'COND_PAG' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('COND_PAG', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'COND_PAG' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CONF_VENDA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.CONFIRM_VENDA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CONFIRM_VENDA' AND CHAVE = :OLD.REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('CONFIRM_VENDA', :OLD.REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'CONFIRM_VENDA' AND CHAVE = :OLD.REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CONF_VENDA_IT BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.CONFIRM_VENDA_ITEM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CONFIRM_VENDA_ITEM' AND CHAVE = :OLD.CONFIRM_VENDA_REF || :OLD.SEQ || :OLD.ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('CONFIRM_VENDA_ITEM', :OLD.CONFIRM_VENDA_REF || :OLD.SEQ || :OLD.ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'CONFIRM_VENDA_ITEM' AND CHAVE = :OLD.CONFIRM_VENDA_REF || :OLD.SEQ || :OLD.ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CONTA_CORRENT BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.CONTA_CORRENTE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'CONTA_CORRENTE' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('CONTA_CORRENTE', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'CONTA_CORRENTE' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_COSIP_FL_1 BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.COSIPA_FOLHA_1 FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'COSIPA_FOLHA_1' AND CHAVE = :OLD.ORD_REF || :OLD.ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('COSIPA_FOLHA_1', :OLD.ORD_REF || :OLD.ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'COSIPA_FOLHA_1' AND CHAVE = :OLD.ORD_REF || :OLD.ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_COSIP_FL_2 BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.COSIPA_FOLHA_2 FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'COSIPA_FOLHA_2' AND CHAVE = :OLD.ORD_REF || :OLD.FOLHA || :OLD.ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('COSIPA_FOLHA_2', :OLD.ORD_REF || :OLD.FOLHA || :OLD.ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'COSIPA_FOLHA_2' AND CHAVE = :OLD.ORD_REF || :OLD.FOLHA || :OLD.ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_COSIP_FL_2_PG BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.COSIPA_FOLHA_2_PAG FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'COSIPA_FOLHA_2_PAG' AND CHAVE = :OLD.ORD_REF || :OLD.FOLHA;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('COSIPA_FOLHA_2_PAG', :OLD.ORD_REF || :OLD.FOLHA, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'COSIPA_FOLHA_2_PAG' AND CHAVE = :OLD.ORD_REF || :OLD.FOLHA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_COSIP_NEG BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.COSIPA_NEGOCIAÇÃO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'COSIPA_NEGOCIAÇÃO' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('COSIPA_NEGOCIAÇÃO', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'COSIPA_NEGOCIAÇÃO' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DEPTO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DEPTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DEPTO' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DEPTO', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DEPTO' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DIVISÃO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DIVISÃO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DIVISÃO' AND CHAVE = :OLD.ESCRITÓRIO || :OLD.DIVISÃO;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DIVISÃO', :OLD.ESCRITÓRIO || :OLD.DIVISÃO, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DIVISÃO' AND CHAVE = :OLD.ESCRITÓRIO || :OLD.DIVISÃO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DIVISÃO_PROD BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DIVISÃO_PRODUTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DIVISÃO_PRODUTO' AND CHAVE = :OLD.ESCRITÓRIO || :OLD.DIVISÃO || :OLD.PROD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DIVISÃO_PRODUTO', :OLD.ESCRITÓRIO || :OLD.DIVISÃO || :OLD.PROD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DIVISÃO_PRODUTO' AND CHAVE = :OLD.ESCRITÓRIO || :OLD.DIVISÃO || :OLD.PROD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DIVISÃO_T_REF BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DIVISÃO_TIPO_REF FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DIVISÃO_TIPO_REF' AND CHAVE = :OLD.ESCRITÓRIO || :OLD.DIVISÃO || :OLD.TIPO_REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DIVISÃO_TIPO_REF', :OLD.ESCRITÓRIO || :OLD.DIVISÃO || :OLD.TIPO_REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DIVISÃO_TIPO_REF' AND CHAVE = :OLD.ESCRITÓRIO || :OLD.DIVISÃO || :OLD.TIPO_REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ACOR_COMP BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_ACORDO_COMPLEM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_ACORDO_COMPLEM' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_ACORDO_COMPLEM', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_ACORDO_COMPLEM' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ACOR_COMP_DET BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_ACORDO_COMPLEM_DET FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_ACORDO_COMPLEM_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_ACORDO_COMPLEM_DET', :OLD.DOC_SEQ || :OLD.SEQ_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_ACORDO_COMPLEM_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ALADI BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_ALADI FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_ALADI' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_ALADI', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_ALADI' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ALADI_DET BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_ALADI_DET FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_ALADI_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_ALADI_DET', :OLD.DOC_SEQ || :OLD.SEQ_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_ALADI_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ALADI_NOR BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_ALADI_NORMA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_ALADI_NORMA' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_NORMA;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_ALADI_NORMA', :OLD.DOC_SEQ || :OLD.SEQ_NORMA, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_ALADI_NORMA' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_NORMA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_BORDERÔ_I BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_BORDERÔ_I FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_BORDERÔ_I' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_BORDERÔ_I', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_BORDERÔ_I' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_BORDERÔ_P BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_BORDERÔ_P FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_BORDERÔ_P' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_BORDERÔ_P', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_BORDERÔ_P' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CAMAR_COM BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_CÂMARA_COMÉRCIO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_CÂMARA_COMÉRCIO' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_CÂMARA_COMÉRCIO', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_CÂMARA_COMÉRCIO' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CAMAR_COM_DET BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_CÂMARA_COMÉRCIO_DET FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_CÂMARA_COMÉRCIO_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_CÂMARA_COMÉRCIO_DET', :OLD.DOC_SEQ || :OLD.SEQ_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_CÂMARA_COMÉRCIO_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CARTA_DOC_I BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_CARTA_I FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_CARTA_I' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_CARTA_I', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_CARTA_I' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CARTA_DOC_P BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_CARTA_P FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_CARTA_P' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_CARTA_P', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_CARTA_P' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CONH_ROD BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_CONHECIMENT_ROD FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_CONHECIMENT_ROD' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_CONHECIMENT_ROD', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_CONHECIMENT_ROD' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_CONH_ROD_DET BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_CONHECIMENT_ROD_DET FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_CONHECIMENT_ROD_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_CONHECIMENT_ROD_DET', :OLD.DOC_SEQ || :OLD.SEQ_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_CONHECIMENT_ROD_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FATURA_DOC BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_FATURA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_FATURA' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_FATURA', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_FATURA' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FATURA_DET BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_FATURA_DET FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_FATURA_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_FATURA_DET', :OLD.DOC_SEQ || :OLD.SEQ_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_FATURA_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FATURA_JUROS BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_FATURA_JUROS FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_FATURA_JUROS' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_FATURA_JUROS', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_FATURA_JUROS' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FATURA_TOT BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_FATURA_TOT FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_FATURA_TOT' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_LANC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_FATURA_TOT', :OLD.DOC_SEQ || :OLD.SEQ_LANC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_FATURA_TOT' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_LANC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FECH_CAMB BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_FECHAMENTO_CÂMB FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_FECHAMENTO_CÂMB' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_FECHAMENTO_CÂMB', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_FECHAMENTO_CÂMB' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FECH_CAMB_TOT BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_FECHAMENTO_CÂMB_TOT FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_FECHAMENTO_CÂMB_TOT' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_LANC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_FECHAMENTO_CÂMB_TOT', :OLD.DOC_SEQ || :OLD.SEQ_LANC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_FECHAMENTO_CÂMB_TOT' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_LANC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FIRJAN BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_FIRJAN FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_FIRJAN' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_FIRJAN', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_FIRJAN' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FIRJAN_DET BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_FIRJAN_DET FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_FIRJAN_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_FIRJAN_DET', :OLD.DOC_SEQ || :OLD.SEQ_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_FIRJAN_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_MERCOSUL BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_MERCOSUL FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_MERCOSUL' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_MERCOSUL', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_MERCOSUL' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_MERC_BOL BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_MERCOSUL_BOLIV FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_MERCOSUL_BOLIV' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_MERCOSUL_BOLIV', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_MERCOSUL_BOLIV' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_MERC_BOL_DET BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_MERCOSUL_BOLIV_DET FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_MERCOSUL_BOLIV_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_MERCOSUL_BOLIV_DET', :OLD.DOC_SEQ || :OLD.SEQ_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_MERCOSUL_BOLIV_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_MERC_BOL_NOR BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_MERCOSUL_BOLIV_NORMA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_MERCOSUL_BOLIV_NORMA' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_NORMA;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_MERCOSUL_BOLIV_NORMA', :OLD.DOC_SEQ || :OLD.SEQ_NORMA, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_MERCOSUL_BOLIV_NORMA' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_NORMA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_MERC_CHI BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_MERCOSUL_CHILE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_MERCOSUL_CHILE' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_MERCOSUL_CHILE', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_MERCOSUL_CHILE' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_MERC_CHI_DET BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_MERCOSUL_CHILE_DET FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_MERCOSUL_CHILE_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_MERCOSUL_CHILE_DET', :OLD.DOC_SEQ || :OLD.SEQ_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_MERCOSUL_CHILE_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_MERC_CHI_NOR BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_MERCOSUL_CHILE_NORMA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_MERCOSUL_CHILE_NORMA' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_NORMA;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_MERCOSUL_CHILE_NORMA', :OLD.DOC_SEQ || :OLD.SEQ_NORMA, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_MERCOSUL_CHILE_NORMA' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_NORMA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_MERCOSUL_DET BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_MERCOSUL_DET FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_MERCOSUL_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_MERCOSUL_DET', :OLD.DOC_SEQ || :OLD.SEQ_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_MERCOSUL_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_MERCOSUL_NOR BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_MERCOSUL_NORMA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_MERCOSUL_NORMA' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_NORMA;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_MERCOSUL_NORMA', :OLD.DOC_SEQ || :OLD.SEQ_NORMA, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_MERCOSUL_NORMA' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_NORMA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PLIST BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_PLIST_WEIG_CERT FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_PLIST_WEIG_CERT' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_PLIST_WEIG_CERT', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_PLIST_WEIG_CERT' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PLIST_DET BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_PLIST_WEIG_CERT_DET FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_PLIST_WEIG_CERT_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_PLIST_WEIG_CERT_DET', :OLD.DOC_SEQ || :OLD.SEQ_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_PLIST_WEIG_CERT_DET' AND CHAVE = :OLD.DOC_SEQ || :OLD.SEQ_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_SAQUE_2V BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_SAQUE_2V FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_SAQUE_2V' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_SAQUE_2V', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_SAQUE_2V' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_SAQUE_3V BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_SAQUE_3V FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_SAQUE_3V' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_SAQUE_3V', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_SAQUE_3V' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_JUROS_2V BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_SAQUE_JUROS_2V FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_SAQUE_JUROS_2V' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_SAQUE_JUROS_2V', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_SAQUE_JUROS_2V' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_JUROS_3V BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_SAQUE_JUROS_3V FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_SAQUE_JUROS_3V' AND CHAVE = :OLD.DOC;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_SAQUE_JUROS_3V', :OLD.DOC, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_SAQUE_JUROS_3V' AND CHAVE = :OLD.DOC;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_DOC_TEMPL BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.DOC_TEMPLATE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'DOC_TEMPLATE' AND CHAVE = :OLD.NOME_TABELA || :OLD.CAMPO;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('DOC_TEMPLATE', :OLD.NOME_TABELA || :OLD.CAMPO, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'DOC_TEMPLATE' AND CHAVE = :OLD.NOME_TABELA || :OLD.CAMPO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_CHK_LST BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_CHECK_LIST FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_CHECK_LIST' AND CHAVE = :OLD.EMB_REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_CHECK_LIST', :OLD.EMB_REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_CHECK_LIST' AND CHAVE = :OLD.EMB_REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_DOC BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_DOC FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_DOC' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_DOC', :OLD.EMB_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_DOC' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_DOC_DEST BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_DOC_DESTINO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_DOC_DESTINO' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ || :OLD.CIA;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_DOC_DESTINO', :OLD.EMB_REF || :OLD.SEQ || :OLD.CIA, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_DOC_DESTINO' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ || :OLD.CIA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_DOC_REL BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_DOC_REL FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_DOC_REL' AND CHAVE = :OLD.EMB_REF || :OLD.DOC || :OLD.EMB_REL;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_DOC_REL', :OLD.EMB_REF || :OLD.DOC || :OLD.EMB_REL, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_DOC_REL' AND CHAVE = :OLD.EMB_REF || :OLD.DOC || :OLD.EMB_REL;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_F BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_F FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_F' AND CHAVE = :OLD.PED_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_F', :OLD.PED_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_F' AND CHAVE = :OLD.PED_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_FAMÍLIA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_FAMÍLIA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_FAMÍLIA' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_FAMÍLIA', :OLD.EMB_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_FAMÍLIA' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_FAM_GENER BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_FAMÍLIA_GENÉRICA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_FAMÍLIA_GENÉRICA' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_FAMÍLIA_GENÉRICA', :OLD.EMB_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_FAMÍLIA_GENÉRICA' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_FILTRO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_FILTRO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_FILTRO' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_FILTRO', :OLD.EMB_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_FILTRO' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_ITEM_TEMP BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_ITEM_TEMP FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_ITEM_TEMP' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_ITEM_TEMP', :OLD.EMB_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_ITEM_TEMP' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_LANÇ BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_LANÇ FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_LANÇ' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_LANÇ', :OLD.EMB_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_LANÇ' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_MENSAGEM BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_MENSAGEM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_MENSAGEM' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_MENSAGEM', :OLD.EMB_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_MENSAGEM' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_RE BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_RE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_RE' AND CHAVE = :OLD.EMB_REF || :OLD.RE;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_RE', :OLD.EMB_REF || :OLD.RE, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_RE' AND CHAVE = :OLD.EMB_REF || :OLD.RE;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_SD BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_SD FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_SD' AND CHAVE = :OLD.EMB_REF || :OLD.SD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_SD', :OLD.EMB_REF || :OLD.SD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_SD' AND CHAVE = :OLD.EMB_REF || :OLD.SD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMB_TOTALIZA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMB_TOTALIZA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMB_TOTALIZA' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMB_TOTALIZA', :OLD.EMB_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMB_TOTALIZA' AND CHAVE = :OLD.EMB_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_EMBALAGEM BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.EMBALAGEM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'EMBALAGEM' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('EMBALAGEM', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'EMBALAGEM' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ESCRITÓRIO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.ESCRITÓRIO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'ESCRITÓRIO' AND CHAVE = :OLD.ESCRITÓRIO;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('ESCRITÓRIO', :OLD.ESCRITÓRIO, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'ESCRITÓRIO' AND CHAVE = :OLD.ESCRITÓRIO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_ETIQ_MALA_DIR BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.ETIQ_MALA_DIRETA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'ETIQ_MALA_DIRETA' AND CHAVE = :OLD.USUÁRIO || :OLD.CRIAÇÃO_DATA || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('ETIQ_MALA_DIRETA', :OLD.USUÁRIO || :OLD.CRIAÇÃO_DATA || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'ETIQ_MALA_DIRETA' AND CHAVE = :OLD.USUÁRIO || :OLD.CRIAÇÃO_DATA || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FATURA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FATURA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FATURA' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FATURA', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FATURA' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FATURA_CONFIRM BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FATURA_CONFIRM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FATURA_CONFIRM' AND CHAVE = :OLD.REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FATURA_CONFIRM', :OLD.REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FATURA_CONFIRM' AND CHAVE = :OLD.REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FATURA_CONFIRM_ITEM BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FATURA_CONFIRM_ITEM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FATURA_CONFIRM_ITEM' AND CHAVE = :OLD.CONFIRM_VENDA_REF || :OLD.SEQ || :OLD.ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FATURA_CONFIRM_ITEM', :OLD.CONFIRM_VENDA_REF || :OLD.SEQ || :OLD.ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FATURA_CONFIRM_ITEM' AND CHAVE = :OLD.CONFIRM_VENDA_REF || :OLD.SEQ || :OLD.ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FAX BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FAX FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FAX' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FAX', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FAX' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FAX_CHAVE BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FAX_CHAVE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FAX_CHAVE' AND CHAVE = :OLD.FAX_REF || :OLD.CHAVE;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FAX_CHAVE', :OLD.FAX_REF || :OLD.CHAVE, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FAX_CHAVE' AND CHAVE = :OLD.FAX_REF || :OLD.CHAVE;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FAX_DESTINO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FAX_DESTINO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FAX_DESTINO' AND CHAVE = :OLD.FAX_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FAX_DESTINO', :OLD.FAX_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FAX_DESTINO' AND CHAVE = :OLD.FAX_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FECH BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FECH FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FECH' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FECH', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FECH' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FECH_CARGA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FECH_CARGA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FECH_CARGA' AND CHAVE = :OLD.FECH_REF || :OLD.PED_REF || :OLD.PED_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FECH_CARGA', :OLD.FECH_REF || :OLD.PED_REF || :OLD.PED_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FECH_CARGA' AND CHAVE = :OLD.FECH_REF || :OLD.PED_REF || :OLD.PED_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FECH_CONTATO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FECH_CONTATO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FECH_CONTATO' AND CHAVE = :OLD.FECH_REF || :OLD.CIA_COD || :OLD.CONTATO_NOME;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FECH_CONTATO', :OLD.FECH_REF || :OLD.CIA_COD || :OLD.CONTATO_NOME, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FECH_CONTATO' AND CHAVE = :OLD.FECH_REF || :OLD.CIA_COD || :OLD.CONTATO_NOME;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FECH_SUBSTUÍD BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FECH_SUBSTITUÍDO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FECH_SUBSTITUÍDO' AND CHAVE = :OLD.SUBSTITUÍDO || :OLD.SUBSTITUTO;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FECH_SUBSTITUÍDO', :OLD.SUBSTITUÍDO || :OLD.SUBSTITUTO, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FECH_SUBSTITUÍDO' AND CHAVE = :OLD.SUBSTITUÍDO || :OLD.SUBSTITUTO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_FRETE BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.FRETE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'FRETE' AND CHAVE = :OLD.CARGA_PORTO || :OLD.DESCARGA_PORTO || :OLD.PROPRIETÁRIO || :OLD.FRETE_DETALHE;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('FRETE', :OLD.CARGA_PORTO || :OLD.DESCARGA_PORTO || :OLD.PROPRIETÁRIO || :OLD.FRETE_DETALHE, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'FRETE' AND CHAVE = :OLD.CARGA_PORTO || :OLD.DESCARGA_PORTO || :OLD.PROPRIETÁRIO || :OLD.FRETE_DETALHE;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_GRUPO_PROD BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.GRUPO_PRODUTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'GRUPO_PRODUTO' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('GRUPO_PRODUTO', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'GRUPO_PRODUTO' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_IDIOMA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.IDIOMA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'IDIOMA' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('IDIOMA', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'IDIOMA' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_INCOTERM BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.INCOTERM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'INCOTERM' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('INCOTERM', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'INCOTERM' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_INCOTERM_LNÇ BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.INCOTERM_LANÇ FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'INCOTERM_LANÇ' AND CHAVE = :OLD.INCOTERM || :OLD.LANÇ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('INCOTERM_LANÇ', :OLD.INCOTERM || :OLD.LANÇ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'INCOTERM_LANÇ' AND CHAVE = :OLD.INCOTERM || :OLD.LANÇ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_INSTRUÇÃO_PAG BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.INSTRUÇÃO_PAG FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'INSTRUÇÃO_PAG' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('INSTRUÇÃO_PAG', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'INSTRUÇÃO_PAG' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_INSTR_PG_FECH BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.INSTRUÇÃO_PAG_FECH FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'INSTRUÇÃO_PAG_FECH' AND CHAVE = :OLD.INSTRUÇÃO_PAG_REF || :OLD.FECH_REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('INSTRUÇÃO_PAG_FECH', :OLD.INSTRUÇÃO_PAG_REF || :OLD.FECH_REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'INSTRUÇÃO_PAG_FECH' AND CHAVE = :OLD.INSTRUÇÃO_PAG_REF || :OLD.FECH_REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_LANÇ BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.LANÇ FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'LANÇ' AND CHAVE = :OLD.LANÇ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('LANÇ', :OLD.LANÇ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'LANÇ' AND CHAVE = :OLD.LANÇ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_LOCAL_RESULT BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.LOCAL_RESULT FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'LOCAL_RESULT' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('LOCAL_RESULT', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'LOCAL_RESULT' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_MERCADO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.MERCADO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'MERCADO' AND CHAVE = :OLD.ANO_MÊS || :OLD.CONTRATANTE || :OLD.FORNECEDOR || :OLD.TRANSPORTADOR || :OLD.PROD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('MERCADO', :OLD.ANO_MÊS || :OLD.CONTRATANTE || :OLD.FORNECEDOR || :OLD.TRANSPORTADOR || :OLD.PROD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'MERCADO' AND CHAVE = :OLD.ANO_MÊS || :OLD.CONTRATANTE || :OLD.FORNECEDOR || :OLD.TRANSPORTADOR || :OLD.PROD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_MERCADO_PORTO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.MERCADO_PORTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'MERCADO_PORTO' AND CHAVE = :OLD.ANO_MÊS || :OLD.CONTRATANTE || :OLD.FORNECEDOR || :OLD.TRANSPORTADOR || :OLD.PROD || :OLD.QTD || :OLD.PORTO;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('MERCADO_PORTO', :OLD.ANO_MÊS || :OLD.CONTRATANTE || :OLD.FORNECEDOR || :OLD.TRANSPORTADOR || :OLD.PROD || :OLD.QTD || :OLD.PORTO, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'MERCADO_PORTO' AND CHAVE = :OLD.ANO_MÊS || :OLD.CONTRATANTE || :OLD.FORNECEDOR || :OLD.TRANSPORTADOR || :OLD.PROD || :OLD.QTD || :OLD.PORTO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_MOD_FRETE BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.MODALIDADE_FRETE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'MODALIDADE_FRETE' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('MODALIDADE_FRETE', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'MODALIDADE_FRETE' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_MOEDA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.MOEDA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'MOEDA' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('MOEDA', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'MOEDA' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_NAVIO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.NAVIO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'NAVIO' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('NAVIO', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'NAVIO' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_NOTA_CRÉDITO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.NOTA_CRÉDITO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'NOTA_CRÉDITO' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('NOTA_CRÉDITO', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'NOTA_CRÉDITO' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_NT_CRÉD_FECH BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.NOTA_CRÉDITO_FECH FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'NOTA_CRÉDITO_FECH' AND CHAVE = :OLD.NOTA_CRÉDITO_REF || :OLD.FECH_REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('NOTA_CRÉDITO_FECH', :OLD.NOTA_CRÉDITO_REF || :OLD.FECH_REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'NOTA_CRÉDITO_FECH' AND CHAVE = :OLD.NOTA_CRÉDITO_REF || :OLD.FECH_REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_NT_CRED_PAG BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.NOTA_CRÉDITO_PAG FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'NOTA_CRÉDITO_PAG' AND CHAVE = :OLD.NOTA_CRÉDITO_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('NOTA_CRÉDITO_PAG', :OLD.NOTA_CRÉDITO_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'NOTA_CRÉDITO_PAG' AND CHAVE = :OLD.NOTA_CRÉDITO_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_NOTA_DÉBITO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.NOTA_DÉBITO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'NOTA_DÉBITO' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('NOTA_DÉBITO', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'NOTA_DÉBITO' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_NT_DEB_FECH BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.NOTA_DÉBITO_FECH FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'NOTA_DÉBITO_FECH' AND CHAVE = :OLD.NOTA_DÉBITO_REF || :OLD.FECH_REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('NOTA_DÉBITO_FECH', :OLD.NOTA_DÉBITO_REF || :OLD.FECH_REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'NOTA_DÉBITO_FECH' AND CHAVE = :OLD.NOTA_DÉBITO_REF || :OLD.FECH_REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_NT_DEB_RECEB BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.NOTA_DÉBITO_RECEB FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'NOTA_DÉBITO_RECEB' AND CHAVE = :OLD.NOTA_DÉBITO_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('NOTA_DÉBITO_RECEB', :OLD.NOTA_DÉBITO_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'NOTA_DÉBITO_RECEB' AND CHAVE = :OLD.NOTA_DÉBITO_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PAÍS BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PAÍS FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PAÍS' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PAÍS', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PAÍS' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PARAM BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PARAM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PARAM' AND CHAVE = :OLD.GRUPO || :OLD.PARAM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PARAM', :OLD.GRUPO || :OLD.PARAM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PARAM' AND CHAVE = :OLD.GRUPO || :OLD.PARAM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PED BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PED FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PED' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PED', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PED' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PED_CONTAT BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PED_CONTATO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PED_CONTATO' AND CHAVE = :OLD.PED_REF || :OLD.CIA_COD || :OLD.CONTATO_NOME;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PED_CONTATO', :OLD.PED_REF || :OLD.CIA_COD || :OLD.CONTATO_NOME, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PED_CONTATO' AND CHAVE = :OLD.PED_REF || :OLD.CIA_COD || :OLD.CONTATO_NOME;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PED_ITEM BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PED_ITEM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PED_ITEM' AND CHAVE = :OLD.PED_REF || :OLD.ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PED_ITEM', :OLD.PED_REF || :OLD.ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PED_ITEM' AND CHAVE = :OLD.PED_REF || :OLD.ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PED_LANÇ BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PED_LANÇ FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PED_LANÇ' AND CHAVE = :OLD.PED_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PED_LANÇ', :OLD.PED_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PED_LANÇ' AND CHAVE = :OLD.PED_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PED_RESULT BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PED_RESULT FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PED_RESULT' AND CHAVE = :OLD.PED_REF || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PED_RESULT', :OLD.PED_REF || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PED_RESULT' AND CHAVE = :OLD.PED_REF || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PORTO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PORTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PORTO' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PORTO', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PORTO' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PRODUTO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PRODUTO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PRODUTO' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PRODUTO', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PRODUTO' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PROD_ESPECIF BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PRODUTO_ESPECIF FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PRODUTO_ESPECIF' AND CHAVE = :OLD.COD || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PRODUTO_ESPECIF', :OLD.COD || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PRODUTO_ESPECIF' AND CHAVE = :OLD.COD || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PROG BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PROG FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PROG' AND CHAVE = :OLD.FECH_REF || :OLD.POSICIONAMENTO_DATA;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PROG', :OLD.FECH_REF || :OLD.POSICIONAMENTO_DATA, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PROG' AND CHAVE = :OLD.FECH_REF || :OLD.POSICIONAMENTO_DATA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_PROG_CARGA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.PROG_CARGA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'PROG_CARGA' AND CHAVE = :OLD.FECH_REF || :OLD.POSICIONAMENTO_DATA || :OLD.PED_REF || :OLD.PED_ITEM;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('PROG_CARGA', :OLD.FECH_REF || :OLD.POSICIONAMENTO_DATA || :OLD.PED_REF || :OLD.PED_ITEM, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'PROG_CARGA' AND CHAVE = :OLD.FECH_REF || :OLD.POSICIONAMENTO_DATA || :OLD.PED_REF || :OLD.PED_ITEM;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_RAMO_ATIVIDAD BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.RAMO_ATIVIDADE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'RAMO_ATIVIDADE' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('RAMO_ATIVIDADE', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'RAMO_ATIVIDADE' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_REF BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.REF FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'REF' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('REF', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'REF' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_REL_CSC_PAÍS_FORN_EMBARQUE BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.REL_CSC_PAÍS_FORN_EMBARQUE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'REL_CSC_PAÍS_FORN_EMBARQUE' AND CHAVE = :OLD.CHAVE || :OLD.ORDEM || :OLD.ESCRIT || :OLD.DIV;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('REL_CSC_PAÍS_FORN_EMBARQUE', :OLD.CHAVE || :OLD.ORDEM || :OLD.ESCRIT || :OLD.DIV, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'REL_CSC_PAÍS_FORN_EMBARQUE' AND CHAVE = :OLD.CHAVE || :OLD.ORDEM || :OLD.ESCRIT || :OLD.DIV;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_REL_CSC_PAÍS_FORN_PEDIDO BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.REL_CSC_PAÍS_FORN_PEDIDO FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'REL_CSC_PAÍS_FORN_PEDIDO' AND CHAVE = :OLD.CHAVE || :OLD.ORDEM || :OLD.ESCRIT || :OLD.DIV;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('REL_CSC_PAÍS_FORN_PEDIDO', :OLD.CHAVE || :OLD.ORDEM || :OLD.ESCRIT || :OLD.DIV, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'REL_CSC_PAÍS_FORN_PEDIDO' AND CHAVE = :OLD.CHAVE || :OLD.ORDEM || :OLD.ESCRIT || :OLD.DIV;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_REL_CSC_PAÍS_FORN_RESULT BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.REL_CSC_PAÍS_FORN_RESULT FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'REL_CSC_PAÍS_FORN_RESULT' AND CHAVE = :OLD.CHAVE || :OLD.ORDEM || :OLD.ESCRIT || :OLD.DIV;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('REL_CSC_PAÍS_FORN_RESULT', :OLD.CHAVE || :OLD.ORDEM || :OLD.ESCRIT || :OLD.DIV, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'REL_CSC_PAÍS_FORN_RESULT' AND CHAVE = :OLD.CHAVE || :OLD.ORDEM || :OLD.ESCRIT || :OLD.DIV;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_RESULT BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.RESULT FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'RESULT' AND CHAVE = :OLD.PED_REF || :OLD.EMB_SEQ || :OLD.SEQ;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('RESULT', :OLD.PED_REF || :OLD.EMB_SEQ || :OLD.SEQ, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'RESULT' AND CHAVE = :OLD.PED_REF || :OLD.EMB_SEQ || :OLD.SEQ;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_TIPO_REF BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.TIPO_REF FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'TIPO_REF' AND CHAVE = :OLD.TIPO;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('TIPO_REF', :OLD.TIPO, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'TIPO_REF' AND CHAVE = :OLD.TIPO;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_UNID_QUANTID BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.UNID_QUANTID FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'UNID_QUANTID' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('UNID_QUANTID', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'UNID_QUANTID' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_VIA_TRANSPORT BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.VIA_TRANSPORTE FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'VIA_TRANSPORTE' AND CHAVE = :OLD.COD;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('VIA_TRANSPORTE', :OLD.COD, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'VIA_TRANSPORTE' AND CHAVE = :OLD.COD;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_VIAGEM BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.VIAGEM FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'VIAGEM' AND CHAVE = :OLD.REF;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('VIAGEM', :OLD.REF, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'VIAGEM' AND CHAVE = :OLD.REF;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/

CREATE OR REPLACE TRIGGER BEF_VIAGEM_ESCALA BEFORE UPDATE OR INSERT OR DELETE ON CXRJ.VIAGEM_ESCALA FOR EACH ROW
DECLARE
   TOT_DEL INTEGER;
BEGIN
   IF DELETING Then
      SELECT COUNT(*) INTO TOT_DEL FROM SYS_DELETE WHERE NOME_TABELA = 'VIAGEM_ESCALA' AND CHAVE = :OLD.VIAGEM_REF || :OLD.ESCALA;
      IF TOT_DEL = 0 THEN
         INSERT INTO CXRJ.SYS_DELETE VALUES ('VIAGEM_ESCALA', :OLD.VIAGEM_REF || :OLD.ESCALA, SYSDATE, USER, 'CXRJ');
      ELSE
         UPDATE CXRJ.SYS_DELETE SET MOMENTO = SYSDATE, USUÁRIO = USER, LOCAL = 'CXRJ' WHERE NOME_TABELA = 'VIAGEM_ESCALA' AND CHAVE = :OLD.VIAGEM_REF || :OLD.ESCALA;
      END IF;
   ELSE
      IF :NEW.SYS_STATUS = '+' THEN
         :NEW.SYS_STATUS := 'I';
      ELSIF :NEW.SYS_STATUS = '/' THEN
         :NEW.SYS_STATUS := 'A';
      ELSIF :NEW.SYS_STATUS = 'X' THEN
         :NEW.SYS_STATUS := '';
      ELSE
         IF INSERTING THEN
            :NEW.SYS_MOMENTO_CRIA := SYSDATE;
            :NEW.SYS_USUÁRIO_CRIA := USER;
            :NEW.SYS_LOCAL_CRIA := 'CXRJ';
            :NEW.SYS_MOMENTO_ATUALIZA := NULL;
            :NEW.SYS_USUÁRIO_ATUALIZA := NULL;
            :NEW.SYS_LOCAL_ATUALIZA := NULL;
            :NEW.SYS_STATUS := 'I';
         END IF;
         IF UPDATING THEN
            :NEW.SYS_MOMENTO_ATUALIZA := SYSDATE;
            :NEW.SYS_USUÁRIO_ATUALIZA := USER;
            :NEW.SYS_LOCAL_ATUALIZA := 'CXRJ';
            :NEW.SYS_STATUS := 'A';
         END IF;
      END IF;
   END IF;
END;
/


